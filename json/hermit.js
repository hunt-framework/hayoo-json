[
  {
    "cmd": "delete-by-query",
    "query": {
      "contexts": [
        "package"
      ],
      "query": {
        "op": "case",
        "type": "word",
        "word": "hermit"
      },
      "type": "context"
    }
  },
  [
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "Context",
          "package": "hermit",
          "source": "src/HERMIT-Context.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "Context",
          "package": "hermit",
          "partial": "Context",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "AbsolutePathH",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#AbsolutePathH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "AbsolutePathH",
          "package": "hermit",
          "partial": "Absolute Path",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:AbsolutePathH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA class of contexts that can have HERMIT bindings added to them.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "AddBindings",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#AddBindings",
          "type": "class"
        },
        "index": {
          "description": "class of contexts that can have HERMIT bindings added to them",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "AddBindings",
          "package": "hermit",
          "partial": "Add Bindings",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:AddBindings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe depth of a binding.  Used, for example, to detect shadowing when inlining.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "BindingDepth",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#BindingDepth",
          "type": "type"
        },
        "index": {
          "description": "The depth of binding Used for example to detect shadowing when inlining",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "BindingDepth",
          "package": "hermit",
          "partial": "Binding Depth",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:BindingDepth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA class of contexts that stores the set of variables in scope that have been bound during the traversal.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "BoundVars",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#BoundVars",
          "type": "class"
        },
        "index": {
          "description": "class of contexts that stores the set of variables in scope that have been bound during the traversal",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "BoundVars",
          "package": "hermit",
          "partial": "Bound Vars",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:BoundVars"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA class of contexts that store GHC rewrite rules.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "HasCoreRules",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#HasCoreRules",
          "type": "class"
        },
        "index": {
          "description": "class of contexts that store GHC rewrite rules",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "HasCoreRules",
          "package": "hermit",
          "partial": "Has Core Rules",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:HasCoreRules"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA class of contexts that store the Global Reader Environment.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "HasGlobalRdrEnv",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#HasGlobalRdrEnv",
          "type": "class"
        },
        "index": {
          "description": "class of contexts that store the Global Reader Environment",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "HasGlobalRdrEnv",
          "package": "hermit",
          "partial": "Has Global Rdr Env",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:HasGlobalRdrEnv"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "HermitBinding",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#HermitBinding",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "HermitBinding",
          "package": "hermit",
          "partial": "Hermit Binding",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:HermitBinding"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHERMIT's representation of variable bindings.\n   Bound expressions cannot be inlined without checking for shadowing issues (using the depth information).\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "HermitBindingSite",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "data"
        },
        "index": {
          "description": "HERMIT representation of variable bindings Bound expressions cannot be inlined without checking for shadowing issues using the depth information",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "HermitBindingSite",
          "package": "hermit",
          "partial": "Hermit Binding Site",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:HermitBindingSite"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe HERMIT context, containing all bindings in scope and the current location in the AST.\n   The bindings here are lazy by choice, so that we can avoid the cost\n   of building the context if we never use it.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "HermitC",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#HermitC",
          "type": "data"
        },
        "index": {
          "description": "The HERMIT context containing all bindings in scope and the current location in the AST The bindings here are lazy by choice so that we can avoid the cost of building the context if we never use it",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "HermitC",
          "package": "hermit",
          "partial": "Hermit",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:HermitC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "LocalPathH",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#LocalPathH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "LocalPathH",
          "package": "hermit",
          "partial": "Local Path",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:LocalPathH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA class of contexts from which HERMIT bindings can be retrieved.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "ReadBindings",
          "package": "hermit",
          "source": "src/HERMIT-Context.html#ReadBindings",
          "type": "class"
        },
        "index": {
          "description": "class of contexts from which HERMIT bindings can be retrieved",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "ReadBindings",
          "package": "hermit",
          "partial": "Read Bindings",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#t:ReadBindings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA variable bound in a case alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "CASEALT",
          "package": "hermit",
          "signature": "CASEALT",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "variable bound in case alternative",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "CASEALT",
          "package": "hermit",
          "partial": "CASEALT",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:CASEALT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA case wildcard binder.  We store both the scrutinised expression, and the case alternative \u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e and variables.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "CASEWILD",
          "package": "hermit",
          "signature": "CASEWILD CoreExpr (AltCon, [Var])",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "case wildcard binder We store both the scrutinised expression and the case alternative AltCon and variables",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "CASEWILD",
          "normalized": "CASEWILD CoreExpr(AltCon,[Var])",
          "package": "hermit",
          "partial": "CASEWILD",
          "signature": "CASEWILD CoreExpr(AltCon,[Var])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:CASEWILD"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA universally quantified type variable.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "FORALL",
          "package": "hermit",
          "signature": "FORALL",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "universally quantified type variable",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "FORALL",
          "package": "hermit",
          "partial": "FORALL",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:FORALL"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA lambda-bound variable.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "LAM",
          "package": "hermit",
          "signature": "LAM",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "lambda-bound variable",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "LAM",
          "package": "hermit",
          "partial": "LAM",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:LAM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA recursive binding that is mutually recursive with the binding under consideration (i.e. we're in another definition in the same recursive binding group.).\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "MUTUALREC",
          "package": "hermit",
          "signature": "MUTUALREC CoreExpr",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "recursive binding that is mutually recursive with the binding under consideration i.e we re in another definition in the same recursive binding group",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "MUTUALREC",
          "package": "hermit",
          "partial": "MUTUALREC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:MUTUALREC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA non-recursive binding of an expression.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "NONREC",
          "package": "hermit",
          "signature": "NONREC CoreExpr",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "non-recursive binding of an expression",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "NONREC",
          "package": "hermit",
          "partial": "NONREC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:NONREC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA recursive binding that does not depend on the current expression (i.e. we're not in the binding group of that binding).\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "REC",
          "package": "hermit",
          "signature": "REC CoreExpr",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "recursive binding that does not depend on the current expression i.e we re not in the binding group of that binding",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "REC",
          "package": "hermit",
          "partial": "REC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:REC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA recursive binding of a superexpression of the current node (i.e. we're in the RHS of that binding).\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "SELFREC",
          "package": "hermit",
          "signature": "SELFREC",
          "source": "src/HERMIT-Context.html#HermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "recursive binding of superexpression of the current node i.e we re in the RHS of that binding",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "SELFREC",
          "package": "hermit",
          "partial": "SELFREC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:SELFREC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd the variables bound by a \u003ccode\u003e\u003ca\u003eDataCon\u003c/a\u003e\u003c/code\u003e in a case.\n   They are all bound at the same depth.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "addAltBindings",
          "package": "hermit",
          "signature": "[Var] -\u003e c -\u003e c",
          "source": "src/HERMIT-Context.html#addAltBindings",
          "type": "function"
        },
        "index": {
          "description": "Add the variables bound by DataCon in case They are all bound at the same depth",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "addAltBindings",
          "normalized": "[Var]-\u003ea-\u003ea",
          "package": "hermit",
          "partial": "Alt Bindings",
          "signature": "[Var]-\u003ec-\u003ec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:addAltBindings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd all bindings in a binding group to a context.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "addBindingGroup",
          "package": "hermit",
          "signature": "CoreBind -\u003e c -\u003e c",
          "source": "src/HERMIT-Context.html#addBindingGroup",
          "type": "function"
        },
        "index": {
          "description": "Add all bindings in binding group to context",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "addBindingGroup",
          "normalized": "CoreBind-\u003ea-\u003ea",
          "package": "hermit",
          "partial": "Binding Group",
          "signature": "CoreBind-\u003ec-\u003ec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:addBindingGroup"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd a wildcard binding for a specific case alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "addCaseWildBinding",
          "package": "hermit",
          "signature": "(Id, CoreExpr, CoreAlt) -\u003e c -\u003e c",
          "source": "src/HERMIT-Context.html#addCaseWildBinding",
          "type": "function"
        },
        "index": {
          "description": "Add wildcard binding for specific case alternative",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "addCaseWildBinding",
          "normalized": "(Id,CoreExpr,CoreAlt)-\u003ea-\u003ea",
          "package": "hermit",
          "partial": "Case Wild Binding",
          "signature": "(Id,CoreExpr,CoreAlt)-\u003ec-\u003ec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:addCaseWildBinding"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd the binding for a recursive definition currently under examination.\n   Note that because the expression may later be modified, the context only records the identifier, not the expression.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "addDefBinding",
          "package": "hermit",
          "signature": "Id -\u003e c -\u003e c",
          "source": "src/HERMIT-Context.html#addDefBinding",
          "type": "function"
        },
        "index": {
          "description": "Add the binding for recursive definition currently under examination Note that because the expression may later be modified the context only records the identifier not the expression",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "addDefBinding",
          "normalized": "Id-\u003ea-\u003ea",
          "package": "hermit",
          "partial": "Def Binding",
          "signature": "Id-\u003ec-\u003ec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:addDefBinding"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd a list of recursive bindings to the context, except the nth binding in the list.\n   The idea is to exclude the definition being descended into.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "addDefBindingsExcept",
          "package": "hermit",
          "signature": "Int -\u003e [(Id, CoreExpr)] -\u003e c -\u003e c",
          "source": "src/HERMIT-Context.html#addDefBindingsExcept",
          "type": "function"
        },
        "index": {
          "description": "Add list of recursive bindings to the context except the nth binding in the list The idea is to exclude the definition being descended into",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "addDefBindingsExcept",
          "normalized": "Int-\u003e[(Id,CoreExpr)]-\u003ea-\u003ea",
          "package": "hermit",
          "partial": "Def Bindings Except",
          "signature": "Int-\u003e[(Id,CoreExpr)]-\u003ec-\u003ec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:addDefBindingsExcept"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd a universally quantified type variable to a context.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "addForallBinding",
          "package": "hermit",
          "signature": "TyVar -\u003e c -\u003e c",
          "source": "src/HERMIT-Context.html#addForallBinding",
          "type": "function"
        },
        "index": {
          "description": "Add universally quantified type variable to context",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "addForallBinding",
          "normalized": "TyVar-\u003ea-\u003ea",
          "package": "hermit",
          "partial": "Forall Binding",
          "signature": "TyVar-\u003ec-\u003ec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:addForallBinding"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd a complete set of parrallel bindings to the context.\n   (Parallel bindings occur in recursive let bindings and case alternatives.)\n   This can also be used for solitary bindings (e.g. lambdas).\n   Bindings are added in parallel sets to help with shadowing issues.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "addHermitBindings",
          "package": "hermit",
          "signature": "[(Var, HermitBindingSite, AbsolutePathH)] -\u003e c -\u003e c",
          "source": "src/HERMIT-Context.html#addHermitBindings",
          "type": "method"
        },
        "index": {
          "description": "Add complete set of parrallel bindings to the context Parallel bindings occur in recursive let bindings and case alternatives This can also be used for solitary bindings e.g lambdas Bindings are added in parallel sets to help with shadowing issues",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "addHermitBindings",
          "normalized": "[(Var,HermitBindingSite,AbsolutePathH)]-\u003ea-\u003ea",
          "package": "hermit",
          "partial": "Hermit Bindings",
          "signature": "[(Var,HermitBindingSite,AbsolutePathH)]-\u003ec-\u003ec",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:addHermitBindings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd a lambda bound variable to a context.\n   All that is known is the variable, which may shadow something.\n   If so, we don't worry about that here, it is instead checked during inlining.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "addLambdaBinding",
          "package": "hermit",
          "signature": "Var -\u003e c -\u003e c",
          "source": "src/HERMIT-Context.html#addLambdaBinding",
          "type": "function"
        },
        "index": {
          "description": "Add lambda bound variable to context All that is known is the variable which may shadow something If so we don worry about that here it is instead checked during inlining",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "addLambdaBinding",
          "normalized": "Var-\u003ea-\u003ea",
          "package": "hermit",
          "partial": "Lambda Binding",
          "signature": "Var-\u003ec-\u003ec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:addLambdaBinding"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDetermine if a variable is bound in a context.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "boundIn",
          "package": "hermit",
          "signature": "Var -\u003e c -\u003e Bool",
          "source": "src/HERMIT-Context.html#boundIn",
          "type": "function"
        },
        "index": {
          "description": "Determine if variable is bound in context",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "boundIn",
          "normalized": "Var-\u003ea-\u003eBool",
          "package": "hermit",
          "partial": "In",
          "signature": "Var-\u003ec-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:boundIn"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "boundVars",
          "package": "hermit",
          "signature": "c -\u003e VarSet",
          "source": "src/HERMIT-Context.html#boundVars",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "boundVars",
          "normalized": "a-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars",
          "signature": "c-\u003eVarSet",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:boundVars"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList all variables bound in the context that match the given name.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "findBoundVars",
          "package": "hermit",
          "signature": "Name -\u003e c -\u003e VarSet",
          "source": "src/HERMIT-Context.html#findBoundVars",
          "type": "function"
        },
        "index": {
          "description": "List all variables bound in the context that match the given name",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "findBoundVars",
          "normalized": "Name-\u003ea-\u003eVarSet",
          "package": "hermit",
          "partial": "Bound Vars",
          "signature": "Name-\u003ec-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:findBoundVars"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "hbDepth",
          "package": "hermit",
          "signature": "HermitBinding -\u003e BindingDepth",
          "source": "src/HERMIT-Context.html#hbDepth",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hbDepth",
          "normalized": "HermitBinding-\u003eBindingDepth",
          "package": "hermit",
          "partial": "Depth",
          "signature": "HermitBinding-\u003eBindingDepth",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hbDepth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "hbPath",
          "package": "hermit",
          "signature": "HermitBinding -\u003e AbsolutePathH",
          "source": "src/HERMIT-Context.html#hbPath",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hbPath",
          "normalized": "HermitBinding-\u003eAbsolutePathH",
          "package": "hermit",
          "partial": "Path",
          "signature": "HermitBinding-\u003eAbsolutePathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hbPath"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "hbSite",
          "package": "hermit",
          "signature": "HermitBinding -\u003e HermitBindingSite",
          "source": "src/HERMIT-Context.html#hbSite",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hbSite",
          "normalized": "HermitBinding-\u003eHermitBindingSite",
          "package": "hermit",
          "partial": "Site",
          "signature": "HermitBinding-\u003eHermitBindingSite",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hbSite"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRetrieve the expression in a \u003ccode\u003e\u003ca\u003eHermitBinding\u003c/a\u003e\u003c/code\u003e, if there is one.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "hermitBindingExpr",
          "package": "hermit",
          "signature": "HermitBinding -\u003e KureM CoreExpr",
          "source": "src/HERMIT-Context.html#hermitBindingExpr",
          "type": "function"
        },
        "index": {
          "description": "Retrieve the expression in HermitBinding if there is one",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hermitBindingExpr",
          "normalized": "HermitBinding-\u003eKureM CoreExpr",
          "package": "hermit",
          "partial": "Binding Expr",
          "signature": "HermitBinding-\u003eKureM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hermitBindingExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRetrieve the expression in a \u003ccode\u003e\u003ca\u003eHermitBindingSite\u003c/a\u003e\u003c/code\u003e, if there is one.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "hermitBindingSiteExpr",
          "package": "hermit",
          "signature": "HermitBindingSite -\u003e KureM CoreExpr",
          "source": "src/HERMIT-Context.html#hermitBindingSiteExpr",
          "type": "function"
        },
        "index": {
          "description": "Retrieve the expression in HermitBindingSite if there is one",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hermitBindingSiteExpr",
          "normalized": "HermitBindingSite-\u003eKureM CoreExpr",
          "package": "hermit",
          "partial": "Binding Site Expr",
          "signature": "HermitBindingSite-\u003eKureM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hermitBindingSiteExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "hermitBindingSummary",
          "package": "hermit",
          "signature": "HermitBinding -\u003e String",
          "source": "src/HERMIT-Context.html#hermitBindingSummary",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hermitBindingSummary",
          "normalized": "HermitBinding-\u003eString",
          "package": "hermit",
          "partial": "Binding Summary",
          "signature": "HermitBinding-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hermitBindingSummary"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "hermitBindings",
          "package": "hermit",
          "signature": "c -\u003e Map Var HermitBinding",
          "source": "src/HERMIT-Context.html#hermitBindings",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hermitBindings",
          "normalized": "a-\u003eMap Var HermitBinding",
          "package": "hermit",
          "partial": "Bindings",
          "signature": "c-\u003eMap Var HermitBinding",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hermitBindings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "hermitCoreRules",
          "package": "hermit",
          "signature": "c -\u003e [CoreRule]",
          "source": "src/HERMIT-Context.html#hermitCoreRules",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hermitCoreRules",
          "normalized": "a-\u003e[CoreRule]",
          "package": "hermit",
          "partial": "Core Rules",
          "signature": "c-\u003e[CoreRule]",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hermitCoreRules"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "hermitDepth",
          "package": "hermit",
          "signature": "c -\u003e BindingDepth",
          "source": "src/HERMIT-Context.html#hermitDepth",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hermitDepth",
          "normalized": "a-\u003eBindingDepth",
          "package": "hermit",
          "partial": "Depth",
          "signature": "c-\u003eBindingDepth",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hermitDepth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Context",
          "name": "hermitGlobalRdrEnv",
          "package": "hermit",
          "signature": "c -\u003e GlobalRdrEnv",
          "source": "src/HERMIT-Context.html#hermitGlobalRdrEnv",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "hermitGlobalRdrEnv",
          "normalized": "a-\u003eGlobalRdrEnv",
          "package": "hermit",
          "partial": "Global Rdr Env",
          "signature": "c-\u003eGlobalRdrEnv",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:hermitGlobalRdrEnv"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCreate the initial HERMIT \u003ccode\u003e\u003ca\u003eHermitC\u003c/a\u003e\u003c/code\u003e by providing a \u003ccode\u003e\u003ca\u003eModGuts\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "initHermitC",
          "package": "hermit",
          "signature": "ModGuts -\u003e HermitC",
          "source": "src/HERMIT-Context.html#initHermitC",
          "type": "function"
        },
        "index": {
          "description": "Create the initial HERMIT HermitC by providing ModGuts",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "initHermitC",
          "normalized": "ModGuts-\u003eHermitC",
          "package": "hermit",
          "partial": "Hermit",
          "signature": "ModGuts-\u003eHermitC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:initHermitC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLookup the binding for a variable in a context.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "lookupHermitBinding",
          "package": "hermit",
          "signature": "Var -\u003e c -\u003e m HermitBinding",
          "source": "src/HERMIT-Context.html#lookupHermitBinding",
          "type": "function"
        },
        "index": {
          "description": "Lookup the binding for variable in context",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "lookupHermitBinding",
          "normalized": "Var-\u003ea-\u003eb HermitBinding",
          "package": "hermit",
          "partial": "Hermit Binding",
          "signature": "Var-\u003ec-\u003em HermitBinding",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:lookupHermitBinding"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLookup the depth of a variable's binding in a context.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "lookupHermitBindingDepth",
          "package": "hermit",
          "signature": "Var -\u003e c -\u003e m BindingDepth",
          "source": "src/HERMIT-Context.html#lookupHermitBindingDepth",
          "type": "function"
        },
        "index": {
          "description": "Lookup the depth of variable binding in context",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "lookupHermitBindingDepth",
          "normalized": "Var-\u003ea-\u003eb BindingDepth",
          "package": "hermit",
          "partial": "Hermit Binding Depth",
          "signature": "Var-\u003ec-\u003em BindingDepth",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:lookupHermitBindingDepth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLookup the binding for a variable in a context, ensuring it was bound at the specified depth.\n\u003c/p\u003e",
          "module": "HERMIT.Context",
          "name": "lookupHermitBindingSite",
          "package": "hermit",
          "signature": "Var -\u003e BindingDepth -\u003e c -\u003e m HermitBindingSite",
          "source": "src/HERMIT-Context.html#lookupHermitBindingSite",
          "type": "function"
        },
        "index": {
          "description": "Lookup the binding for variable in context ensuring it was bound at the specified depth",
          "hierarchy": "HERMIT Context",
          "module": "HERMIT.Context",
          "name": "lookupHermitBindingSite",
          "normalized": "Var-\u003eBindingDepth-\u003ea-\u003eb HermitBindingSite",
          "package": "hermit",
          "partial": "Hermit Binding Site",
          "signature": "Var-\u003eBindingDepth-\u003ec-\u003em HermitBindingSite",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Context.html#v:lookupHermitBindingSite"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Core",
          "package": "hermit",
          "source": "src/HERMIT-Core.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Core",
          "package": "hermit",
          "partial": "Core",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA (potentially recursive) definition is an identifier and an expression.\n   In GHC Core, recursive definitions are encoded as (\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) pairs.\n   This data type is isomorphic.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "CoreDef",
          "package": "hermit",
          "source": "src/HERMIT-Core.html#CoreDef",
          "type": "data"
        },
        "index": {
          "description": "potentially recursive definition is an identifier and an expression In GHC Core recursive definitions are encoded as Id CoreExpr pairs This data type is isomorphic",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "CoreDef",
          "package": "hermit",
          "partial": "Core Def",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#t:CoreDef"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA program is a telescope of nested binding groups.\n   That is, each binding scopes over the remainder of the program.\n   In GHC Core, programs are encoded as [\u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e].\n   This data type is isomorphic.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "CoreProg",
          "package": "hermit",
          "source": "src/HERMIT-Core.html#CoreProg",
          "type": "data"
        },
        "index": {
          "description": "program is telescope of nested binding groups That is each binding scopes over the remainder of the program In GHC Core programs are encoded as CoreBind This data type is isomorphic",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "CoreProg",
          "package": "hermit",
          "partial": "Core Prog",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#t:CoreProg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUnlike everything else, there is no synonym for \u003ccode\u003e\u003ca\u003eTickish\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e provided by GHC, so we define one.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "CoreTickish",
          "package": "hermit",
          "source": "src/HERMIT-Core.html#CoreTickish",
          "type": "type"
        },
        "index": {
          "description": "Unlike everything else there is no synonym for Tickish Id provided by GHC so we define one",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "CoreTickish",
          "package": "hermit",
          "partial": "Core Tickish",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#t:CoreTickish"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCrumbs record a path through the tree, using descriptive constructor names.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "Crumb",
          "package": "hermit",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "data"
        },
        "index": {
          "description": "Crumbs record path through the tree using descriptive constructor names",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Crumb",
          "package": "hermit",
          "partial": "Crumb",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#t:Crumb"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Alt_Con",
          "package": "hermit",
          "signature": "Alt_Con",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Alt_Con",
          "package": "hermit",
          "partial": "Alt Con",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Alt_Con"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Alt_RHS",
          "package": "hermit",
          "signature": "Alt_RHS",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Alt_RHS",
          "package": "hermit",
          "partial": "Alt RHS",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Alt_RHS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Alt_Var",
          "package": "hermit",
          "signature": "Alt_Var Int",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Alt_Var",
          "package": "hermit",
          "partial": "Alt Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Alt_Var"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "AppCo_Arg",
          "package": "hermit",
          "signature": "AppCo_Arg",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "AppCo_Arg",
          "package": "hermit",
          "partial": "App Co Arg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:AppCo_Arg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "AppCo_Fun",
          "package": "hermit",
          "signature": "AppCo_Fun",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "AppCo_Fun",
          "package": "hermit",
          "partial": "App Co Fun",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:AppCo_Fun"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "AppTy_Arg",
          "package": "hermit",
          "signature": "AppTy_Arg",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "AppTy_Arg",
          "package": "hermit",
          "partial": "App Ty Arg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:AppTy_Arg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "AppTy_Fun",
          "package": "hermit",
          "signature": "AppTy_Fun",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "AppTy_Fun",
          "package": "hermit",
          "partial": "App Ty Fun",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:AppTy_Fun"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "App_Arg",
          "package": "hermit",
          "signature": "App_Arg",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "App_Arg",
          "package": "hermit",
          "partial": "App Arg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:App_Arg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "App_Fun",
          "package": "hermit",
          "signature": "App_Fun",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "App_Fun",
          "package": "hermit",
          "partial": "App Fun",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:App_Fun"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "AxiomInstCo_Arg",
          "package": "hermit",
          "signature": "AxiomInstCo_Arg Int",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "AxiomInstCo_Arg",
          "package": "hermit",
          "partial": "Axiom Inst Co Arg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:AxiomInstCo_Arg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "AxiomInstCo_Axiom",
          "package": "hermit",
          "signature": "AxiomInstCo_Axiom",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "AxiomInstCo_Axiom",
          "package": "hermit",
          "partial": "Axiom Inst Co Axiom",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:AxiomInstCo_Axiom"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "AxiomInstCo_Index",
          "package": "hermit",
          "signature": "AxiomInstCo_Index",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "AxiomInstCo_Index",
          "package": "hermit",
          "partial": "Axiom Inst Co Index",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:AxiomInstCo_Index"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Case_Alt",
          "package": "hermit",
          "signature": "Case_Alt Int",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Case_Alt",
          "package": "hermit",
          "partial": "Case Alt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Case_Alt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Case_Binder",
          "package": "hermit",
          "signature": "Case_Binder",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Case_Binder",
          "package": "hermit",
          "partial": "Case Binder",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Case_Binder"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Case_Scrutinee",
          "package": "hermit",
          "signature": "Case_Scrutinee",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Case_Scrutinee",
          "package": "hermit",
          "partial": "Case Scrutinee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Case_Scrutinee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Case_Type",
          "package": "hermit",
          "signature": "Case_Type",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Case_Type",
          "package": "hermit",
          "partial": "Case Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Case_Type"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Cast_Co",
          "package": "hermit",
          "signature": "Cast_Co",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Cast_Co",
          "package": "hermit",
          "partial": "Cast Co",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Cast_Co"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Cast_Expr",
          "package": "hermit",
          "signature": "Cast_Expr",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Cast_Expr",
          "package": "hermit",
          "partial": "Cast Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Cast_Expr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "CoVarCo_CoVar",
          "package": "hermit",
          "signature": "CoVarCo_CoVar",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "CoVarCo_CoVar",
          "package": "hermit",
          "partial": "Co Var Co Co Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:CoVarCo_CoVar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Co_Co",
          "package": "hermit",
          "signature": "Co_Co",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Co_Co",
          "package": "hermit",
          "partial": "Co Co",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Co_Co"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Def",
          "package": "hermit",
          "signature": "Def Id CoreExpr",
          "source": "src/HERMIT-Core.html#CoreDef",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Def",
          "package": "hermit",
          "partial": "Def",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Def"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Def_Id",
          "package": "hermit",
          "signature": "Def_Id",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Def_Id",
          "package": "hermit",
          "partial": "Def Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Def_Id"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Def_RHS",
          "package": "hermit",
          "signature": "Def_RHS",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Def_RHS",
          "package": "hermit",
          "partial": "Def RHS",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Def_RHS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "ForAllCo_Body",
          "package": "hermit",
          "signature": "ForAllCo_Body",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ForAllCo_Body",
          "package": "hermit",
          "partial": "For All Co Body",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ForAllCo_Body"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "ForAllCo_TyVar",
          "package": "hermit",
          "signature": "ForAllCo_TyVar",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ForAllCo_TyVar",
          "package": "hermit",
          "partial": "For All Co Ty Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ForAllCo_TyVar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "ForAllTy_Body",
          "package": "hermit",
          "signature": "ForAllTy_Body",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ForAllTy_Body",
          "package": "hermit",
          "partial": "For All Ty Body",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ForAllTy_Body"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "ForAllTy_Var",
          "package": "hermit",
          "signature": "ForAllTy_Var",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ForAllTy_Var",
          "package": "hermit",
          "partial": "For All Ty Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ForAllTy_Var"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "FunTy_CoDom",
          "package": "hermit",
          "signature": "FunTy_CoDom",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "FunTy_CoDom",
          "package": "hermit",
          "partial": "Fun Ty Co Dom",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:FunTy_CoDom"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "FunTy_Dom",
          "package": "hermit",
          "signature": "FunTy_Dom",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "FunTy_Dom",
          "package": "hermit",
          "partial": "Fun Ty Dom",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:FunTy_Dom"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "InstCo_Co",
          "package": "hermit",
          "signature": "InstCo_Co",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "InstCo_Co",
          "package": "hermit",
          "partial": "Inst Co Co",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:InstCo_Co"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "InstCo_Type",
          "package": "hermit",
          "signature": "InstCo_Type",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "InstCo_Type",
          "package": "hermit",
          "partial": "Inst Co Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:InstCo_Type"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "LRCo_Co",
          "package": "hermit",
          "signature": "LRCo_Co",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "LRCo_Co",
          "package": "hermit",
          "partial": "LRCo Co",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:LRCo_Co"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "LRCo_LR",
          "package": "hermit",
          "signature": "LRCo_LR",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "LRCo_LR",
          "package": "hermit",
          "partial": "LRCo LR",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:LRCo_LR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Lam_Body",
          "package": "hermit",
          "signature": "Lam_Body",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Lam_Body",
          "package": "hermit",
          "partial": "Lam Body",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Lam_Body"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Lam_Var",
          "package": "hermit",
          "signature": "Lam_Var",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Lam_Var",
          "package": "hermit",
          "partial": "Lam Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Lam_Var"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Let_Bind",
          "package": "hermit",
          "signature": "Let_Bind",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Let_Bind",
          "package": "hermit",
          "partial": "Let Bind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Let_Bind"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Let_Body",
          "package": "hermit",
          "signature": "Let_Body",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Let_Body",
          "package": "hermit",
          "partial": "Let Body",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Let_Body"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "LitTy_TyLit",
          "package": "hermit",
          "signature": "LitTy_TyLit",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "LitTy_TyLit",
          "package": "hermit",
          "partial": "Lit Ty Ty Lit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:LitTy_TyLit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Lit_Lit",
          "package": "hermit",
          "signature": "Lit_Lit",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Lit_Lit",
          "package": "hermit",
          "partial": "Lit Lit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Lit_Lit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "ModGuts_Prog",
          "package": "hermit",
          "signature": "ModGuts_Prog",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ModGuts_Prog",
          "package": "hermit",
          "partial": "Mod Guts Prog",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ModGuts_Prog"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "NonRec_RHS",
          "package": "hermit",
          "signature": "NonRec_RHS",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "NonRec_RHS",
          "package": "hermit",
          "partial": "Non Rec RHS",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:NonRec_RHS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "NonRec_Var",
          "package": "hermit",
          "signature": "NonRec_Var",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "NonRec_Var",
          "package": "hermit",
          "partial": "Non Rec Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:NonRec_Var"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "NthCo_Co",
          "package": "hermit",
          "signature": "NthCo_Co",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "NthCo_Co",
          "package": "hermit",
          "partial": "Nth Co Co",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:NthCo_Co"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "NthCo_Int",
          "package": "hermit",
          "signature": "NthCo_Int",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "NthCo_Int",
          "package": "hermit",
          "partial": "Nth Co Int",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:NthCo_Int"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA binding group and the program it scopes over.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "ProgCons",
          "package": "hermit",
          "signature": "ProgCons CoreBind CoreProg",
          "source": "src/HERMIT-Core.html#CoreProg",
          "type": "function"
        },
        "index": {
          "description": "binding group and the program it scopes over",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ProgCons",
          "package": "hermit",
          "partial": "Prog Cons",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ProgCons"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "ProgCons_Head",
          "package": "hermit",
          "signature": "ProgCons_Head",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ProgCons_Head",
          "package": "hermit",
          "partial": "Prog Cons Head",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ProgCons_Head"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "ProgCons_Tail",
          "package": "hermit",
          "signature": "ProgCons_Tail",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ProgCons_Tail",
          "package": "hermit",
          "partial": "Prog Cons Tail",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ProgCons_Tail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn empty program.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "ProgNil",
          "package": "hermit",
          "signature": "ProgNil",
          "source": "src/HERMIT-Core.html#CoreProg",
          "type": "function"
        },
        "index": {
          "description": "An empty program",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "ProgNil",
          "package": "hermit",
          "partial": "Prog Nil",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:ProgNil"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Rec_Def",
          "package": "hermit",
          "signature": "Rec_Def Int",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Rec_Def",
          "package": "hermit",
          "partial": "Rec Def",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Rec_Def"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Refl_Type",
          "package": "hermit",
          "signature": "Refl_Type",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Refl_Type",
          "package": "hermit",
          "partial": "Refl Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Refl_Type"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "SymCo_Co",
          "package": "hermit",
          "signature": "SymCo_Co",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "SymCo_Co",
          "package": "hermit",
          "partial": "Sym Co Co",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:SymCo_Co"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Tick_Expr",
          "package": "hermit",
          "signature": "Tick_Expr",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Tick_Expr",
          "package": "hermit",
          "partial": "Tick Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Tick_Expr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Tick_Tick",
          "package": "hermit",
          "signature": "Tick_Tick",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Tick_Tick",
          "package": "hermit",
          "partial": "Tick Tick",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Tick_Tick"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "TransCo_Left",
          "package": "hermit",
          "signature": "TransCo_Left",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "TransCo_Left",
          "package": "hermit",
          "partial": "Trans Co Left",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:TransCo_Left"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "TransCo_Right",
          "package": "hermit",
          "signature": "TransCo_Right",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "TransCo_Right",
          "package": "hermit",
          "partial": "Trans Co Right",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:TransCo_Right"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "TyConAppCo_Arg",
          "package": "hermit",
          "signature": "TyConAppCo_Arg Int",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "TyConAppCo_Arg",
          "package": "hermit",
          "partial": "Ty Con App Co Arg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:TyConAppCo_Arg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "TyConAppCo_TyCon",
          "package": "hermit",
          "signature": "TyConAppCo_TyCon",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "TyConAppCo_TyCon",
          "package": "hermit",
          "partial": "Ty Con App Co Ty Con",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:TyConAppCo_TyCon"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "TyConApp_Arg",
          "package": "hermit",
          "signature": "TyConApp_Arg Int",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "TyConApp_Arg",
          "package": "hermit",
          "partial": "Ty Con App Arg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:TyConApp_Arg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "TyConApp_TyCon",
          "package": "hermit",
          "signature": "TyConApp_TyCon",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "TyConApp_TyCon",
          "package": "hermit",
          "partial": "Ty Con App Ty Con",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:TyConApp_TyCon"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "TyVarTy_TyVar",
          "package": "hermit",
          "signature": "TyVarTy_TyVar",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "TyVarTy_TyVar",
          "package": "hermit",
          "partial": "Ty Var Ty Ty Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:TyVarTy_TyVar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Type_Type",
          "package": "hermit",
          "signature": "Type_Type",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Type_Type",
          "package": "hermit",
          "partial": "Type Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Type_Type"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "UnsafeCo_Left",
          "package": "hermit",
          "signature": "UnsafeCo_Left",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "UnsafeCo_Left",
          "package": "hermit",
          "partial": "Unsafe Co Left",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:UnsafeCo_Left"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "UnsafeCo_Right",
          "package": "hermit",
          "signature": "UnsafeCo_Right",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "UnsafeCo_Right",
          "package": "hermit",
          "partial": "Unsafe Co Right",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:UnsafeCo_Right"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "Var_Id",
          "package": "hermit",
          "signature": "Var_Id",
          "source": "src/HERMIT-Core.html#Crumb",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "Var_Id",
          "package": "hermit",
          "partial": "Var Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:Var_Id"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of case alternatives.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "altAlphaEq",
          "package": "hermit",
          "signature": "CoreAlt -\u003e CoreAlt -\u003e Bool",
          "source": "src/HERMIT-Core.html#altAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of case alternatives",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "altAlphaEq",
          "normalized": "CoreAlt-\u003eCoreAlt-\u003eBool",
          "package": "hermit",
          "partial": "Alpha Eq",
          "signature": "CoreAlt-\u003eCoreAlt-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:altAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic Equality of case alternatives.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "altSyntaxEq",
          "package": "hermit",
          "signature": "CoreAlt -\u003e CoreAlt -\u003e Bool",
          "source": "src/HERMIT-Core.html#altSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic Equality of case alternatives",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "altSyntaxEq",
          "normalized": "CoreAlt-\u003eCoreAlt-\u003eBool",
          "package": "hermit",
          "partial": "Syntax Eq",
          "signature": "CoreAlt-\u003eCoreAlt-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:altSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList the variables bound by a case alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "altVars",
          "package": "hermit",
          "signature": "CoreAlt -\u003e [Var]",
          "source": "src/HERMIT-Core.html#altVars",
          "type": "function"
        },
        "index": {
          "description": "List the variables bound by case alternative",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "altVars",
          "normalized": "CoreAlt-\u003e[Var]",
          "package": "hermit",
          "partial": "Vars",
          "signature": "CoreAlt-\u003e[Var]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:altVars"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCount the number of nested applications.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "appCount",
          "package": "hermit",
          "signature": "CoreExpr -\u003e Int",
          "source": "src/HERMIT-Core.html#appCount",
          "type": "function"
        },
        "index": {
          "description": "Count the number of nested applications",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "appCount",
          "normalized": "CoreExpr-\u003eInt",
          "package": "hermit",
          "partial": "Count",
          "signature": "CoreExpr-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:appCount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of binding groups.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "bindAlphaEq",
          "package": "hermit",
          "signature": "CoreBind -\u003e CoreBind -\u003e Bool",
          "source": "src/HERMIT-Core.html#bindAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of binding groups",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "bindAlphaEq",
          "normalized": "CoreBind-\u003eCoreBind-\u003eBool",
          "package": "hermit",
          "partial": "Alpha Eq",
          "signature": "CoreBind-\u003eCoreBind-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:bindAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic Equality of binding groups.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "bindSyntaxEq",
          "package": "hermit",
          "signature": "CoreBind -\u003e CoreBind -\u003e Bool",
          "source": "src/HERMIT-Core.html#bindSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic Equality of binding groups",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "bindSyntaxEq",
          "normalized": "CoreBind-\u003eCoreBind-\u003eBool",
          "package": "hermit",
          "partial": "Syntax Eq",
          "signature": "CoreBind-\u003eCoreBind-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:bindSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExtract the list of identifier/expression pairs from a binding group.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "bindToVarExprs",
          "package": "hermit",
          "signature": "CoreBind -\u003e [(Var, CoreExpr)]",
          "source": "src/HERMIT-Core.html#bindToVarExprs",
          "type": "function"
        },
        "index": {
          "description": "Extract the list of identifier expression pairs from binding group",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "bindToVarExprs",
          "normalized": "CoreBind-\u003e[(Var,CoreExpr)]",
          "package": "hermit",
          "partial": "To Var Exprs",
          "signature": "CoreBind-\u003e[(Var,CoreExpr)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:bindToVarExprs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList all variables bound in a binding group.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "bindVars",
          "package": "hermit",
          "signature": "CoreBind -\u003e [Var]",
          "source": "src/HERMIT-Core.html#bindVars",
          "type": "function"
        },
        "index": {
          "description": "List all variables bound in binding group",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "bindVars",
          "normalized": "CoreBind-\u003e[Var]",
          "package": "hermit",
          "partial": "Vars",
          "signature": "CoreBind-\u003e[Var]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:bindVars"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eBuild a program from a list of bindings.\n   Note that bindings earlier in the list are considered scope over bindings later in the list.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "bindsToProg",
          "package": "hermit",
          "signature": "[CoreBind] -\u003e CoreProg",
          "source": "src/HERMIT-Core.html#bindsToProg",
          "type": "function"
        },
        "index": {
          "description": "Build program from list of bindings Note that bindings earlier in the list are considered scope over bindings later in the list",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "bindsToProg",
          "normalized": "[CoreBind]-\u003eCoreProg",
          "package": "hermit",
          "partial": "To Prog",
          "signature": "[CoreBind]-\u003eCoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:bindsToProg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of coercions.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "coercionAlphaEq",
          "package": "hermit",
          "signature": "Coercion -\u003e Coercion -\u003e Bool",
          "source": "src/HERMIT-Core.html#coercionAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of coercions",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "coercionAlphaEq",
          "normalized": "Coercion-\u003eCoercion-\u003eBool",
          "package": "hermit",
          "partial": "Alpha Eq",
          "signature": "Coercion-\u003eCoercion-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:coercionAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic Equality of \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "coercionSyntaxEq",
          "package": "hermit",
          "signature": "Coercion -\u003e Coercion -\u003e Bool",
          "source": "src/HERMIT-Core.html#coercionSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic Equality of Coercion",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "coercionSyntaxEq",
          "normalized": "Coercion-\u003eCoercion-\u003eBool",
          "package": "hermit",
          "partial": "Syntax Eq",
          "signature": "Coercion-\u003eCoercion-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:coercionSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of recursive definitions.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "defAlphaEq",
          "package": "hermit",
          "signature": "CoreDef -\u003e CoreDef -\u003e Bool",
          "source": "src/HERMIT-Core.html#defAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of recursive definitions",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "defAlphaEq",
          "normalized": "CoreDef-\u003eCoreDef-\u003eBool",
          "package": "hermit",
          "partial": "Alpha Eq",
          "signature": "CoreDef-\u003eCoreDef-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:defAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the identifier bound by a recursive definition.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "defId",
          "package": "hermit",
          "signature": "CoreDef -\u003e Id",
          "source": "src/HERMIT-Core.html#defId",
          "type": "function"
        },
        "index": {
          "description": "Return the identifier bound by recursive definition",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "defId",
          "normalized": "CoreDef-\u003eId",
          "package": "hermit",
          "partial": "Id",
          "signature": "CoreDef-\u003eId",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:defId"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic Equality of recursive definitions.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "defSyntaxEq",
          "package": "hermit",
          "signature": "CoreDef -\u003e CoreDef -\u003e Bool",
          "source": "src/HERMIT-Core.html#defSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic Equality of recursive definitions",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "defSyntaxEq",
          "normalized": "CoreDef-\u003eCoreDef-\u003eBool",
          "package": "hermit",
          "partial": "Syntax Eq",
          "signature": "CoreDef-\u003eCoreDef-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:defSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConvert a definition to an identifier/expression pair.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "defToIdExpr",
          "package": "hermit",
          "signature": "CoreDef -\u003e (Id, CoreExpr)",
          "source": "src/HERMIT-Core.html#defToIdExpr",
          "type": "function"
        },
        "index": {
          "description": "Convert definition to an identifier expression pair",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "defToIdExpr",
          "normalized": "CoreDef-\u003e(Id,CoreExpr)",
          "package": "hermit",
          "partial": "To Id Expr",
          "signature": "CoreDef-\u003e(Id,CoreExpr)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:defToIdExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConvert a list of recursive definitions into an (isomorphic) recursive binding group.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "defsToRecBind",
          "package": "hermit",
          "signature": "[CoreDef] -\u003e CoreBind",
          "source": "src/HERMIT-Core.html#defsToRecBind",
          "type": "function"
        },
        "index": {
          "description": "Convert list of recursive definitions into an isomorphic recursive binding group",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "defsToRecBind",
          "normalized": "[CoreDef]-\u003eCoreBind",
          "package": "hermit",
          "partial": "To Rec Bind",
          "signature": "[CoreDef]-\u003eCoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:defsToRecBind"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConverts a \u003ccode\u003e\u003ca\u003eCrumb\u003c/a\u003e\u003c/code\u003e into the \u003ccode\u003e\u003ca\u003eCrumb\u003c/a\u003e\u003c/code\u003e pointing to its left-sibling, if a such a \u003ccode\u003e\u003ca\u003eCrumb\u003c/a\u003e\u003c/code\u003e exists.\n   This is for backwards compatibility purposes with the old Int representation.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "deprecatedLeftSibling",
          "package": "hermit",
          "signature": "Crumb -\u003e Maybe Crumb",
          "source": "src/HERMIT-Core.html#deprecatedLeftSibling",
          "type": "function"
        },
        "index": {
          "description": "Converts Crumb into the Crumb pointing to its left-sibling if such Crumb exists This is for backwards compatibility purposes with the old Int representation",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "deprecatedLeftSibling",
          "normalized": "Crumb-\u003eMaybe Crumb",
          "package": "hermit",
          "partial": "Left Sibling",
          "signature": "Crumb-\u003eMaybe Crumb",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:deprecatedLeftSibling"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConverts a \u003ccode\u003e\u003ca\u003eCrumb\u003c/a\u003e\u003c/code\u003e into the \u003ccode\u003e\u003ca\u003eCrumb\u003c/a\u003e\u003c/code\u003e pointing to its right-sibling, if a such a \u003ccode\u003e\u003ca\u003eCrumb\u003c/a\u003e\u003c/code\u003e exists.\n   This is for backwards compatibility purposes with the old Int representation.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "deprecatedRightSibling",
          "package": "hermit",
          "signature": "Crumb -\u003e Maybe Crumb",
          "source": "src/HERMIT-Core.html#deprecatedRightSibling",
          "type": "function"
        },
        "index": {
          "description": "Converts Crumb into the Crumb pointing to its right-sibling if such Crumb exists This is for backwards compatibility purposes with the old Int representation",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "deprecatedRightSibling",
          "normalized": "Crumb-\u003eMaybe Crumb",
          "package": "hermit",
          "partial": "Right Sibling",
          "signature": "Crumb-\u003eMaybe Crumb",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:deprecatedRightSibling"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the domain/codomain type of an endofunction expression.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "endoFunType",
          "package": "hermit",
          "signature": "CoreExpr -\u003e m Type",
          "source": "src/HERMIT-Core.html#endoFunType",
          "type": "function"
        },
        "index": {
          "description": "Return the domain codomain type of an endofunction expression",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "endoFunType",
          "normalized": "CoreExpr-\u003ea Type",
          "package": "hermit",
          "partial": "Fun Type",
          "signature": "CoreExpr-\u003em Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:endoFunType"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of expressions.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "exprAlphaEq",
          "package": "hermit",
          "signature": "CoreExpr -\u003e CoreExpr -\u003e Bool",
          "source": "src/HERMIT-Core.html#exprAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of expressions",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "exprAlphaEq",
          "normalized": "CoreExpr-\u003eCoreExpr-\u003eBool",
          "package": "hermit",
          "partial": "Alpha Eq",
          "signature": "CoreExpr-\u003eCoreExpr-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:exprAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGHC's \u003ccode\u003e\u003ca\u003eexprType\u003c/a\u003e\u003c/code\u003e function throws an error if applied to a \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e.\n   This function returns the \u003ccode\u003e\u003ca\u003eKind\u003c/a\u003e\u003c/code\u003e of a \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e, but otherwise behaves as \u003ccode\u003e\u003ca\u003eexprType\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "exprKindOrType",
          "package": "hermit",
          "signature": "CoreExpr -\u003e KindOrType",
          "source": "src/HERMIT-Core.html#exprKindOrType",
          "type": "function"
        },
        "index": {
          "description": "GHC exprType function throws an error if applied to Type This function returns the Kind of Type but otherwise behaves as exprType",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "exprKindOrType",
          "normalized": "CoreExpr-\u003eKindOrType",
          "package": "hermit",
          "partial": "Kind Or Type",
          "signature": "CoreExpr-\u003eKindOrType",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:exprKindOrType"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic Equality of expressions.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "exprSyntaxEq",
          "package": "hermit",
          "signature": "CoreExpr -\u003e CoreExpr -\u003e Bool",
          "source": "src/HERMIT-Core.html#exprSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic Equality of expressions",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "exprSyntaxEq",
          "normalized": "CoreExpr-\u003eCoreExpr-\u003eBool",
          "package": "hermit",
          "partial": "Syntax Eq",
          "signature": "CoreExpr-\u003eCoreExpr-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:exprSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGHC's \u003ccode\u003e\u003ca\u003eexprType\u003c/a\u003e\u003c/code\u003e function throws an error if applied to a \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e.\n   This function catches that case as failure in an arbitrary monad.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "exprTypeM",
          "package": "hermit",
          "signature": "CoreExpr -\u003e m Type",
          "source": "src/HERMIT-Core.html#exprTypeM",
          "type": "function"
        },
        "index": {
          "description": "GHC exprType function throws an error if applied to Type This function catches that case as failure in an arbitrary monad",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "exprTypeM",
          "normalized": "CoreExpr-\u003ea Type",
          "package": "hermit",
          "partial": "Type",
          "signature": "CoreExpr-\u003em Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:exprTypeM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free identifiers in an expression.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeIdsExpr",
          "package": "hermit",
          "signature": "CoreExpr -\u003e IdSet",
          "source": "src/HERMIT-Core.html#freeIdsExpr",
          "type": "function"
        },
        "index": {
          "description": "Find all free identifiers in an expression",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeIdsExpr",
          "normalized": "CoreExpr-\u003eIdSet",
          "package": "hermit",
          "partial": "Ids Expr",
          "signature": "CoreExpr-\u003eIdSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeIdsExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in a case alternative, which excludes any variables bound in the alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeVarsAlt",
          "package": "hermit",
          "signature": "CoreAlt -\u003e VarSet",
          "source": "src/HERMIT-Core.html#freeVarsAlt",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in case alternative which excludes any variables bound in the alternative",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeVarsAlt",
          "normalized": "CoreAlt-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Alt",
          "signature": "CoreAlt-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeVarsAlt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free identifiers in a binding group, which excludes any variables bound in the group.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeVarsBind",
          "package": "hermit",
          "signature": "CoreBind -\u003e VarSet",
          "source": "src/HERMIT-Core.html#freeVarsBind",
          "type": "function"
        },
        "index": {
          "description": "Find all free identifiers in binding group which excludes any variables bound in the group",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeVarsBind",
          "normalized": "CoreBind-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Bind",
          "signature": "CoreBind-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeVarsBind"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in a coercion.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeVarsCoercion",
          "package": "hermit",
          "signature": "Coercion -\u003e VarSet",
          "source": "src/HERMIT-Core.html#freeVarsCoercion",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in coercion",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeVarsCoercion",
          "normalized": "Coercion-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Coercion",
          "signature": "Coercion-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeVarsCoercion"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in a recursive definition, which excludes the bound variable.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeVarsDef",
          "package": "hermit",
          "signature": "CoreDef -\u003e VarSet",
          "source": "src/HERMIT-Core.html#freeVarsDef",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in recursive definition which excludes the bound variable",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeVarsDef",
          "normalized": "CoreDef-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Def",
          "signature": "CoreDef-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeVarsDef"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in an expression.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeVarsExpr",
          "package": "hermit",
          "signature": "CoreExpr -\u003e VarSet",
          "source": "src/HERMIT-Core.html#freeVarsExpr",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in an expression",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeVarsExpr",
          "normalized": "CoreExpr-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Expr",
          "signature": "CoreExpr-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeVarsExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in a program.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeVarsProg",
          "package": "hermit",
          "signature": "CoreProg -\u003e VarSet",
          "source": "src/HERMIT-Core.html#freeVarsProg",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in program",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeVarsProg",
          "normalized": "CoreProg-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Prog",
          "signature": "CoreProg-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeVarsProg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in a type.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeVarsType",
          "package": "hermit",
          "signature": "Type -\u003e TyVarSet",
          "source": "src/HERMIT-Core.html#freeVarsType",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in type",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeVarsType",
          "normalized": "Type-\u003eTyVarSet",
          "package": "hermit",
          "partial": "Vars Type",
          "signature": "Type-\u003eTyVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeVarsType"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables on a binder. Equivalent to idFreeVars, but safe to call on type bindings.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "freeVarsVar",
          "package": "hermit",
          "signature": "Var -\u003e VarSet",
          "source": "src/HERMIT-Core.html#freeVarsVar",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables on binder Equivalent to idFreeVars but safe to call on type bindings",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "freeVarsVar",
          "normalized": "Var-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Var",
          "signature": "Var-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:freeVarsVar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the domain and codomain types of a function expression.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "funArgResTypes",
          "package": "hermit",
          "signature": "CoreExpr -\u003e m (Type, Type)",
          "source": "src/HERMIT-Core.html#funArgResTypes",
          "type": "function"
        },
        "index": {
          "description": "Return the domain and codomain types of function expression",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "funArgResTypes",
          "normalized": "CoreExpr-\u003ea(Type,Type)",
          "package": "hermit",
          "partial": "Arg Res Types",
          "signature": "CoreExpr-\u003em(Type,Type)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:funArgResTypes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCheck two expressions have types \u003ccode\u003ea -\u003e b\u003c/code\u003e and \u003ccode\u003eb -\u003e a\u003c/code\u003e, returning \u003ccode\u003e(a,b)\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "funsWithInverseTypes",
          "package": "hermit",
          "signature": "CoreExpr -\u003e CoreExpr -\u003e m (Type, Type)",
          "source": "src/HERMIT-Core.html#funsWithInverseTypes",
          "type": "function"
        },
        "index": {
          "description": "Check two expressions have types and returning",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "funsWithInverseTypes",
          "normalized": "CoreExpr-\u003eCoreExpr-\u003ea(Type,Type)",
          "package": "hermit",
          "partial": "With Inverse Types",
          "signature": "CoreExpr-\u003eCoreExpr-\u003em(Type,Type)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:funsWithInverseTypes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturns \u003ccode\u003eTrue\u003c/code\u003e iff the expression is a \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e expression at its top level.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "isCoArg",
          "package": "hermit",
          "signature": "CoreExpr -\u003e Bool",
          "source": "src/HERMIT-Core.html#isCoArg",
          "type": "function"
        },
        "index": {
          "description": "Returns True iff the expression is Coercion expression at its top level",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "isCoArg",
          "normalized": "CoreExpr-\u003eBool",
          "package": "hermit",
          "partial": "Co Arg",
          "signature": "CoreExpr-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:isCoArg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all locally defined free identifiers in an expression.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "localFreeIdsExpr",
          "package": "hermit",
          "signature": "CoreExpr -\u003e VarSet",
          "source": "src/HERMIT-Core.html#localFreeIdsExpr",
          "type": "function"
        },
        "index": {
          "description": "Find all locally defined free identifiers in an expression",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "localFreeIdsExpr",
          "normalized": "CoreExpr-\u003eVarSet",
          "package": "hermit",
          "partial": "Free Ids Expr",
          "signature": "CoreExpr-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:localFreeIdsExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free local variables in a case alternative, which excludes any variables bound in the alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "localFreeVarsAlt",
          "package": "hermit",
          "signature": "CoreAlt -\u003e VarSet",
          "source": "src/HERMIT-Core.html#localFreeVarsAlt",
          "type": "function"
        },
        "index": {
          "description": "Find all free local variables in case alternative which excludes any variables bound in the alternative",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "localFreeVarsAlt",
          "normalized": "CoreAlt-\u003eVarSet",
          "package": "hermit",
          "partial": "Free Vars Alt",
          "signature": "CoreAlt-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:localFreeVarsAlt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all locally defined free variables in an expression.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "localFreeVarsExpr",
          "package": "hermit",
          "signature": "CoreExpr -\u003e VarSet",
          "source": "src/HERMIT-Core.html#localFreeVarsExpr",
          "type": "function"
        },
        "index": {
          "description": "Find all locally defined free variables in an expression",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "localFreeVarsExpr",
          "normalized": "CoreExpr-\u003eVarSet",
          "package": "hermit",
          "partial": "Free Vars Expr",
          "signature": "CoreExpr-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:localFreeVarsExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMap a function over the RHS of each case alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "mapAlts",
          "package": "hermit",
          "signature": "(CoreExpr -\u003e CoreExpr) -\u003e [CoreAlt] -\u003e [CoreAlt]",
          "source": "src/HERMIT-Core.html#mapAlts",
          "type": "function"
        },
        "index": {
          "description": "Map function over the RHS of each case alternative",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "mapAlts",
          "normalized": "(CoreExpr-\u003eCoreExpr)-\u003e[CoreAlt]-\u003e[CoreAlt]",
          "package": "hermit",
          "partial": "Alts",
          "signature": "(CoreExpr-\u003eCoreExpr)-\u003e[CoreAlt]-\u003e[CoreAlt]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:mapAlts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of programs.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "progAlphaEq",
          "package": "hermit",
          "signature": "CoreProg -\u003e CoreProg -\u003e Bool",
          "source": "src/HERMIT-Core.html#progAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of programs",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "progAlphaEq",
          "normalized": "CoreProg-\u003eCoreProg-\u003eBool",
          "package": "hermit",
          "partial": "Alpha Eq",
          "signature": "CoreProg-\u003eCoreProg-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:progAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList all identifiers bound at the top-level in a program.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "progIds",
          "package": "hermit",
          "signature": "CoreProg -\u003e [Id]",
          "source": "src/HERMIT-Core.html#progIds",
          "type": "function"
        },
        "index": {
          "description": "List all identifiers bound at the top-level in program",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "progIds",
          "normalized": "CoreProg-\u003e[Id]",
          "package": "hermit",
          "partial": "Ids",
          "signature": "CoreProg-\u003e[Id]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:progIds"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic Equality of programs.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "progSyntaxEq",
          "package": "hermit",
          "signature": "CoreProg -\u003e CoreProg -\u003e Bool",
          "source": "src/HERMIT-Core.html#progSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic Equality of programs",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "progSyntaxEq",
          "normalized": "CoreProg-\u003eCoreProg-\u003eBool",
          "package": "hermit",
          "partial": "Syntax Eq",
          "signature": "CoreProg-\u003eCoreProg-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:progSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet the list of bindings in a program.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "progToBinds",
          "package": "hermit",
          "signature": "CoreProg -\u003e [CoreBind]",
          "source": "src/HERMIT-Core.html#progToBinds",
          "type": "function"
        },
        "index": {
          "description": "Get the list of bindings in program",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "progToBinds",
          "normalized": "CoreProg-\u003e[CoreBind]",
          "package": "hermit",
          "partial": "To Binds",
          "signature": "CoreProg-\u003e[CoreBind]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:progToBinds"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Core",
          "name": "showCrumbs",
          "package": "hermit",
          "signature": "[Crumb] -\u003e String",
          "source": "src/HERMIT-Core.html#showCrumbs",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "showCrumbs",
          "normalized": "[Crumb]-\u003eString",
          "package": "hermit",
          "partial": "Crumbs",
          "signature": "[Crumb]-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:showCrumbs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the domain and codomain types of a function type, if it is a function type.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "splitFunTypeM",
          "package": "hermit",
          "signature": "Type -\u003e m (Type, Type)",
          "source": "src/HERMIT-Core.html#splitFunTypeM",
          "type": "function"
        },
        "index": {
          "description": "Return the domain and codomain types of function type if it is function type",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "splitFunTypeM",
          "normalized": "Type-\u003ea(Type,Type)",
          "package": "hermit",
          "partial": "Fun Type",
          "signature": "Type-\u003em(Type,Type)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:splitFunTypeM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of types.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "typeAlphaEq",
          "package": "hermit",
          "signature": "Type -\u003e Type -\u003e Bool",
          "source": "src/HERMIT-Core.html#typeAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of types",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "typeAlphaEq",
          "normalized": "Type-\u003eType-\u003eBool",
          "package": "hermit",
          "partial": "Alpha Eq",
          "signature": "Type-\u003eType-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:typeAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic Equality of \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.Core",
          "name": "typeSyntaxEq",
          "package": "hermit",
          "signature": "Type -\u003e Type -\u003e Bool",
          "source": "src/HERMIT-Core.html#typeSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic Equality of Type",
          "hierarchy": "HERMIT Core",
          "module": "HERMIT.Core",
          "name": "typeSyntaxEq",
          "normalized": "Type-\u003eType-\u003eBool",
          "package": "hermit",
          "partial": "Syntax Eq",
          "signature": "Type-\u003eType-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Core.html#v:typeSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "AlphaConversion",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "AlphaConversion",
          "package": "hermit",
          "partial": "Alpha Conversion",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename all identifiers bound in a case alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaAltR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreAlt",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaAltR",
          "type": "function"
        },
        "index": {
          "description": "Rename all identifiers bound in case alternative",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaAltR",
          "package": "hermit",
          "partial": "Alt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaAltR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename the specified variables in a case alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaAltVarsR",
          "package": "hermit",
          "signature": "[Var] -\u003e Rewrite c HermitM CoreAlt",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaAltVarsR",
          "type": "function"
        },
        "index": {
          "description": "Rename the specified variables in case alternative",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaAltVarsR",
          "normalized": "[Var]-\u003eRewrite a HermitM CoreAlt",
          "package": "hermit",
          "partial": "Alt Vars",
          "signature": "[Var]-\u003eRewrite c HermitM CoreAlt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaAltVarsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename the variables bound in a case alternative with the given list of suggested names.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaAltWithR",
          "package": "hermit",
          "signature": "[Name] -\u003e Rewrite c HermitM CoreAlt",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaAltWithR",
          "type": "function"
        },
        "index": {
          "description": "Rename the variables bound in case alternative with the given list of suggested names",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaAltWithR",
          "normalized": "[Name]-\u003eRewrite a HermitM CoreAlt",
          "package": "hermit",
          "partial": "Alt With",
          "signature": "[Name]-\u003eRewrite c HermitM CoreAlt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaAltWithR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha rename a case binder.  Optionally takes a suggested new name.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaCaseBinderR",
          "package": "hermit",
          "signature": "Maybe Name -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaCaseBinderR",
          "type": "function"
        },
        "index": {
          "description": "Alpha rename case binder Optionally takes suggested new name",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaCaseBinderR",
          "normalized": "Maybe Name-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Case Binder",
          "signature": "Maybe Name-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaCaseBinderR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename all identifiers bound in a case expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaCaseR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaCaseR",
          "type": "function"
        },
        "index": {
          "description": "Rename all identifiers bound in case expression",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaCaseR",
          "package": "hermit",
          "partial": "Case",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaCaseR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha rename a lambda binder.  Optionally takes a suggested new name.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaLamR",
          "package": "hermit",
          "signature": "Maybe Name -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaLamR",
          "type": "function"
        },
        "index": {
          "description": "Alpha rename lambda binder Optionally takes suggested new name",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaLamR",
          "normalized": "Maybe Name-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Lam",
          "signature": "Maybe Name-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaLamR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename all identifiers bound in a Let.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaLetR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaLetR",
          "type": "function"
        },
        "index": {
          "description": "Rename all identifiers bound in Let",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaLetR",
          "package": "hermit",
          "partial": "Let",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaLetR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename the specified variables bound in a let.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaLetVarsR",
          "package": "hermit",
          "signature": "[Var] -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaLetVarsR",
          "type": "function"
        },
        "index": {
          "description": "Rename the specified variables bound in let",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaLetVarsR",
          "normalized": "[Var]-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Let Vars",
          "signature": "[Var]-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaLetVarsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename the identifiers bound in a Let with the given list of suggested names.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaLetWithR",
          "package": "hermit",
          "signature": "[Name] -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaLetWithR",
          "type": "function"
        },
        "index": {
          "description": "Rename the identifiers bound in Let with the given list of suggested names",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaLetWithR",
          "normalized": "[Name]-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Let With",
          "signature": "[Name]-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaLetWithR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename the identifiers bound in the top-level binding at the head of the program with the given list of suggested names.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaProgConsWithR",
          "package": "hermit",
          "signature": "[Name] -\u003e Rewrite c HermitM CoreProg",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaProgConsWithR",
          "type": "function"
        },
        "index": {
          "description": "Rename the identifiers bound in the top-level binding at the head of the program with the given list of suggested names",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaProgConsWithR",
          "normalized": "[Name]-\u003eRewrite a HermitM CoreProg",
          "package": "hermit",
          "partial": "Prog Cons With",
          "signature": "[Name]-\u003eRewrite c HermitM CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaProgConsWithR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha rename any bindings at this node.  Note: does not rename case alternatives unless invoked on the alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaR",
          "package": "hermit",
          "signature": "Rewrite c HermitM Core",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#alphaR",
          "type": "function"
        },
        "index": {
          "description": "Alpha rename any bindings at this node Note does not rename case alternatives unless invoked on the alternative",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "alphaR",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:alphaR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals for alpha-renaming.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals for alpha-renaming",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUse the optional argument if given, otherwise generate a new name avoiding clashes with the list of variables.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "freshNameGenAvoiding",
          "package": "hermit",
          "signature": "Maybe Name -\u003e VarSet -\u003e String -\u003e String",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#freshNameGenAvoiding",
          "type": "function"
        },
        "index": {
          "description": "Use the optional argument if given otherwise generate new name avoiding clashes with the list of variables",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "freshNameGenAvoiding",
          "normalized": "Maybe Name-\u003eVarSet-\u003eString-\u003eString",
          "package": "hermit",
          "partial": "Name Gen Avoiding",
          "signature": "Maybe Name-\u003eVarSet-\u003eString-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:freshNameGenAvoiding"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf a name is provided replace the string with that,\n   otherwise modify the string making sure to \u003cem\u003enot\u003c/em\u003e clash with any visible variables.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "freshNameGenT",
          "package": "hermit",
          "signature": "Maybe Name -\u003e Translate c m CoreExpr (String -\u003e String)",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#freshNameGenT",
          "type": "function"
        },
        "index": {
          "description": "If name is provided replace the string with that otherwise modify the string making sure to not clash with any visible variables",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "freshNameGenT",
          "normalized": "Maybe Name-\u003eTranslate a b CoreExpr(String-\u003eString)",
          "package": "hermit",
          "partial": "Name Gen",
          "signature": "Maybe Name-\u003eTranslate c m CoreExpr(String-\u003eString)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:freshNameGenT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReplace all occurrences of a specified variable.\n   Arguments are the variable to replace and the replacement variable, respectively.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "replaceVarR",
          "package": "hermit",
          "signature": "Var -\u003e Var -\u003e Rewrite c m a",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#replaceVarR",
          "type": "function"
        },
        "index": {
          "description": "Replace all occurrences of specified variable Arguments are the variable to replace and the replacement variable respectively",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "replaceVarR",
          "normalized": "Var-\u003eVar-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Var",
          "signature": "Var-\u003eVar-\u003eRewrite c m a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:replaceVarR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRename local variables with manifestly unique names (x, x0, x1, ...).\n   Does not rename top-level definitions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "unshadowR",
          "package": "hermit",
          "signature": "Rewrite c HermitM Core",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#unshadowR",
          "type": "function"
        },
        "index": {
          "description": "Rename local variables with manifestly unique names x0 x1 Does not rename top-level definitions",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "unshadowR",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:unshadowR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList all visible identifiers (in the expression or the context).\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "visibleVarsT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr VarSet",
          "source": "src/HERMIT-Dictionary-AlphaConversion.html#visibleVarsT",
          "type": "function"
        },
        "index": {
          "description": "List all visible identifiers in the expression or the context",
          "hierarchy": "HERMIT Dictionary AlphaConversion",
          "module": "HERMIT.Dictionary.AlphaConversion",
          "name": "visibleVarsT",
          "package": "hermit",
          "partial": "Vars",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-AlphaConversion.html#v:visibleVarsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eNote: this module should NOT export externals. It is for common\n   transformations needed by the other primitive modules.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "Common",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Common.html",
          "type": "module"
        },
        "index": {
          "description": "Note this module should NOT export externals It is for common transformations needed by the other primitive modules",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "Common",
          "package": "hermit",
          "partial": "Common",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a transformation to a value in the current context.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "applyInContextT",
          "package": "hermit",
          "signature": "Translate c m a b -\u003e a -\u003e Translate c m x b",
          "source": "src/HERMIT-Dictionary-Common.html#applyInContextT",
          "type": "function"
        },
        "index": {
          "description": "Apply transformation to value in the current context",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "applyInContextT",
          "normalized": "Translate a b c d-\u003ec-\u003eTranslate a b e d",
          "package": "hermit",
          "partial": "In Context",
          "signature": "Translate c m a b-\u003ea-\u003eTranslate c m x b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:applyInContextT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLifted version of \u003ccode\u003e\u003ca\u003eboundVars\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "boundVarsT",
          "package": "hermit",
          "signature": "Translate c m a VarSet",
          "source": "src/HERMIT-Dictionary-Common.html#boundVarsT",
          "type": "function"
        },
        "index": {
          "description": "Lifted version of boundVars",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "boundVarsT",
          "package": "hermit",
          "partial": "Vars",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:boundVarsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceeds if we are looking at an application of a named data constructor.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "callDataConNameT",
          "package": "hermit",
          "signature": "Name -\u003e Translate c m CoreExpr (DataCon, [Type], [CoreExpr])",
          "source": "src/HERMIT-Dictionary-Common.html#callDataConNameT",
          "type": "function"
        },
        "index": {
          "description": "Succeeds if we are looking at an application of named data constructor",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callDataConNameT",
          "normalized": "Name-\u003eTranslate a b CoreExpr(DataCon,[Type],[CoreExpr])",
          "package": "hermit",
          "partial": "Data Con Name",
          "signature": "Name-\u003eTranslate c m CoreExpr(DataCon,[Type],[CoreExpr])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callDataConNameT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceeds if we are looking at an application of a data constructor.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "callDataConT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr (DataCon, [Type], [CoreExpr])",
          "source": "src/HERMIT-Dictionary-Common.html#callDataConT",
          "type": "function"
        },
        "index": {
          "description": "Succeeds if we are looking at an application of data constructor",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callDataConT",
          "normalized": "Translate a b CoreExpr(DataCon,[Type],[CoreExpr])",
          "package": "hermit",
          "partial": "Data Con",
          "signature": "Translate c m CoreExpr(DataCon,[Type],[CoreExpr])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callDataConT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceeds if we are looking at an application of given function\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "callNameG",
          "package": "hermit",
          "signature": "Name -\u003e Translate c m CoreExpr ()",
          "source": "src/HERMIT-Dictionary-Common.html#callNameG",
          "type": "function"
        },
        "index": {
          "description": "Succeeds if we are looking at an application of given function",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callNameG",
          "normalized": "Name-\u003eTranslate a b CoreExpr()",
          "package": "hermit",
          "partial": "Name",
          "signature": "Name-\u003eTranslate c m CoreExpr()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callNameG"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceeds if we are looking at an application of given function\n   returning zero or more arguments to which it is applied.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "callNameT",
          "package": "hermit",
          "signature": "Name -\u003e Translate c m CoreExpr (CoreExpr, [CoreExpr])",
          "source": "src/HERMIT-Dictionary-Common.html#callNameT",
          "type": "function"
        },
        "index": {
          "description": "Succeeds if we are looking at an application of given function returning zero or more arguments to which it is applied",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callNameT",
          "normalized": "Name-\u003eTranslate a b CoreExpr(CoreExpr,[CoreExpr])",
          "package": "hermit",
          "partial": "Name",
          "signature": "Name-\u003eTranslate c m CoreExpr(CoreExpr,[CoreExpr])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callNameT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Common",
          "name": "callPredT",
          "package": "hermit",
          "signature": "(Id -\u003e [CoreExpr] -\u003e Bool) -\u003e Translate c m CoreExpr (CoreExpr, [CoreExpr])",
          "source": "src/HERMIT-Dictionary-Common.html#callPredT",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callPredT",
          "normalized": "(Id-\u003e[CoreExpr]-\u003eBool)-\u003eTranslate a b CoreExpr(CoreExpr,[CoreExpr])",
          "package": "hermit",
          "partial": "Pred",
          "signature": "(Id-\u003e[CoreExpr]-\u003eBool)-\u003eTranslate c m CoreExpr(CoreExpr,[CoreExpr])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callPredT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceeds if we are looking at a fully saturated function call.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "callSaturatedT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr (CoreExpr, [CoreExpr])",
          "source": "src/HERMIT-Dictionary-Common.html#callSaturatedT",
          "type": "function"
        },
        "index": {
          "description": "Succeeds if we are looking at fully saturated function call",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callSaturatedT",
          "normalized": "Translate a b CoreExpr(CoreExpr,[CoreExpr])",
          "package": "hermit",
          "partial": "Saturated",
          "signature": "Translate c m CoreExpr(CoreExpr,[CoreExpr])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callSaturatedT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLift GHC's collectArgs\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "callT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr (CoreExpr, [CoreExpr])",
          "source": "src/HERMIT-Dictionary-Common.html#callT",
          "type": "function"
        },
        "index": {
          "description": "Lift GHC collectArgs",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callT",
          "normalized": "Translate a b CoreExpr(CoreExpr,[CoreExpr])",
          "package": "hermit",
          "signature": "Translate c m CoreExpr(CoreExpr,[CoreExpr])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a rewrite to all applications of a given function in a top-down manner, pruning on success.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "callsR",
          "package": "hermit",
          "signature": "Name -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m Core",
          "source": "src/HERMIT-Dictionary-Common.html#callsR",
          "type": "function"
        },
        "index": {
          "description": "Apply rewrite to all applications of given function in top-down manner pruning on success",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callsR",
          "normalized": "Name-\u003eRewrite a b CoreExpr-\u003eRewrite a b Core",
          "package": "hermit",
          "signature": "Name-\u003eRewrite c m CoreExpr-\u003eRewrite c m Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a translate to all applications of a given function in a top-down manner,\n   pruning on success, collecting the results.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "callsT",
          "package": "hermit",
          "signature": "Name -\u003e Translate c m CoreExpr b -\u003e Translate c m Core [b]",
          "source": "src/HERMIT-Dictionary-Common.html#callsT",
          "type": "function"
        },
        "index": {
          "description": "Apply translate to all applications of given function in top-down manner pruning on success collecting the results",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "callsT",
          "normalized": "Name-\u003eTranslate a b CoreExpr c-\u003eTranslate a b Core[c]",
          "package": "hermit",
          "signature": "Name-\u003eTranslate c m CoreExpr b-\u003eTranslate c m Core[b]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:callsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList the variables bound by all alternatives in a case expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "caseAltVarsT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr [[Var]]",
          "source": "src/HERMIT-Dictionary-Common.html#caseAltVarsT",
          "type": "function"
        },
        "index": {
          "description": "List the variables bound by all alternatives in case expression",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "caseAltVarsT",
          "normalized": "Translate a b CoreExpr[[Var]]",
          "package": "hermit",
          "partial": "Alt Vars",
          "signature": "Translate c m CoreExpr[[Var]]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:caseAltVarsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList all variables bound by a case expression (in the alternatives and the wildcard binder).\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "caseVarsT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr [Var]",
          "source": "src/HERMIT-Dictionary-Common.html#caseVarsT",
          "type": "function"
        },
        "index": {
          "description": "List all variables bound by case expression in the alternatives and the wildcard binder",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "caseVarsT",
          "normalized": "Translate a b CoreExpr[Var]",
          "package": "hermit",
          "partial": "Vars",
          "signature": "Translate c m CoreExpr[Var]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:caseVarsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the case wildcard binder.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "caseWildIdT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr Id",
          "source": "src/HERMIT-Dictionary-Common.html#caseWildIdT",
          "type": "function"
        },
        "index": {
          "description": "Return the case wildcard binder",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "caseWildIdT",
          "package": "hermit",
          "partial": "Wild Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:caseWildIdT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDetermine if the current expression is an occurrence of the given variable, bound at the specified depth (helpful to detect shadowing).\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "exprIsOccurrenceOfT",
          "package": "hermit",
          "signature": "Var -\u003e BindingDepth -\u003e Translate c m CoreExpr Bool",
          "source": "src/HERMIT-Dictionary-Common.html#exprIsOccurrenceOfT",
          "type": "function"
        },
        "index": {
          "description": "Determine if the current expression is an occurrence of the given variable bound at the specified depth helpful to detect shadowing",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "exprIsOccurrenceOfT",
          "normalized": "Var-\u003eBindingDepth-\u003eTranslate a b CoreExpr Bool",
          "package": "hermit",
          "partial": "Is Occurrence Of",
          "signature": "Var-\u003eBindingDepth-\u003eTranslate c m CoreExpr Bool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:exprIsOccurrenceOfT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind the unique variable bound in the context that matches the given name, failing if it is not unique.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "findBoundVarT",
          "package": "hermit",
          "signature": "Name -\u003e Translate c m a Var",
          "source": "src/HERMIT-Dictionary-Common.html#findBoundVarT",
          "type": "function"
        },
        "index": {
          "description": "Find the unique variable bound in the context that matches the given name failing if it is not unique",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "findBoundVarT",
          "normalized": "Name-\u003eTranslate a b c Var",
          "package": "hermit",
          "partial": "Bound Var",
          "signature": "Name-\u003eTranslate c m a Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:findBoundVarT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Common",
          "name": "findId",
          "package": "hermit",
          "signature": "Name -\u003e c -\u003e m Id",
          "source": "src/HERMIT-Dictionary-Common.html#findId",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "findId",
          "normalized": "Name-\u003ea-\u003eb Id",
          "package": "hermit",
          "partial": "Id",
          "signature": "Name-\u003ec-\u003em Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:findId"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLookup the name in the context first, then, failing that, in GHC's global reader environment.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "findIdT",
          "package": "hermit",
          "signature": "Name -\u003e Translate c m a Id",
          "source": "src/HERMIT-Dictionary-Common.html#findIdT",
          "type": "function"
        },
        "index": {
          "description": "Lookup the name in the context first then failing that in GHC global reader environment",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "findIdT",
          "normalized": "Name-\u003eTranslate a b c Id",
          "package": "hermit",
          "partial": "Id",
          "signature": "Name-\u003eTranslate c m a Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:findIdT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the variable bound by a lambda expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "lamVarT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr Var",
          "source": "src/HERMIT-Dictionary-Common.html#lamVarT",
          "type": "function"
        },
        "index": {
          "description": "Return the variable bound by lambda expression",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "lamVarT",
          "package": "hermit",
          "partial": "Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:lamVarT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the variable bound by a non-recursive let expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "letNonRecVarT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr Var",
          "source": "src/HERMIT-Dictionary-Common.html#letNonRecVarT",
          "type": "function"
        },
        "index": {
          "description": "Return the variable bound by non-recursive let expression",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "letNonRecVarT",
          "package": "hermit",
          "partial": "Non Rec Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:letNonRecVarT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList the identifiers bound by a recursive let expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "letRecIdsT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr [Id]",
          "source": "src/HERMIT-Dictionary-Common.html#letRecIdsT",
          "type": "function"
        },
        "index": {
          "description": "List the identifiers bound by recursive let expression",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "letRecIdsT",
          "normalized": "Translate a b CoreExpr[Id]",
          "package": "hermit",
          "partial": "Rec Ids",
          "signature": "Translate c m CoreExpr[Id]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:letRecIdsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList the variables bound by a let expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "letVarsT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr [Var]",
          "source": "src/HERMIT-Dictionary-Common.html#letVarsT",
          "type": "function"
        },
        "index": {
          "description": "List the variables bound by let expression",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "letVarsT",
          "normalized": "Translate a b CoreExpr[Var]",
          "package": "hermit",
          "partial": "Vars",
          "signature": "Translate c m CoreExpr[Var]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:letVarsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the variable bound by a non-recursive let expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "nonRecVarT",
          "package": "hermit",
          "signature": "Translate c m CoreBind Var",
          "source": "src/HERMIT-Dictionary-Common.html#nonRecVarT",
          "type": "function"
        },
        "index": {
          "description": "Return the variable bound by non-recursive let expression",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "nonRecVarT",
          "package": "hermit",
          "partial": "Rec Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:nonRecVarT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList the identifiers bound by the top-level binding group at the head of the program.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "progConsIdsT",
          "package": "hermit",
          "signature": "Translate c m CoreProg [Id]",
          "source": "src/HERMIT-Dictionary-Common.html#progConsIdsT",
          "type": "function"
        },
        "index": {
          "description": "List the identifiers bound by the top-level binding group at the head of the program",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "progConsIdsT",
          "normalized": "Translate a b CoreProg[Id]",
          "package": "hermit",
          "partial": "Cons Ids",
          "signature": "Translate c m CoreProg[Id]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:progConsIdsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the identifier bound by a non-recursive top-level binding at the head of the program.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "progConsNonRecIdT",
          "package": "hermit",
          "signature": "Translate c m CoreProg Id",
          "source": "src/HERMIT-Dictionary-Common.html#progConsNonRecIdT",
          "type": "function"
        },
        "index": {
          "description": "Return the identifier bound by non-recursive top-level binding at the head of the program",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "progConsNonRecIdT",
          "package": "hermit",
          "partial": "Cons Non Rec Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:progConsNonRecIdT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList the identifiers bound by a recursive top-level binding group at the head of the program.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "progConsRecIdsT",
          "package": "hermit",
          "signature": "Translate c m CoreProg [Id]",
          "source": "src/HERMIT-Dictionary-Common.html#progConsRecIdsT",
          "type": "function"
        },
        "index": {
          "description": "List the identifiers bound by recursive top-level binding group at the head of the program",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "progConsRecIdsT",
          "normalized": "Translate a b CoreProg[Id]",
          "package": "hermit",
          "partial": "Cons Rec Ids",
          "signature": "Translate c m CoreProg[Id]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:progConsRecIdsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList all identifiers bound in a recursive binding group.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "recIdsT",
          "package": "hermit",
          "signature": "Translate c m CoreBind [Id]",
          "source": "src/HERMIT-Dictionary-Common.html#recIdsT",
          "type": "function"
        },
        "index": {
          "description": "List all identifiers bound in recursive binding group",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "recIdsT",
          "normalized": "Translate a b CoreBind[Id]",
          "package": "hermit",
          "partial": "Ids",
          "signature": "Translate c m CoreBind[Id]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:recIdsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind the depth of a variable's binding.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "varBindingDepthT",
          "package": "hermit",
          "signature": "Var -\u003e Translate c m g BindingDepth",
          "source": "src/HERMIT-Dictionary-Common.html#varBindingDepthT",
          "type": "function"
        },
        "index": {
          "description": "Find the depth of variable binding",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "varBindingDepthT",
          "normalized": "Var-\u003eTranslate a b c BindingDepth",
          "package": "hermit",
          "partial": "Binding Depth",
          "signature": "Var-\u003eTranslate c m g BindingDepth",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:varBindingDepthT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDetermine if the current variable matches the given variable, and is bound at the specified depth (helpful to detect shadowing).\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "varIsOccurrenceOfT",
          "package": "hermit",
          "signature": "Var -\u003e BindingDepth -\u003e Translate c m Var Bool",
          "source": "src/HERMIT-Dictionary-Common.html#varIsOccurrenceOfT",
          "type": "function"
        },
        "index": {
          "description": "Determine if the current variable matches the given variable and is bound at the specified depth helpful to detect shadowing",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "varIsOccurrenceOfT",
          "normalized": "Var-\u003eBindingDepth-\u003eTranslate a b Var Bool",
          "package": "hermit",
          "partial": "Is Occurrence Of",
          "signature": "Var-\u003eBindingDepth-\u003eTranslate c m Var Bool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:varIsOccurrenceOfT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConstructs a common error message.\n   Argument \u003ccode\u003e\u003ca\u003eString\u003c/a\u003e\u003c/code\u003e should be the desired form of the expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Common",
          "name": "wrongExprForm",
          "package": "hermit",
          "signature": "String -\u003e String",
          "source": "src/HERMIT-Dictionary-Common.html#wrongExprForm",
          "type": "function"
        },
        "index": {
          "description": "Constructs common error message Argument String should be the desired form of the expression",
          "hierarchy": "HERMIT Dictionary Common",
          "module": "HERMIT.Dictionary.Common",
          "name": "wrongExprForm",
          "normalized": "String-\u003eString",
          "package": "hermit",
          "partial": "Expr Form",
          "signature": "String-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Common.html#v:wrongExprForm"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Composite",
          "name": "Composite",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Composite.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Composite",
          "module": "HERMIT.Dictionary.Composite",
          "name": "Composite",
          "package": "hermit",
          "partial": "Composite",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Composite.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Composite",
          "name": "bashDebugR",
          "package": "hermit",
          "signature": "RewriteH Core",
          "source": "src/HERMIT-Dictionary-Composite.html#bashDebugR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Composite",
          "module": "HERMIT.Dictionary.Composite",
          "name": "bashDebugR",
          "package": "hermit",
          "partial": "Debug",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Composite.html#v:bashDebugR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Composite",
          "name": "bashExtendedWithR",
          "package": "hermit",
          "signature": "[Rewrite c HermitM Core] -\u003e Rewrite c HermitM Core",
          "source": "src/HERMIT-Dictionary-Composite.html#bashExtendedWithR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Composite",
          "module": "HERMIT.Dictionary.Composite",
          "name": "bashExtendedWithR",
          "normalized": "[Rewrite a HermitM Core]-\u003eRewrite a HermitM Core",
          "package": "hermit",
          "partial": "Extended With",
          "signature": "[Rewrite c HermitM Core]-\u003eRewrite c HermitM Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Composite.html#v:bashExtendedWithR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Composite",
          "name": "bashR",
          "package": "hermit",
          "signature": "Rewrite c HermitM Core",
          "source": "src/HERMIT-Dictionary-Composite.html#bashR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Composite",
          "module": "HERMIT.Dictionary.Composite",
          "name": "bashR",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Composite.html#v:bashR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Composite",
          "name": "bashUsingR",
          "package": "hermit",
          "signature": "[Rewrite c m Core] -\u003e Rewrite c m Core",
          "source": "src/HERMIT-Dictionary-Composite.html#bashUsingR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Composite",
          "module": "HERMIT.Dictionary.Composite",
          "name": "bashUsingR",
          "normalized": "[Rewrite a b Core]-\u003eRewrite a b Core",
          "package": "hermit",
          "partial": "Using",
          "signature": "[Rewrite c m Core]-\u003eRewrite c m Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Composite.html#v:bashUsingR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Composite",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Composite.html#externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Composite",
          "module": "HERMIT.Dictionary.Composite",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Composite.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Composite",
          "name": "simplifyR",
          "package": "hermit",
          "signature": "Rewrite c HermitM Core",
          "source": "src/HERMIT-Dictionary-Composite.html#simplifyR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Composite",
          "module": "HERMIT.Dictionary.Composite",
          "name": "simplifyR",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Composite.html#v:simplifyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUnfold the current expression if it is one of the basic combinators: (\u003ccode\u003e\u003ca\u003e$\u003c/a\u003e\u003c/code\u003e), (\u003ccode\u003e\u003ca\u003e.\u003c/a\u003e\u003c/code\u003e), \u003ccode\u003e\u003ca\u003eid\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eflip\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003econst\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003efst\u003c/a\u003e\u003c/code\u003e or \u003ccode\u003e\u003ca\u003esnd\u003c/a\u003e\u003c/code\u003e.\n   This is intended to be used as a component of simplification traversals such as \u003ccode\u003e\u003ca\u003esimplifyR\u003c/a\u003e\u003c/code\u003e or \u003ccode\u003e\u003ca\u003ebashR\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Composite",
          "name": "unfoldBasicCombinatorR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Composite.html#unfoldBasicCombinatorR",
          "type": "function"
        },
        "index": {
          "description": "Unfold the current expression if it is one of the basic combinators id flip const fst or snd This is intended to be used as component of simplification traversals such as simplifyR or bashR",
          "hierarchy": "HERMIT Dictionary Composite",
          "module": "HERMIT.Dictionary.Composite",
          "name": "unfoldBasicCombinatorR",
          "package": "hermit",
          "partial": "Basic Combinator",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Composite.html#v:unfoldBasicCombinatorR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Debug",
          "name": "Debug",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Debug.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Debug",
          "module": "HERMIT.Dictionary.Debug",
          "name": "Debug",
          "package": "hermit",
          "partial": "Debug",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Debug.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShow before and after a rewrite.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Debug",
          "name": "bracketR",
          "package": "hermit",
          "signature": "String -\u003e RewriteH a -\u003e RewriteH a",
          "source": "src/HERMIT-Dictionary-Debug.html#bracketR",
          "type": "function"
        },
        "index": {
          "description": "Show before and after rewrite",
          "hierarchy": "HERMIT Dictionary Debug",
          "module": "HERMIT.Dictionary.Debug",
          "name": "bracketR",
          "normalized": "String-\u003eRewriteH a-\u003eRewriteH a",
          "package": "hermit",
          "signature": "String-\u003eRewriteH a-\u003eRewriteH a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Debug.html#v:bracketR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExposed debugging \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Debug",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Debug.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Exposed debugging External",
          "hierarchy": "HERMIT Dictionary Debug",
          "module": "HERMIT.Dictionary.Debug",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Debug.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf the \u003ccode\u003e\u003ca\u003eRewrite\u003c/a\u003e\u003c/code\u003e fails, print out the \u003ccode\u003e\u003ca\u003eCore\u003c/a\u003e\u003c/code\u003e, with a message.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Debug",
          "name": "observeFailureR",
          "package": "hermit",
          "signature": "String -\u003e RewriteH a -\u003e RewriteH a",
          "source": "src/HERMIT-Dictionary-Debug.html#observeFailureR",
          "type": "function"
        },
        "index": {
          "description": "If the Rewrite fails print out the Core with message",
          "hierarchy": "HERMIT Dictionary Debug",
          "module": "HERMIT.Dictionary.Debug",
          "name": "observeFailureR",
          "normalized": "String-\u003eRewriteH a-\u003eRewriteH a",
          "package": "hermit",
          "partial": "Failure",
          "signature": "String-\u003eRewriteH a-\u003eRewriteH a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Debug.html#v:observeFailureR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePrint out the \u003ccode\u003e\u003ca\u003eCore\u003c/a\u003e\u003c/code\u003e, with a message.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Debug",
          "name": "observeR",
          "package": "hermit",
          "signature": "String -\u003e RewriteH a",
          "source": "src/HERMIT-Dictionary-Debug.html#observeR",
          "type": "function"
        },
        "index": {
          "description": "Print out the Core with message",
          "hierarchy": "HERMIT Dictionary Debug",
          "module": "HERMIT.Dictionary.Debug",
          "name": "observeR",
          "normalized": "String-\u003eRewriteH a",
          "package": "hermit",
          "signature": "String-\u003eRewriteH a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Debug.html#v:observeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eJust say something, every time the rewrite is done.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Debug",
          "name": "traceR",
          "package": "hermit",
          "signature": "String -\u003e RewriteH a",
          "source": "src/HERMIT-Dictionary-Debug.html#traceR",
          "type": "function"
        },
        "index": {
          "description": "Just say something every time the rewrite is done",
          "hierarchy": "HERMIT Dictionary Debug",
          "module": "HERMIT.Dictionary.Debug",
          "name": "traceR",
          "normalized": "String-\u003eRewriteH a",
          "package": "hermit",
          "signature": "String-\u003eRewriteH a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Debug.html#v:traceR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "FixPoint",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-FixPoint.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary FixPoint",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "FixPoint",
          "package": "hermit",
          "partial": "Fix Point",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-FixPoint.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals for manipulating fixed points.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-FixPoint.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals for manipulating fixed points",
          "hierarchy": "HERMIT Dictionary FixPoint",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-FixPoint.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003efix ty f\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ef (fix ty f)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "fixComputationRuleBR",
          "package": "hermit",
          "signature": "BiRewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-FixPoint.html#fixComputationRuleBR",
          "type": "function"
        },
        "index": {
          "description": "fix ty fix ty",
          "hierarchy": "HERMIT Dictionary FixPoint",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "fixComputationRuleBR",
          "package": "hermit",
          "partial": "Computation Rule BR",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-FixPoint.html#v:fixComputationRuleBR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf \u003ccode\u003ef\u003c/code\u003e is strict, then (\u003ccode\u003ef (g a)\u003c/code\u003e == \u003ccode\u003eh (f a)\u003c/code\u003e)  ==\u003e  (\u003ccode\u003ef (fix g)\u003c/code\u003e == \u003ccode\u003efix h\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "fixFusionRuleBR",
          "package": "hermit",
          "signature": "Maybe (RewriteH CoreExpr, RewriteH CoreExpr) -\u003e Maybe (RewriteH CoreExpr) -\u003e CoreExpr -\u003e CoreExpr -\u003e CoreExpr -\u003e BiRewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-FixPoint.html#fixFusionRuleBR",
          "type": "function"
        },
        "index": {
          "description": "If is strict then fix fix",
          "hierarchy": "HERMIT Dictionary FixPoint",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "fixFusionRuleBR",
          "normalized": "Maybe(RewriteH CoreExpr,RewriteH CoreExpr)-\u003eMaybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Fusion Rule BR",
          "signature": "Maybe(RewriteH CoreExpr,RewriteH CoreExpr)-\u003eMaybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-FixPoint.html#v:fixFusionRuleBR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ef = e\u003c/code\u003e   ==\u003e   \u003ccode\u003ef = fix (\\ f -\u003e e)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "fixIntroR",
          "package": "hermit",
          "signature": "RewriteH CoreDef",
          "source": "src/HERMIT-Dictionary-FixPoint.html#fixIntroR",
          "type": "function"
        },
        "index": {
          "description": "fix",
          "hierarchy": "HERMIT Dictionary FixPoint",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "fixIntroR",
          "package": "hermit",
          "partial": "Intro",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-FixPoint.html#v:fixIntroR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003efix tyA (\\ a -\u003e f (g a))\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ef (fix tyB (\\ b -\u003e g (f b))\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "fixRollingRuleBR",
          "package": "hermit",
          "signature": "BiRewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-FixPoint.html#fixRollingRuleBR",
          "type": "function"
        },
        "index": {
          "description": "fix tyA fix tyB",
          "hierarchy": "HERMIT Dictionary FixPoint",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "fixRollingRuleBR",
          "package": "hermit",
          "partial": "Rolling Rule BR",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-FixPoint.html#v:fixRollingRuleBR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCheck that the expression has the form \u003ca\u003efix t (f :: t -\u003e t)\u003c/a\u003e, returning \u003ca\u003et\u003c/a\u003e and \u003ca\u003ef\u003c/a\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "isFixExprT",
          "package": "hermit",
          "signature": "TranslateH CoreExpr (Type, CoreExpr)",
          "source": "src/HERMIT-Dictionary-FixPoint.html#isFixExprT",
          "type": "function"
        },
        "index": {
          "description": "Check that the expression has the form fix returning and",
          "hierarchy": "HERMIT Dictionary FixPoint",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "isFixExprT",
          "normalized": "TranslateH CoreExpr(Type,CoreExpr)",
          "package": "hermit",
          "partial": "Fix Expr",
          "signature": "TranslateH CoreExpr(Type,CoreExpr)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-FixPoint.html#v:isFixExprT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ef  ==\u003e  fix f\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "mkFixT",
          "package": "hermit",
          "signature": "CoreExpr -\u003e Translate c m z CoreExpr",
          "source": "src/HERMIT-Dictionary-FixPoint.html#mkFixT",
          "type": "function"
        },
        "index": {
          "description": "fix",
          "hierarchy": "HERMIT Dictionary FixPoint",
          "module": "HERMIT.Dictionary.FixPoint",
          "name": "mkFixT",
          "normalized": "CoreExpr-\u003eTranslate a b c CoreExpr",
          "package": "hermit",
          "partial": "Fix",
          "signature": "CoreExpr-\u003eTranslate c m z CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-FixPoint.html#v:mkFixT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Fold",
          "name": "Fold",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Fold.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Fold",
          "module": "HERMIT.Dictionary.Fold",
          "name": "Fold",
          "package": "hermit",
          "partial": "Fold",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Fold.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Fold",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Fold.html#externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Fold",
          "module": "HERMIT.Dictionary.Fold",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Fold.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Fold",
          "name": "foldR",
          "package": "hermit",
          "signature": "Name -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Fold.html#foldR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Fold",
          "module": "HERMIT.Dictionary.Fold",
          "name": "foldR",
          "normalized": "Name-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "signature": "Name-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Fold.html#v:foldR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Fold",
          "name": "foldVarR",
          "package": "hermit",
          "signature": "Var -\u003e Maybe BindingDepth -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Fold.html#foldVarR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Fold",
          "module": "HERMIT.Dictionary.Fold",
          "name": "foldVarR",
          "normalized": "Var-\u003eMaybe BindingDepth-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Var",
          "signature": "Var-\u003eMaybe BindingDepth-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Fold.html#v:foldVarR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Fold",
          "name": "stashFoldAnyR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Fold.html#stashFoldAnyR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Fold",
          "module": "HERMIT.Dictionary.Fold",
          "name": "stashFoldAnyR",
          "package": "hermit",
          "partial": "Fold Any",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Fold.html#v:stashFoldAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Fold",
          "name": "stashFoldR",
          "package": "hermit",
          "signature": "Label -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Fold.html#stashFoldR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Fold",
          "module": "HERMIT.Dictionary.Fold",
          "name": "stashFoldR",
          "normalized": "Label-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Fold",
          "signature": "Label-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Fold.html#v:stashFoldR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Function",
          "name": "Function",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Function.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Function",
          "module": "HERMIT.Dictionary.Function",
          "name": "Function",
          "package": "hermit",
          "partial": "Function",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Function.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Function",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Function.html#externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Function",
          "module": "HERMIT.Dictionary.Function",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Function.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eStatic Argument Transformations which requires that arguments in the given position are static.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Function",
          "name": "staticArgPosR",
          "package": "hermit",
          "signature": "[Int] -\u003e Rewrite c HermitM CoreDef",
          "source": "src/HERMIT-Dictionary-Function.html#staticArgPosR",
          "type": "function"
        },
        "index": {
          "description": "Static Argument Transformations which requires that arguments in the given position are static",
          "hierarchy": "HERMIT Dictionary Function",
          "module": "HERMIT.Dictionary.Function",
          "name": "staticArgPosR",
          "normalized": "[Int]-\u003eRewrite a HermitM CoreDef",
          "package": "hermit",
          "partial": "Arg Pos",
          "signature": "[Int]-\u003eRewrite c HermitM CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Function.html#v:staticArgPosR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGeneralized Static Argument Transformation, which allows static arguments to be filtered.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Function",
          "name": "staticArgPredR",
          "package": "hermit",
          "signature": "([(Int, Var)] -\u003e HermitM [Int])-\u003e Rewrite c HermitM CoreDef",
          "type": "function"
        },
        "index": {
          "description": "Generalized Static Argument Transformation which allows static arguments to be filtered",
          "hierarchy": "HERMIT Dictionary Function",
          "module": "HERMIT.Dictionary.Function",
          "name": "staticArgPredR",
          "normalized": "([(Int,Var)]-\u003eHermitM[Int])-\u003eRewrite a HermitM CoreDef",
          "package": "hermit",
          "partial": "Arg Pred",
          "signature": "([(Int,Var)]-\u003eHermitM[Int])-\u003eRewrite c HermitM CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Function.html#v:staticArgPredR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTraditional Static Argument Transformation\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Function",
          "name": "staticArgR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreDef",
          "source": "src/HERMIT-Dictionary-Function.html#staticArgR",
          "type": "function"
        },
        "index": {
          "description": "Traditional Static Argument Transformation",
          "hierarchy": "HERMIT Dictionary Function",
          "module": "HERMIT.Dictionary.Function",
          "name": "staticArgR",
          "package": "hermit",
          "partial": "Arg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Function.html#v:staticArgR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eStatic Argument Transformation that only considers type arguments to be static.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Function",
          "name": "staticArgTypesR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreDef",
          "source": "src/HERMIT-Dictionary-Function.html#staticArgTypesR",
          "type": "function"
        },
        "index": {
          "description": "Static Argument Transformation that only considers type arguments to be static",
          "hierarchy": "HERMIT Dictionary Function",
          "module": "HERMIT.Dictionary.Function",
          "name": "staticArgTypesR",
          "package": "hermit",
          "partial": "Arg Types",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Function.html#v:staticArgTypesR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.GHC",
          "name": "GHC",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-GHC.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "GHC",
          "package": "hermit",
          "partial": "GHC",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTop-down traversal tuned to matching function calls.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "anyCallR",
          "package": "hermit",
          "signature": "Rewrite c m Core -\u003e Rewrite c m Core",
          "source": "src/HERMIT-Dictionary-GHC.html#anyCallR",
          "type": "function"
        },
        "index": {
          "description": "Top-down traversal tuned to matching function calls",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "anyCallR",
          "normalized": "Rewrite a b Core-\u003eRewrite a b Core",
          "package": "hermit",
          "partial": "Call",
          "signature": "Rewrite c m Core-\u003eRewrite c m Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:anyCallR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTry to figure out the arity of an identifier.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "arityOf",
          "package": "hermit",
          "signature": "c -\u003e Id -\u003e Int",
          "source": "src/HERMIT-Dictionary-GHC.html#arityOf",
          "type": "function"
        },
        "index": {
          "description": "Try to figure out the arity of an identifier",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "arityOf",
          "normalized": "a-\u003eId-\u003eInt",
          "package": "hermit",
          "partial": "Of",
          "signature": "c-\u003eId-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:arityOf"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eZap the \u003ccode\u003e\u003ca\u003eOccInfo\u003c/a\u003e\u003c/code\u003e in a zombie identifier.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "dezombifyR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-GHC.html#dezombifyR",
          "type": "function"
        },
        "index": {
          "description": "Zap the OccInfo in zombie identifier",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "dezombifyR",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:dezombifyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLifted version of \u003ccode\u003e\u003ca\u003egetDynFlags\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "dynFlagsT",
          "package": "hermit",
          "signature": "Translate c m a DynFlags",
          "source": "src/HERMIT-Dictionary-GHC.html#dynFlagsT",
          "type": "function"
        },
        "index": {
          "description": "Lifted version of getDynFlags",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "dynFlagsT",
          "package": "hermit",
          "partial": "Flags",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:dynFlagsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals that reflect GHC functions, or are derived from GHC functions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-GHC.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals that reflect GHC functions or are derived from GHC functions",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDetermine whether an identifier is in scope.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "inScope",
          "package": "hermit",
          "signature": "c -\u003e Id -\u003e Bool",
          "source": "src/HERMIT-Dictionary-GHC.html#inScope",
          "type": "function"
        },
        "index": {
          "description": "Determine whether an identifier is in scope",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "inScope",
          "normalized": "a-\u003eId-\u003eBool",
          "package": "hermit",
          "partial": "Scope",
          "signature": "c-\u003eId-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:inScope"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eNote: this can miss several things that a whole-module core lint will find.\n For instance, running this on the RHS of a binding, the type of the RHS will\n not be checked against the type of the binding. Running on the whole let expression\n will catch that however.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "lintExprT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr String",
          "source": "src/HERMIT-Dictionary-GHC.html#lintExprT",
          "type": "function"
        },
        "index": {
          "description": "Note this can miss several things that whole-module core lint will find For instance running this on the RHS of binding the type of the RHS will not be checked against the type of the binding Running on the whole let expression will catch that however",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "lintExprT",
          "package": "hermit",
          "partial": "Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:lintExprT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRun the Core Lint typechecker.\n Fails on errors, with error messages.\n Succeeds returning warnings.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "lintModuleT",
          "package": "hermit",
          "signature": "TranslateH ModGuts String",
          "source": "src/HERMIT-Dictionary-GHC.html#lintModuleT",
          "type": "function"
        },
        "index": {
          "description": "Run the Core Lint typechecker Fails on errors with error messages Succeeds returning warnings",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "lintModuleT",
          "package": "hermit",
          "partial": "Module",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:lintModuleT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRun GHC's occurrence analyser, and also eliminate any zombies.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "occurAnalyseAndDezombifyR",
          "package": "hermit",
          "signature": "Rewrite c m Core",
          "source": "src/HERMIT-Dictionary-GHC.html#occurAnalyseAndDezombifyR",
          "type": "function"
        },
        "index": {
          "description": "Run GHC occurrence analyser and also eliminate any zombies",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "occurAnalyseAndDezombifyR",
          "package": "hermit",
          "partial": "Analyse And Dezombify",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:occurAnalyseAndDezombifyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOccurrence analyse all sub-expressions, failing if the result is syntactically equal to the initial expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "occurAnalyseChangedR",
          "package": "hermit",
          "signature": "Rewrite c m Core",
          "source": "src/HERMIT-Dictionary-GHC.html#occurAnalyseChangedR",
          "type": "function"
        },
        "index": {
          "description": "Occurrence analyse all sub-expressions failing if the result is syntactically equal to the initial expression",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "occurAnalyseChangedR",
          "package": "hermit",
          "partial": "Analyse Changed",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:occurAnalyseChangedR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOccurrence analyse an expression, failing if the result is syntactically equal to the initial expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "occurAnalyseExprChangedR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-GHC.html#occurAnalyseExprChangedR",
          "type": "function"
        },
        "index": {
          "description": "Occurrence analyse an expression failing if the result is syntactically equal to the initial expression",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "occurAnalyseExprChangedR",
          "package": "hermit",
          "partial": "Analyse Expr Changed",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:occurAnalyseExprChangedR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply \u003ccode\u003eoccurAnalyseExprR\u003c/code\u003e to all sub-expressions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "occurAnalyseR",
          "package": "hermit",
          "signature": "Rewrite c m Core",
          "source": "src/HERMIT-Dictionary-GHC.html#occurAnalyseR",
          "type": "function"
        },
        "index": {
          "description": "Apply occurAnalyseExprR to all sub-expressions",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "occurAnalyseR",
          "package": "hermit",
          "partial": "Analyse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:occurAnalyseR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLookup a rule and attempt to construct a corresponding rewrite.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "rule",
          "package": "hermit",
          "signature": "String -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-GHC.html#rule",
          "type": "function"
        },
        "index": {
          "description": "Lookup rule and attempt to construct corresponding rewrite",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "rule",
          "normalized": "String-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "signature": "String-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:rule"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.GHC",
          "name": "rules",
          "package": "hermit",
          "signature": "[String] -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-GHC.html#rules",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "rules",
          "normalized": "[String]-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "signature": "[String]-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:rules"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRun GHC's specConstr pass, and apply any rules generated.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "specConstrR",
          "package": "hermit",
          "signature": "RewriteH ModGuts",
          "source": "src/HERMIT-Dictionary-GHC.html#specConstrR",
          "type": "function"
        },
        "index": {
          "description": "Run GHC specConstr pass and apply any rules generated",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "specConstrR",
          "package": "hermit",
          "partial": "Constr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:specConstrR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSubstitute all occurrences of a variable with an expression, in a case alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "substAltR",
          "package": "hermit",
          "signature": "Var -\u003e CoreExpr -\u003e Rewrite c m CoreAlt",
          "source": "src/HERMIT-Dictionary-GHC.html#substAltR",
          "type": "function"
        },
        "index": {
          "description": "Substitute all occurrences of variable with an expression in case alternative",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "substAltR",
          "normalized": "Var-\u003eCoreExpr-\u003eRewrite a b CoreAlt",
          "package": "hermit",
          "partial": "Alt",
          "signature": "Var-\u003eCoreExpr-\u003eRewrite c m CoreAlt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:substAltR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSubstitute all occurrences of a variable with an expression, in an expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "substCoreExpr",
          "package": "hermit",
          "signature": "Var -\u003e CoreExpr -\u003e CoreExpr -\u003e CoreExpr",
          "source": "src/HERMIT-Dictionary-GHC.html#substCoreExpr",
          "type": "function"
        },
        "index": {
          "description": "Substitute all occurrences of variable with an expression in an expression",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "substCoreExpr",
          "normalized": "Var-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr",
          "package": "hermit",
          "partial": "Core Expr",
          "signature": "Var-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:substCoreExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSubstitute all occurrences of a variable with an expression, in either a program or an expression.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.GHC",
          "name": "substR",
          "package": "hermit",
          "signature": "Var -\u003e CoreExpr -\u003e Rewrite c m Core",
          "source": "src/HERMIT-Dictionary-GHC.html#substR",
          "type": "function"
        },
        "index": {
          "description": "Substitute all occurrences of variable with an expression in either program or an expression",
          "hierarchy": "HERMIT Dictionary GHC",
          "module": "HERMIT.Dictionary.GHC",
          "name": "substR",
          "normalized": "Var-\u003eCoreExpr-\u003eRewrite a b Core",
          "package": "hermit",
          "signature": "Var-\u003eCoreExpr-\u003eRewrite c m Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-GHC.html#v:substR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Inline",
          "name": "Inline",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Inline.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "Inline",
          "package": "hermit",
          "partial": "Inline",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Inline",
          "name": "CaseBinderInlineOption",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Inline.html#CaseBinderInlineOption",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "CaseBinderInlineOption",
          "package": "hermit",
          "partial": "Case Binder Inline Option",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#t:CaseBinderInlineOption"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Inline",
          "name": "InlineConfig",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Inline.html#InlineConfig",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "InlineConfig",
          "package": "hermit",
          "partial": "Inline Config",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#t:InlineConfig"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Inline",
          "name": "AllBinders",
          "package": "hermit",
          "signature": "AllBinders",
          "source": "src/HERMIT-Dictionary-Inline.html#InlineConfig",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "AllBinders",
          "package": "hermit",
          "partial": "All Binders",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:AllBinders"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Inline",
          "name": "Alternative",
          "package": "hermit",
          "signature": "Alternative",
          "source": "src/HERMIT-Dictionary-Inline.html#CaseBinderInlineOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "Alternative",
          "package": "hermit",
          "partial": "Alternative",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:Alternative"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Inline",
          "name": "CaseBinderOnly",
          "package": "hermit",
          "signature": "CaseBinderOnly CaseBinderInlineOption",
          "source": "src/HERMIT-Dictionary-Inline.html#InlineConfig",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "CaseBinderOnly",
          "package": "hermit",
          "partial": "Case Binder Only",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:CaseBinderOnly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Inline",
          "name": "Scrutinee",
          "package": "hermit",
          "signature": "Scrutinee",
          "source": "src/HERMIT-Dictionary-Inline.html#CaseBinderInlineOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "Scrutinee",
          "package": "hermit",
          "partial": "Scrutinee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:Scrutinee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe implementation of inline, an important transformation.\n This *only* works if the current expression has the form \u003ccode\u003eVar v\u003c/code\u003e (it does not traverse the expression).\n It can trivially be prompted to more general cases using traversal strategies.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "configurableInlineR",
          "package": "hermit",
          "signature": "InlineConfig-\u003e Translate c HermitM Id Bool-\u003e Rewrite c HermitM CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "The implementation of inline an important transformation This only works if the current expression has the form Var it does not traverse the expression It can trivially be prompted to more general cases using traversal strategies",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "configurableInlineR",
          "normalized": "InlineConfig-\u003eTranslate a HermitM Id Bool-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Inline",
          "signature": "InlineConfig-\u003eTranslate c HermitM Id Bool-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:configurableInlineR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es for inlining variables.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Inline.html#externals",
          "type": "function"
        },
        "index": {
          "description": "External for inlining variables",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the unfolding of an identifier, and a predicate over the binding depths of all variables within that unfolding to determine if they have been captured in their new location.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "getUnfoldingT",
          "package": "hermit",
          "signature": "InlineConfig -\u003e Translate c HermitM Id (CoreExpr, BindingDepth -\u003e Bool)",
          "source": "src/HERMIT-Dictionary-Inline.html#getUnfoldingT",
          "type": "function"
        },
        "index": {
          "description": "Return the unfolding of an identifier and predicate over the binding depths of all variables within that unfolding to determine if they have been captured in their new location",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "getUnfoldingT",
          "normalized": "InlineConfig-\u003eTranslate a HermitM Id(CoreExpr,BindingDepth-\u003eBool)",
          "package": "hermit",
          "partial": "Unfolding",
          "signature": "InlineConfig-\u003eTranslate c HermitM Id(CoreExpr,BindingDepth-\u003eBool)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:getUnfoldingT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInline the current identifier if is a case binder, using the case-alternative pattern rather than the scrutinee.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineCaseAlternativeR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Inline.html#inlineCaseAlternativeR",
          "type": "function"
        },
        "index": {
          "description": "Inline the current identifier if is case binder using the case-alternative pattern rather than the scrutinee",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineCaseAlternativeR",
          "package": "hermit",
          "partial": "Case Alternative",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:inlineCaseAlternativeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInline the current identifier if it is a case binder, using the scrutinee rather than the case-alternative pattern.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineCaseScrutineeR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Inline.html#inlineCaseScrutineeR",
          "type": "function"
        },
        "index": {
          "description": "Inline the current identifier if it is case binder using the scrutinee rather than the case-alternative pattern",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineCaseScrutineeR",
          "package": "hermit",
          "partial": "Case Scrutinee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:inlineCaseScrutineeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf the current variable matches the given name, then inline it.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineNameR",
          "package": "hermit",
          "signature": "Name -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Inline.html#inlineNameR",
          "type": "function"
        },
        "index": {
          "description": "If the current variable matches the given name then inline it",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineNameR",
          "normalized": "Name-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Name",
          "signature": "Name-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:inlineNameR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf the current variable matches any of the given names, then inline it.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineNamesR",
          "package": "hermit",
          "signature": "[Name] -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Inline.html#inlineNamesR",
          "type": "function"
        },
        "index": {
          "description": "If the current variable matches any of the given names then inline it",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineNamesR",
          "normalized": "[Name]-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Names",
          "signature": "[Name]-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:inlineNamesR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInline the current variable.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Inline.html#inlineR",
          "type": "function"
        },
        "index": {
          "description": "Inline the current variable",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineR",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:inlineR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet list of possible inline targets. Used by shell for completion.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineTargetsT",
          "package": "hermit",
          "signature": "Translate c HermitM Core [String]",
          "source": "src/HERMIT-Dictionary-Inline.html#inlineTargetsT",
          "type": "function"
        },
        "index": {
          "description": "Get list of possible inline targets Used by shell for completion",
          "hierarchy": "HERMIT Dictionary Inline",
          "module": "HERMIT.Dictionary.Inline",
          "name": "inlineTargetsT",
          "normalized": "Translate a HermitM Core[String]",
          "package": "hermit",
          "partial": "Targets",
          "signature": "Translate c HermitM Core[String]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Inline.html#v:inlineTargetsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Kure",
          "name": "Kure",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Kure.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Kure",
          "module": "HERMIT.Dictionary.Kure",
          "name": "Kure",
          "package": "hermit",
          "partial": "Kure",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Kure.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cul\u003e\u003cli\u003e- This list contains reflections of the KURE strategies as \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es.\n\u003c/li\u003e\u003c/ul\u003e",
          "module": "HERMIT.Dictionary.Kure",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Kure.html#externals",
          "type": "function"
        },
        "index": {
          "description": "This list contains reflections of the KURE strategies as External",
          "hierarchy": "HERMIT Dictionary Kure",
          "module": "HERMIT.Dictionary.Kure",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Kure.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Kure",
          "name": "unitT",
          "package": "hermit",
          "signature": "Translate c m a ()",
          "source": "src/HERMIT-Dictionary-Kure.html#unitT",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Kure",
          "module": "HERMIT.Dictionary.Kure",
          "name": "unitT",
          "normalized": "Translate a b c()",
          "package": "hermit",
          "signature": "Translate c m a()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Kure.html#v:unitT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Bind",
          "name": "Bind",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Local-Bind.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Bind",
          "module": "HERMIT.Dictionary.Local.Bind",
          "name": "Bind",
          "package": "hermit",
          "partial": "Bind",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Bind.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals for manipulating binding groups.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Bind",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Local-Bind.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals for manipulating binding groups",
          "hierarchy": "HERMIT Dictionary Local Bind",
          "module": "HERMIT.Dictionary.Local.Bind",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Bind.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003eNonRec\u003c/a\u003e\u003c/code\u003e v e\u003c/code\u003e ==\u003e \u003ccode\u003e\u003ccode\u003e\u003ca\u003eRec\u003c/a\u003e\u003c/code\u003e [(v,e)]\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Bind",
          "name": "nonrecToRecR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind",
          "source": "src/HERMIT-Dictionary-Local-Bind.html#nonrecToRecR",
          "type": "function"
        },
        "index": {
          "description": "NonRec Rec",
          "hierarchy": "HERMIT Dictionary Local Bind",
          "module": "HERMIT.Dictionary.Local.Bind",
          "name": "nonrecToRecR",
          "package": "hermit",
          "partial": "To Rec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Bind.html#v:nonrecToRecR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003eRec\u003c/a\u003e\u003c/code\u003e [(v,e)]\u003c/code\u003e ==\u003e \u003ccode\u003e\u003ccode\u003e\u003ca\u003eNonRec\u003c/a\u003e\u003c/code\u003e v e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Bind",
          "name": "recToNonrecR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind",
          "source": "src/HERMIT-Dictionary-Local-Bind.html#recToNonrecR",
          "type": "function"
        },
        "index": {
          "description": "Rec NonRec",
          "hierarchy": "HERMIT Dictionary Local Bind",
          "module": "HERMIT.Dictionary.Local.Bind",
          "name": "recToNonrecR",
          "package": "hermit",
          "partial": "To Nonrec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Bind.html#v:recToNonrecR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "Case",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Local-Case.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "Case",
          "package": "hermit",
          "partial": "Case",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEliminate a case, inlining any occurrences of the case binder as the scrutinee.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseElimInlineScrutineeR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseElimInlineScrutineeR",
          "type": "function"
        },
        "index": {
          "description": "Eliminate case inlining any occurrences of the case binder as the scrutinee",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseElimInlineScrutineeR",
          "package": "hermit",
          "partial": "Elim Inline Scrutinee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseElimInlineScrutineeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEliminate a case, merging the case alternatives into a single default alternative and inlining the case binder as the scrutinee (if possible).\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseElimMergeAltsR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseElimMergeAltsR",
          "type": "function"
        },
        "index": {
          "description": "Eliminate case merging the case alternatives into single default alternative and inlining the case binder as the scrutinee if possible",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseElimMergeAltsR",
          "package": "hermit",
          "partial": "Elim Merge Alts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseElimMergeAltsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ecase s of w; C vs -\u003e e ==\u003e e if w and vs are not free in e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseElimR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseElimR",
          "type": "function"
        },
        "index": {
          "description": "case of vs if and vs are not free in",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseElimR",
          "package": "hermit",
          "partial": "Elim",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseElimR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEliminate a case that corresponds to a pointless \u003ccode\u003e\u003ca\u003eseq\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseElimSeqR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseElimSeqR",
          "type": "function"
        },
        "index": {
          "description": "Eliminate case that corresponds to pointless seq",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseElimSeqR",
          "package": "hermit",
          "partial": "Elim Seq",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseElimSeqR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e(case s of alt1 -\u003e e1; alt2 -\u003e e2) v ==\u003e case s of alt1 -\u003e e1 v; alt2 -\u003e e2 v\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatAppR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseFloatAppR",
          "type": "function"
        },
        "index": {
          "description": "case of alt1 e1 alt2 e2 case of alt1 e1 alt2 e2",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatAppR",
          "package": "hermit",
          "partial": "Float App",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatAppR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ef (case s of alt1 -\u003e e1; alt2 -\u003e e2)\u003c/code\u003e ==\u003e \u003ccode\u003ecase s of alt1 -\u003e f e1; alt2 -\u003e f e2\u003c/code\u003e\n   Only safe if \u003ccode\u003ef\u003c/code\u003e is strict.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatArgR",
          "package": "hermit",
          "signature": "Maybe (CoreExpr, Maybe (Rewrite c HermitM CoreExpr))-\u003e Rewrite c HermitM CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "case of alt1 e1 alt2 e2 case of alt1 e1 alt2 e2 Only safe if is strict",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatArgR",
          "normalized": "Maybe(CoreExpr,Maybe(Rewrite a HermitM CoreExpr))-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Float Arg",
          "signature": "Maybe(CoreExpr,Maybe(Rewrite c HermitM CoreExpr))-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatArgR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ecase (case s1 of alt11 -\u003e e11; alt12 -\u003e e12) of alt21 -\u003e e21; alt22 -\u003e e22\n   ==\u003e\n   case s1 of\n     alt11 -\u003e case e11 of alt21 -\u003e e21; alt22 -\u003e e22\n     alt12 -\u003e case e12 of alt21 -\u003e e21; alt22 -\u003e e22\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatCaseR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseFloatCaseR",
          "type": "function"
        },
        "index": {
          "description": "case case s1 of alt11 e11 alt12 e12 of alt21 e21 alt22 e22 case s1 of alt11 case e11 of alt21 e21 alt22 e22 alt12 case e12 of alt21 e21 alt22 e22",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatCaseR",
          "package": "hermit",
          "partial": "Float Case",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatCaseR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ecast (case s of p -\u003e e) co ==\u003e case s of p -\u003e cast e co\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatCastR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseFloatCastR",
          "type": "function"
        },
        "index": {
          "description": "cast case of co case of cast co",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatCastR",
          "package": "hermit",
          "partial": "Float Cast",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatCastR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUnimplemented!\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatInAppR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseFloatInAppR",
          "type": "function"
        },
        "index": {
          "description": "Unimplemented",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatInAppR",
          "package": "hermit",
          "partial": "Float In App",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatInAppR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatInArgsR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseFloatInArgsR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatInArgsR",
          "package": "hermit",
          "partial": "Float In Args",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatInArgsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFloat in a Case whatever the context.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatInR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseFloatInR",
          "type": "function"
        },
        "index": {
          "description": "Float in Case whatever the context",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatInR",
          "package": "hermit",
          "partial": "Float In",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatInR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003elet v = case s of alt1 -\u003e e1 in e ==\u003e case s of alt1 -\u003e let v = e1 in e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatLetR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseFloatLetR",
          "type": "function"
        },
        "index": {
          "description": "let case of alt1 e1 in case of alt1 let e1 in",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatLetR",
          "package": "hermit",
          "partial": "Float Let",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatLetR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ecaseFloatR = caseFloatAppR \u003c+ caseFloatCaseR \u003c+ caseFloatLetR \u003c+ caseFloatCastR\n   Note: does NOT include caseFloatArg\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseFloatR",
          "type": "function"
        },
        "index": {
          "description": "caseFloatR caseFloatAppR caseFloatCaseR caseFloatLetR caseFloatCastR Note does NOT include caseFloatArg",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseFloatR",
          "package": "hermit",
          "partial": "Float",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseFloatR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInline the case wildcard binder as the case-alternative pattern everywhere in the case alternatives.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseInlineAlternativeR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseInlineAlternativeR",
          "type": "function"
        },
        "index": {
          "description": "Inline the case wildcard binder as the case-alternative pattern everywhere in the case alternatives",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseInlineAlternativeR",
          "package": "hermit",
          "partial": "Inline Alternative",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseInlineAlternativeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInline the case wildcard binder as the case scrutinee everywhere in the case alternatives.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseInlineScrutineeR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseInlineScrutineeR",
          "type": "function"
        },
        "index": {
          "description": "Inline the case wildcard binder as the case scrutinee everywhere in the case alternatives",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseInlineScrutineeR",
          "package": "hermit",
          "partial": "Inline Scrutinee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseInlineScrutineeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eForce evaluation of an identifier by introducing a case.\n   This is equivalent to adding \u003ccode\u003e(seq v)\u003c/code\u003e in the source code.\n\u003c/p\u003e\u003cp\u003ee -\u003e case v of v\n        _ -\u003e e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseIntroSeqR",
          "package": "hermit",
          "signature": "Name -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseIntroSeqR",
          "type": "function"
        },
        "index": {
          "description": "Force evaluation of an identifier by introducing case This is equivalent to adding seq in the source code case of",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseIntroSeqR",
          "normalized": "Name-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Intro Seq",
          "signature": "Name-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseIntroSeqR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMerge all case alternatives into a single default case.\n   The RHS of each alternative must be the same.\n   \u003ccode\u003ecase s of {pat1 -\u003e e ; pat2 -\u003e e ; ... ; patn -\u003e e}\u003c/code\u003e ==\u003e \u003ccode\u003ecase s of {_ -\u003e e}\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseMergeAltsR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseMergeAltsR",
          "type": "function"
        },
        "index": {
          "description": "Merge all case alternatives into single default case The RHS of each alternative must be the same case of pat1 pat2 patn case of",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseMergeAltsR",
          "package": "hermit",
          "partial": "Merge Alts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseMergeAltsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA cleverer version of \u003ccode\u003emergeCaseAlts\u003c/code\u003e that first attempts to abstract out any occurrences of the alternative pattern using the wildcard binder.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseMergeAltsWithWildR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseMergeAltsWithWildR",
          "type": "function"
        },
        "index": {
          "description": "cleverer version of mergeCaseAlts that first attempts to abstract out any occurrences of the alternative pattern using the wildcard binder",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseMergeAltsWithWildR",
          "package": "hermit",
          "partial": "Merge Alts With Wild",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseMergeAltsWithWildR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCase of Known Constructor.\n   Eliminate a case if the scrutinee is a data constructor.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseReduceDataconR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseReduceDataconR",
          "type": "function"
        },
        "index": {
          "description": "Case of Known Constructor Eliminate case if the scrutinee is data constructor",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseReduceDataconR",
          "package": "hermit",
          "partial": "Reduce Datacon",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseReduceDataconR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInline the case scrutinee (if it is an identifier), and then perform case reduction.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseReduceIdR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseReduceIdR",
          "type": "function"
        },
        "index": {
          "description": "Inline the case scrutinee if it is an identifier and then perform case reduction",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseReduceIdR",
          "package": "hermit",
          "partial": "Reduce Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseReduceIdR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCase of Known Constructor.\n   Eliminate a case if the scrutinee is a literal.\n NB: LitAlt cases don't do evaluation\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseReduceLiteralR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseReduceLiteralR",
          "type": "function"
        },
        "index": {
          "description": "Case of Known Constructor Eliminate case if the scrutinee is literal NB LitAlt cases don do evaluation",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseReduceLiteralR",
          "package": "hermit",
          "partial": "Reduce Literal",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseReduceLiteralR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCase of Known Constructor.\n   Eliminate a case if the scrutinee is a data constructor or a literal.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseReduceR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseReduceR",
          "type": "function"
        },
        "index": {
          "description": "Case of Known Constructor Eliminate case if the scrutinee is data constructor or literal",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseReduceR",
          "package": "hermit",
          "partial": "Reduce",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseReduceR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLike caseSplit, but additionally inlines the constructor applications\n for each occurance of the named variable.\n\u003c/p\u003e\u003cpre\u003e caseSplitInline nm = caseSplit nm \u003e\u003e\u003e anybuR (inlineName nm)\n\u003c/pre\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseSplitInlineR",
          "package": "hermit",
          "signature": "Name -\u003e Rewrite c HermitM Core",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseSplitInlineR",
          "type": "function"
        },
        "index": {
          "description": "Like caseSplit but additionally inlines the constructor applications for each occurance of the named variable caseSplitInline nm caseSplit nm anybuR inlineName nm",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseSplitInlineR",
          "normalized": "Name-\u003eRewrite a HermitM Core",
          "package": "hermit",
          "partial": "Split Inline",
          "signature": "Name-\u003eRewrite c HermitM Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseSplitInlineR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCase split a free identifier in an expression:\n\u003c/p\u003e\u003cp\u003eE.g. Assume expression e which mentions i :: [a]\n\u003c/p\u003e\u003cp\u003ee ==\u003e case i of i\n         []     -\u003e e\n         (a:as) -\u003e e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseSplitR",
          "package": "hermit",
          "signature": "Name -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Case.html#caseSplitR",
          "type": "function"
        },
        "index": {
          "description": "Case split free identifier in an expression E.g Assume expression which mentions case of as",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "caseSplitR",
          "normalized": "Name-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Split",
          "signature": "Name-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:caseSplitR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals relating to Case expressions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Local-Case.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals relating to Case expressions",
          "hierarchy": "HERMIT Dictionary Local Case",
          "module": "HERMIT.Dictionary.Local.Case",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Case.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "Cast",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Local-Cast.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Cast",
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "Cast",
          "package": "hermit",
          "partial": "Cast",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Cast.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "castElimReflR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Cast.html#castElimReflR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Cast",
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "castElimReflR",
          "package": "hermit",
          "partial": "Elim Refl",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Cast.html#v:castElimReflR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "castElimSymPlusR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Cast.html#castElimSymPlusR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Cast",
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "castElimSymPlusR",
          "package": "hermit",
          "partial": "Elim Sym Plus",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Cast.html#v:castElimSymPlusR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "castElimSymR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Cast.html#castElimSymR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Cast",
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "castElimSymR",
          "package": "hermit",
          "partial": "Elim Sym",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Cast.html#v:castElimSymR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "castFloatAppR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Cast.html#castFloatAppR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Cast",
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "castFloatAppR",
          "package": "hermit",
          "partial": "Float App",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Cast.html#v:castFloatAppR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals relating to Case expressions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Local-Cast.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals relating to Case expressions",
          "hierarchy": "HERMIT Dictionary Local Cast",
          "module": "HERMIT.Dictionary.Local.Cast",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Cast.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "Let",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Local-Let.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "Let",
          "package": "hermit",
          "partial": "Let",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals relating to \u003ccode\u003e\u003ca\u003eLet\u003c/a\u003e\u003c/code\u003e expressions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Local-Let.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals relating to Let expressions",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letElimR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letElimR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letElimR",
          "package": "hermit",
          "partial": "Elim",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letElimR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e(let v = ev in e) x\u003c/code\u003e ==\u003e \u003ccode\u003elet v = ev in e x\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatAppR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatAppR",
          "type": "function"
        },
        "index": {
          "description": "let ev in let ev in",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatAppR",
          "package": "hermit",
          "partial": "Float App",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatAppR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ef (let v = ev in e)\u003c/code\u003e ==\u003e \u003ccode\u003elet v = ev in f e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatArgR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatArgR",
          "type": "function"
        },
        "index": {
          "description": "let ev in let ev in",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatArgR",
          "package": "hermit",
          "partial": "Float Arg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatArgR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ecase (let bnds in e) of wild alts\u003c/code\u003e ==\u003e \u003ccode\u003elet bnds in (case e of wild alts)\u003c/code\u003e\n   Fails if any variables bound in \u003ccode\u003ebnds\u003c/code\u003e occurs in \u003ccode\u003ealts\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatCaseR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatCaseR",
          "type": "function"
        },
        "index": {
          "description": "case let bnds in of wild alts let bnds in case of wild alts Fails if any variables bound in bnds occurs in alts",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatCaseR",
          "package": "hermit",
          "partial": "Float Case",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatCaseR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ecast (let bnds in e) co\u003c/code\u003e ==\u003e \u003ccode\u003elet bnds in cast e co\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatCastR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatCastR",
          "type": "function"
        },
        "index": {
          "description": "cast let bnds in co let bnds in cast co",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatCastR",
          "package": "hermit",
          "partial": "Float Cast",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatCastR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFloat a \u003ccode\u003e\u003ca\u003eLet\u003c/a\u003e\u003c/code\u003e through an expression, whatever the context.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatExprR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatExprR",
          "type": "function"
        },
        "index": {
          "description": "Float Let through an expression whatever the context",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatExprR",
          "package": "hermit",
          "partial": "Float Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatExprR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003elet v = ev in f a\u003c/code\u003e ==\u003e \u003ccode\u003e(let v = ev in f) (let v = ev in a)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatInAppR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatInAppR",
          "type": "function"
        },
        "index": {
          "description": "let ev in let ev in let ev in",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatInAppR",
          "package": "hermit",
          "partial": "Float In App",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatInAppR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003elet v = ev in case s of p -\u003e e\u003c/code\u003e ==\u003e \u003ccode\u003ecase (let v = ev in s) of p -\u003e let v = ev in e\u003c/code\u003e,\n   if \u003ccode\u003ev\u003c/code\u003e does not shadow a pattern binder in \u003ccode\u003ep\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatInCaseR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatInCaseR",
          "type": "function"
        },
        "index": {
          "description": "let ev in case of case let ev in of let ev in if does not shadow pattern binder in",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatInCaseR",
          "package": "hermit",
          "partial": "Float In Case",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatInCaseR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003elet v = ev in  x -\u003e e\u003c/code\u003e ==\u003e \u003ccode\u003ex -\u003e let v = ev in e\u003c/code\u003e\n   if \u003ccode\u003ev\u003c/code\u003e does not shadow \u003ccode\u003ex\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatInLamR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatInLamR",
          "type": "function"
        },
        "index": {
          "description": "let ev in let ev in if does not shadow",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatInLamR",
          "package": "hermit",
          "partial": "Float In Lam",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatInLamR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFloat in a \u003ccode\u003e\u003ca\u003eLet\u003c/a\u003e\u003c/code\u003e if possible.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatInR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatInR",
          "type": "function"
        },
        "index": {
          "description": "Float in Let if possible",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatInR",
          "package": "hermit",
          "partial": "Float In",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatInR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e( v -\u003e let binds in e2)\u003c/code\u003e  ==\u003e  \u003ccode\u003elet binds in ( v1 -\u003e e2)\u003c/code\u003e\n   Fails if \u003ccode\u003ev\u003c/code\u003e occurs in the RHS of \u003ccode\u003ebinds\u003c/code\u003e.\n   If \u003ccode\u003ev\u003c/code\u003e is shadowed in binds, then \u003ccode\u003ev\u003c/code\u003e will be alpha-renamed.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatLamR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatLamR",
          "type": "function"
        },
        "index": {
          "description": "let binds in e2 let binds in v1 e2 Fails if occurs in the RHS of binds If is shadowed in binds then will be alpha-renamed",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatLamR",
          "package": "hermit",
          "partial": "Float Lam",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatLamR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003elet v = (let bds in e1) in e2\u003c/code\u003e ==\u003e \u003ccode\u003elet bds in let v = e1 in e2\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatLetR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatLetR",
          "type": "function"
        },
        "index": {
          "description": "let let bds in e1 in e2 let bds in let e1 in e2",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatLetR",
          "package": "hermit",
          "partial": "Float Let",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatLetR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003eProgCons\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eNonRec\u003c/a\u003e\u003c/code\u003e v (\u003ccode\u003e\u003ca\u003eLet\u003c/a\u003e\u003c/code\u003e bds e)) p\u003c/code\u003e ==\u003e \u003ccode\u003e\u003ccode\u003e\u003ca\u003eProgCons\u003c/a\u003e\u003c/code\u003e bds (\u003ccode\u003e\u003ca\u003eProgCons\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eNonRec\u003c/a\u003e\u003c/code\u003e v e) p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatTopR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreProg",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letFloatTopR",
          "type": "function"
        },
        "index": {
          "description": "ProgCons NonRec Let bds ProgCons bds ProgCons NonRec",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letFloatTopR",
          "package": "hermit",
          "partial": "Float Top",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letFloatTopR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ee\u003c/code\u003e ==\u003e \u003ccode\u003e(let v = e in v)\u003c/code\u003e, name of v is provided\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letIntroR",
          "package": "hermit",
          "signature": "String -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letIntroR",
          "type": "function"
        },
        "index": {
          "description": "let in name of is provided",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letIntroR",
          "normalized": "String-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Intro",
          "signature": "String-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letIntroR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRemove an unused non-recursive let binding.\n   \u003ccode\u003elet v = E1 in E2\u003c/code\u003e ==\u003e \u003ccode\u003eE2\u003c/code\u003e, if \u003ccode\u003ev\u003c/code\u003e is not free in \u003ccode\u003eE2\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letNonRecElimR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letNonRecElimR",
          "type": "function"
        },
        "index": {
          "description": "Remove an unused non-recursive let binding let E1 in E2 E2 if is not free in E2",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letNonRecElimR",
          "package": "hermit",
          "partial": "Non Rec Elim",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letNonRecElimR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003eLet (NonRec v e) body\u003c/code\u003e ==\u003e \u003ccode\u003ebody[e/v]\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letNonRecSubstR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letNonRecSubstR",
          "type": "function"
        },
        "index": {
          "description": "Let NonRec body body",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letNonRecSubstR",
          "package": "hermit",
          "partial": "Non Rec Subst",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letNonRecSubstR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCurrently we always substitute types and coercions, and use a heuristic to decide whether to substitute expressions.\n   This may need revisiting.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letNonRecSubstSafeR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letNonRecSubstSafeR",
          "type": "function"
        },
        "index": {
          "description": "Currently we always substitute types and coercions and use heuristic to decide whether to substitute expressions This may need revisiting",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letNonRecSubstSafeR",
          "package": "hermit",
          "partial": "Non Rec Subst Safe",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letNonRecSubstSafeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRemove all unused recursive let bindings in the current group.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letRecElimR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letRecElimR",
          "type": "function"
        },
        "index": {
          "description": "Remove all unused recursive let bindings in the current group",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letRecElimR",
          "package": "hermit",
          "partial": "Rec Elim",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letRecElimR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e(let x = e1 in e2) ==\u003e (e2[e1/x]), (x must not be free in e1)\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letSubstR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letSubstR",
          "type": "function"
        },
        "index": {
          "description": "let e1 in e2 e2 e1 must not be free in e1",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letSubstR",
          "package": "hermit",
          "partial": "Subst",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letSubstR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAs \u003ccode\u003e\u003ca\u003eletNonRecSubstSafeR\u003c/a\u003e\u003c/code\u003e, but attempting to convert a singleton recursive binding to a non-recursive binding first.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letSubstSafeR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letSubstSafeR",
          "type": "function"
        },
        "index": {
          "description": "As letNonRecSubstSafeR but attempting to convert singleton recursive binding to non-recursive binding first",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letSubstSafeR",
          "package": "hermit",
          "partial": "Subst Safe",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letSubstSafeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003elet v = ev in e\u003c/code\u003e ==\u003e \u003ccode\u003ecase ev of v -\u003e e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letToCaseR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letToCaseR",
          "type": "function"
        },
        "index": {
          "description": "let ev in case ev of",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letToCaseR",
          "package": "hermit",
          "partial": "To Case",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letToCaseR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCombine nested non-recursive lets into case of a tuple.\n   E.g. let {v1 = e1 ; v2 = e2 ; v3 = e3} in body ==\u003e case (e1,e2,e3) of {(v1,v2,v3) -\u003e body}\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letTupleR",
          "package": "hermit",
          "signature": "String -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#letTupleR",
          "type": "function"
        },
        "index": {
          "description": "Combine nested non-recursive lets into case of tuple E.g let v1 e1 v2 e2 v3 e3 in body case e1 e2 e3 of v1 v2 v3 body",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "letTupleR",
          "normalized": "String-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Tuple",
          "signature": "String-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:letTupleR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "progBindElimR",
          "package": "hermit",
          "signature": "Rewrite c m CoreProg",
          "source": "src/HERMIT-Dictionary-Local-Let.html#progBindElimR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "progBindElimR",
          "package": "hermit",
          "partial": "Bind Elim",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:progBindElimR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "progBindNonRecElimR",
          "package": "hermit",
          "signature": "Rewrite c m CoreProg",
          "source": "src/HERMIT-Dictionary-Local-Let.html#progBindNonRecElimR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "progBindNonRecElimR",
          "package": "hermit",
          "partial": "Bind Non Rec Elim",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:progBindNonRecElimR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRemove all unused bindings at the top level.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "progBindRecElimR",
          "package": "hermit",
          "signature": "Rewrite c m CoreProg",
          "source": "src/HERMIT-Dictionary-Local-Let.html#progBindRecElimR",
          "type": "function"
        },
        "index": {
          "description": "Remove all unused bindings at the top level",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "progBindRecElimR",
          "package": "hermit",
          "partial": "Bind Rec Elim",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:progBindRecElimR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRe-order a sequence of nested non-recursive let bindings.\n   The argument list should contain the let-bound variables, in the desired order.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "reorderNonRecLetsR",
          "package": "hermit",
          "signature": "[Name] -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local-Let.html#reorderNonRecLetsR",
          "type": "function"
        },
        "index": {
          "description": "Re-order sequence of nested non-recursive let bindings The argument list should contain the let-bound variables in the desired order",
          "hierarchy": "HERMIT Dictionary Local Let",
          "module": "HERMIT.Dictionary.Local.Let",
          "name": "reorderNonRecLetsR",
          "normalized": "[Name]-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Non Rec Lets",
          "signature": "[Name]-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local-Let.html#v:reorderNonRecLetsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Local",
          "name": "Local",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Local.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "Local",
          "package": "hermit",
          "partial": "Local",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAbstract over a variable using a lambda.\n   e  ==\u003e  ( x. e) x\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "abstractR",
          "package": "hermit",
          "signature": "Name -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local.html#abstractR",
          "type": "function"
        },
        "index": {
          "description": "Abstract over variable using lambda",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "abstractR",
          "normalized": "Name-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "signature": "Name-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:abstractR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e(let v = e1 in e2) ==\u003e (\\ v -\u003e e2) e1\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "betaExpandR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local.html#betaExpandR",
          "type": "function"
        },
        "index": {
          "description": "let e1 in e2 e2 e1",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "betaExpandR",
          "package": "hermit",
          "partial": "Expand",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:betaExpandR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePerform one or more beta-reductions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "betaReducePlusR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local.html#betaReducePlusR",
          "type": "function"
        },
        "index": {
          "description": "Perform one or more beta-reductions",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "betaReducePlusR",
          "package": "hermit",
          "partial": "Reduce Plus",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:betaReducePlusR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e((\\ v -\u003e e1) e2)\u003c/code\u003e ==\u003e \u003ccode\u003e(let v = e2 in e1)\u003c/code\u003e\n   This form of beta-reduction is safe if e2 is an arbitrary\n   expression (won't duplicate work).\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "betaReduceR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local.html#betaReduceR",
          "type": "function"
        },
        "index": {
          "description": "e1 e2 let e2 in e1 This form of beta-reduction is safe if e2 is an arbitrary expression won duplicate work",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "betaReduceR",
          "package": "hermit",
          "partial": "Reduce",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:betaReduceR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ee1 ==\u003e (\\ v -\u003e e1 v)\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "etaExpandR",
          "package": "hermit",
          "signature": "String -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local.html#etaExpandR",
          "type": "function"
        },
        "index": {
          "description": "e1 e1",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "etaExpandR",
          "normalized": "String-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Expand",
          "signature": "String-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:etaExpandR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e(\\ v -\u003e f v) ==\u003e f\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "etaReduceR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Local.html#etaReduceR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "etaReduceR",
          "package": "hermit",
          "partial": "Reduce",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:etaReduceR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals for local structural manipulations.\n   (Many taken from Chapter 3 of Andre Santos' dissertation.)\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Local.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals for local structural manipulations Many taken from Chapter of Andre Santos dissertation",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFlatten all the top-level binding groups in the module to a single recursive binding group.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "flattenModuleR",
          "package": "hermit",
          "signature": "Rewrite c m ModGuts",
          "source": "src/HERMIT-Dictionary-Local.html#flattenModuleR",
          "type": "function"
        },
        "index": {
          "description": "Flatten all the top-level binding groups in the module to single recursive binding group",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "flattenModuleR",
          "package": "hermit",
          "partial": "Module",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:flattenModuleR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFlatten all the top-level binding groups in a program to a program containing a single recursive binding group.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "flattenProgramR",
          "package": "hermit",
          "signature": "Rewrite c m CoreProg",
          "source": "src/HERMIT-Dictionary-Local.html#flattenProgramR",
          "type": "function"
        },
        "index": {
          "description": "Flatten all the top-level binding groups in program to program containing single recursive binding group",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "flattenProgramR",
          "package": "hermit",
          "partial": "Program",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:flattenProgramR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFlatten all the top-level binding groups in a program to a single recursive binding group.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "flattenProgramT",
          "package": "hermit",
          "signature": "Translate c m CoreProg CoreBind",
          "source": "src/HERMIT-Dictionary-Local.html#flattenProgramT",
          "type": "function"
        },
        "index": {
          "description": "Flatten all the top-level binding groups in program to single recursive binding group",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "flattenProgramT",
          "package": "hermit",
          "partial": "Program",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:flattenProgramT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePerform multiple eta-expansions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "multiEtaExpandR",
          "package": "hermit",
          "signature": "[String] -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Local.html#multiEtaExpandR",
          "type": "function"
        },
        "index": {
          "description": "Perform multiple eta-expansions",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "multiEtaExpandR",
          "normalized": "[String]-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Eta Expand",
          "signature": "[String]-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:multiEtaExpandR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush a function through a Case or Let expression.\n   Unsafe if the function is not strict.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Local",
          "name": "pushR",
          "package": "hermit",
          "signature": "Maybe (Rewrite c HermitM CoreExpr)-\u003e (Id -\u003e Bool)-\u003e Rewrite c HermitM CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "Push function through Case or Let expression Unsafe if the function is not strict",
          "hierarchy": "HERMIT Dictionary Local",
          "module": "HERMIT.Dictionary.Local",
          "name": "pushR",
          "normalized": "Maybe(Rewrite a HermitM CoreExpr)-\u003e(Id-\u003eBool)-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "signature": "Maybe(Rewrite c HermitM CoreExpr)-\u003e(Id-\u003eBool)-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Local.html#v:pushR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation.Crumbs",
          "name": "Crumbs",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Navigation-Crumbs.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation Crumbs",
          "module": "HERMIT.Dictionary.Navigation.Crumbs",
          "name": "Crumbs",
          "package": "hermit",
          "partial": "Crumbs",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation-Crumbs.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es for individual \u003ccode\u003e\u003ca\u003eCrumb\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation.Crumbs",
          "name": "crumbExternals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Navigation-Crumbs.html#crumbExternals",
          "type": "function"
        },
        "index": {
          "description": "External for individual Crumb",
          "hierarchy": "HERMIT Dictionary Navigation Crumbs",
          "module": "HERMIT.Dictionary.Navigation.Crumbs",
          "name": "crumbExternals",
          "normalized": "[External]",
          "package": "hermit",
          "partial": "Externals",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation-Crumbs.html#v:crumbExternals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Navigation",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Navigation.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Navigation",
          "package": "hermit",
          "partial": "Navigation",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLanguage constructs that can be zoomed to.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Considerable",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "data"
        },
        "index": {
          "description": "Language constructs that can be zoomed to",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Considerable",
          "package": "hermit",
          "partial": "Considerable",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#t:Considerable"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Application",
          "package": "hermit",
          "signature": "Application",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Application",
          "package": "hermit",
          "partial": "Application",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:Application"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Binding",
          "package": "hermit",
          "signature": "Binding",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Binding",
          "package": "hermit",
          "partial": "Binding",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:Binding"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "CaseAlt",
          "package": "hermit",
          "signature": "CaseAlt",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "CaseAlt",
          "package": "hermit",
          "partial": "Case Alt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:CaseAlt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "CaseOf",
          "package": "hermit",
          "signature": "CaseOf",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "CaseOf",
          "package": "hermit",
          "partial": "Case Of",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:CaseOf"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Casty",
          "package": "hermit",
          "signature": "Casty",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Casty",
          "package": "hermit",
          "partial": "Casty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:Casty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "CoercionExpr",
          "package": "hermit",
          "signature": "CoercionExpr",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "CoercionExpr",
          "package": "hermit",
          "partial": "Coercion Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:CoercionExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Definition",
          "package": "hermit",
          "signature": "Definition",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Definition",
          "package": "hermit",
          "partial": "Definition",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:Definition"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Lambda",
          "package": "hermit",
          "signature": "Lambda",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Lambda",
          "package": "hermit",
          "partial": "Lambda",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:Lambda"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "LetExpr",
          "package": "hermit",
          "signature": "LetExpr",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "LetExpr",
          "package": "hermit",
          "partial": "Let Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:LetExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Literal",
          "package": "hermit",
          "signature": "Literal",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Literal",
          "package": "hermit",
          "partial": "Literal",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:Literal"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Ticky",
          "package": "hermit",
          "signature": "Ticky",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Ticky",
          "package": "hermit",
          "partial": "Ticky",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:Ticky"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "TypeExpr",
          "package": "hermit",
          "signature": "TypeExpr",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "TypeExpr",
          "package": "hermit",
          "partial": "Type Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:TypeExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Variable",
          "package": "hermit",
          "signature": "Variable",
          "source": "src/HERMIT-Dictionary-Navigation.html#Considerable",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "Variable",
          "package": "hermit",
          "partial": "Variable",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:Variable"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind the path to the binding group of a variable.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "bindingGroupOfT",
          "package": "hermit",
          "signature": "(Var -\u003e Bool) -\u003e Translate c m CoreTC LocalPathH",
          "source": "src/HERMIT-Dictionary-Navigation.html#bindingGroupOfT",
          "type": "function"
        },
        "index": {
          "description": "Find the path to the binding group of variable",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "bindingGroupOfT",
          "normalized": "(Var-\u003eBool)-\u003eTranslate a b CoreTC LocalPathH",
          "package": "hermit",
          "partial": "Group Of",
          "signature": "(Var-\u003eBool)-\u003eTranslate c m CoreTC LocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:bindingGroupOfT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all possible targets of \u003ccode\u003e\u003ca\u003ebindingGroupOfT\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "bindingGroupOfTargetsT",
          "package": "hermit",
          "signature": "Translate c m CoreTC VarSet",
          "source": "src/HERMIT-Dictionary-Navigation.html#bindingGroupOfTargetsT",
          "type": "function"
        },
        "index": {
          "description": "Find all possible targets of bindingGroupOfT",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "bindingGroupOfTargetsT",
          "package": "hermit",
          "partial": "Group Of Targets",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:bindingGroupOfTargetsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind the path to the binding of a variable.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "bindingOfT",
          "package": "hermit",
          "signature": "(Var -\u003e Bool) -\u003e Translate c m CoreTC LocalPathH",
          "source": "src/HERMIT-Dictionary-Navigation.html#bindingOfT",
          "type": "function"
        },
        "index": {
          "description": "Find the path to the binding of variable",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "bindingOfT",
          "normalized": "(Var-\u003eBool)-\u003eTranslate a b CoreTC LocalPathH",
          "package": "hermit",
          "partial": "Of",
          "signature": "(Var-\u003eBool)-\u003eTranslate c m CoreTC LocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:bindingOfT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all possible targets of \u003ccode\u003e\u003ca\u003ebindingOfT\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "bindingOfTargetsT",
          "package": "hermit",
          "signature": "Translate c m CoreTC VarSet",
          "source": "src/HERMIT-Dictionary-Navigation.html#bindingOfTargetsT",
          "type": "function"
        },
        "index": {
          "description": "Find all possible targets of bindingOfT",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "bindingOfTargetsT",
          "package": "hermit",
          "partial": "Of Targets",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:bindingOfTargetsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind the path to the first matching construct.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "considerConstructT",
          "package": "hermit",
          "signature": "Considerable -\u003e Translate c m Core LocalPathH",
          "source": "src/HERMIT-Dictionary-Navigation.html#considerConstructT",
          "type": "function"
        },
        "index": {
          "description": "Find the path to the first matching construct",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "considerConstructT",
          "normalized": "Considerable-\u003eTranslate a b Core LocalPathH",
          "package": "hermit",
          "partial": "Construct",
          "signature": "Considerable-\u003eTranslate c m Core LocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:considerConstructT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLookup table for constructs that can be considered; the keys are the arguments the user can give to the \"consider\" command.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "considerables",
          "package": "hermit",
          "signature": "[(String, Considerable)]",
          "source": "src/HERMIT-Dictionary-Navigation.html#considerables",
          "type": "function"
        },
        "index": {
          "description": "Lookup table for constructs that can be considered the keys are the arguments the user can give to the consider command",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "considerables",
          "normalized": "[(String,Considerable)]",
          "package": "hermit",
          "signature": "[(String,Considerable)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:considerables"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es involving navigating to named entities.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Navigation.html#externals",
          "type": "function"
        },
        "index": {
          "description": "External involving navigating to named entities",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConstruct a path to the (n-1)th argument in a nested sequence of \u003ccode\u003e\u003ca\u003eApp\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "nthArgPath",
          "package": "hermit",
          "signature": "Int -\u003e Translate c m CoreExpr LocalPathH",
          "source": "src/HERMIT-Dictionary-Navigation.html#nthArgPath",
          "type": "function"
        },
        "index": {
          "description": "Construct path to the n-1 th argument in nested sequence of App",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "nthArgPath",
          "normalized": "Int-\u003eTranslate a b CoreExpr LocalPathH",
          "package": "hermit",
          "partial": "Arg Path",
          "signature": "Int-\u003eTranslate c m CoreExpr LocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:nthArgPath"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind the path to the first occurrence occurrence of a variable.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "occurrenceOfT",
          "package": "hermit",
          "signature": "(Var -\u003e Bool) -\u003e Translate c m CoreTC LocalPathH",
          "source": "src/HERMIT-Dictionary-Navigation.html#occurrenceOfT",
          "type": "function"
        },
        "index": {
          "description": "Find the path to the first occurrence occurrence of variable",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "occurrenceOfT",
          "normalized": "(Var-\u003eBool)-\u003eTranslate a b CoreTC LocalPathH",
          "package": "hermit",
          "partial": "Of",
          "signature": "(Var-\u003eBool)-\u003eTranslate c m CoreTC LocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:occurrenceOfT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all possible targets of \u003ccode\u003e\u003ca\u003eoccurrenceOfT\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "occurrenceOfTargetsT",
          "package": "hermit",
          "signature": "Translate c m CoreTC VarSet",
          "source": "src/HERMIT-Dictionary-Navigation.html#occurrenceOfTargetsT",
          "type": "function"
        },
        "index": {
          "description": "Find all possible targets of occurrenceOfT",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "occurrenceOfTargetsT",
          "package": "hermit",
          "partial": "Of Targets",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:occurrenceOfTargetsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDiscard the last crumb of a non-empty \u003ccode\u003e\u003ca\u003eLocalPathH\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "parentOfT",
          "package": "hermit",
          "signature": "Translate c m g LocalPathH -\u003e Translate c m g LocalPathH",
          "source": "src/HERMIT-Dictionary-Navigation.html#parentOfT",
          "type": "function"
        },
        "index": {
          "description": "Discard the last crumb of non-empty LocalPathH",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "parentOfT",
          "normalized": "Translate a b c LocalPathH-\u003eTranslate a b c LocalPathH",
          "package": "hermit",
          "partial": "Of",
          "signature": "Translate c m g LocalPathH-\u003eTranslate c m g LocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:parentOfT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind the path to the RHS of a binding.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "rhsOfT",
          "package": "hermit",
          "signature": "(Var -\u003e Bool) -\u003e Translate c m Core LocalPathH",
          "source": "src/HERMIT-Dictionary-Navigation.html#rhsOfT",
          "type": "function"
        },
        "index": {
          "description": "Find the path to the RHS of binding",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "rhsOfT",
          "normalized": "(Var-\u003eBool)-\u003eTranslate a b Core LocalPathH",
          "package": "hermit",
          "partial": "Of",
          "signature": "(Var-\u003eBool)-\u003eTranslate c m Core LocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:rhsOfT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all possible targets of \u003ccode\u003e\u003ca\u003erhsOfT\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "rhsOfTargetsT",
          "package": "hermit",
          "signature": "Translate c m CoreTC VarSet",
          "source": "src/HERMIT-Dictionary-Navigation.html#rhsOfTargetsT",
          "type": "function"
        },
        "index": {
          "description": "Find all possible targets of rhsOfT",
          "hierarchy": "HERMIT Dictionary Navigation",
          "module": "HERMIT.Dictionary.Navigation",
          "name": "rhsOfTargetsT",
          "package": "hermit",
          "partial": "Of Targets",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Navigation.html#v:rhsOfTargetsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.New",
          "name": "New",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-New.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary New",
          "module": "HERMIT.Dictionary.New",
          "name": "New",
          "package": "hermit",
          "partial": "New",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-New.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.New",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-New.html#externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary New",
          "module": "HERMIT.Dictionary.New",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-New.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTest if the current expression is an identifier matching the given name.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.New",
          "name": "isVar",
          "package": "hermit",
          "signature": "Name -\u003e Translate c m CoreExpr ()",
          "source": "src/HERMIT-Dictionary-New.html#isVar",
          "type": "function"
        },
        "index": {
          "description": "Test if the current expression is an identifier matching the given name",
          "hierarchy": "HERMIT Dictionary New",
          "module": "HERMIT.Dictionary.New",
          "name": "isVar",
          "normalized": "Name-\u003eTranslate a b CoreExpr()",
          "package": "hermit",
          "partial": "Var",
          "signature": "Name-\u003eTranslate c m CoreExpr()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-New.html#v:isVar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ebody\u003c/code\u003e ==\u003e \u003ccode\u003elet v = e in body\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.New",
          "name": "letNonRecIntroR",
          "package": "hermit",
          "signature": "String -\u003e CoreString -\u003e RewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-New.html#letNonRecIntroR",
          "type": "function"
        },
        "index": {
          "description": "body let in body",
          "hierarchy": "HERMIT Dictionary New",
          "module": "HERMIT.Dictionary.New",
          "name": "letNonRecIntroR",
          "normalized": "String-\u003eCoreString-\u003eRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Non Rec Intro",
          "signature": "String-\u003eCoreString-\u003eRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-New.html#v:letNonRecIntroR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003eprog\u003c/code\u003e ==\u003e \u003ccode\u003e\u003ccode\u003e\u003ca\u003eProgCons\u003c/a\u003e\u003c/code\u003e (v = e) prog\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.New",
          "name": "progNonRecIntroR",
          "package": "hermit",
          "signature": "String -\u003e CoreString -\u003e RewriteH CoreProg",
          "source": "src/HERMIT-Dictionary-New.html#progNonRecIntroR",
          "type": "function"
        },
        "index": {
          "description": "prog ProgCons prog",
          "hierarchy": "HERMIT Dictionary New",
          "module": "HERMIT.Dictionary.New",
          "name": "progNonRecIntroR",
          "normalized": "String-\u003eCoreString-\u003eRewriteH CoreProg",
          "package": "hermit",
          "partial": "Non Rec Intro",
          "signature": "String-\u003eCoreString-\u003eRewriteH CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-New.html#v:progNonRecIntroR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Query",
          "name": "Query",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Query.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Query",
          "module": "HERMIT.Dictionary.Query",
          "name": "Query",
          "package": "hermit",
          "partial": "Query",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Query.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompare the definitions of two identifiers for alpha-equality.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Query",
          "name": "compareBoundIdsT",
          "package": "hermit",
          "signature": "Id -\u003e Id -\u003e Translate c HermitM x ()",
          "source": "src/HERMIT-Dictionary-Query.html#compareBoundIdsT",
          "type": "function"
        },
        "index": {
          "description": "Compare the definitions of two identifiers for alpha-equality",
          "hierarchy": "HERMIT Dictionary Query",
          "module": "HERMIT.Dictionary.Query",
          "name": "compareBoundIdsT",
          "normalized": "Id-\u003eId-\u003eTranslate a HermitM b()",
          "package": "hermit",
          "partial": "Bound Ids",
          "signature": "Id-\u003eId-\u003eTranslate c HermitM x()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Query.html#v:compareBoundIdsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompare the core fragments at the end of the specified \u003ccode\u003e\u003ca\u003eLocalPathH\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Query",
          "name": "compareCoreAtT",
          "package": "hermit",
          "signature": "Translate c m Core LocalPathH -\u003e Translate c m Core LocalPathH -\u003e Translate c m Core ()",
          "source": "src/HERMIT-Dictionary-Query.html#compareCoreAtT",
          "type": "function"
        },
        "index": {
          "description": "Compare the core fragments at the end of the specified LocalPathH",
          "hierarchy": "HERMIT Dictionary Query",
          "module": "HERMIT.Dictionary.Query",
          "name": "compareCoreAtT",
          "normalized": "Translate a b Core LocalPathH-\u003eTranslate a b Core LocalPathH-\u003eTranslate a b Core()",
          "package": "hermit",
          "partial": "Core At",
          "signature": "Translate c m Core LocalPathH-\u003eTranslate c m Core LocalPathH-\u003eTranslate c m Core()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Query.html#v:compareCoreAtT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals that reflect GHC functions, or are derived from GHC functions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Query",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Query.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals that reflect GHC functions or are derived from GHC functions",
          "hierarchy": "HERMIT Dictionary Query",
          "module": "HERMIT.Dictionary.Query",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Query.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Query",
          "name": "infoT",
          "package": "hermit",
          "signature": "Translate c m CoreTC String",
          "source": "src/HERMIT-Dictionary-Query.html#infoT",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Query",
          "module": "HERMIT.Dictionary.Query",
          "name": "infoT",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Query.html#v:infoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "Reasoning",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Reasoning.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Reasoning",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "Reasoning",
          "package": "hermit",
          "partial": "Reasoning",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Reasoning.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Reasoning.html#externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Reasoning",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Reasoning.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven f :: X -\u003e Y and g :: Y -\u003e X, and a proof that f (g y) ==\u003e y, then f (g y) \u003ca\u003e==\u003c/a\u003e y.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "retractionBR",
          "package": "hermit",
          "signature": "forall c.  Maybe (Rewrite c HermitM CoreExpr) -\u003e CoreExpr -\u003e CoreExpr -\u003e BiRewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Reasoning.html#retractionBR",
          "type": "function"
        },
        "index": {
          "description": "Given and and proof that then",
          "hierarchy": "HERMIT Dictionary Reasoning",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "retractionBR",
          "normalized": "a b Maybe(Rewrite c HermitM CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewrite c HermitM CoreExpr",
          "package": "hermit",
          "partial": "BR",
          "signature": "forall c. Maybe(Rewrite c HermitM CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Reasoning.html#v:retractionBR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven two expressions, and a rewrite from the former to the latter, verify that rewrite.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "verifyEqualityCommonTargetT",
          "package": "hermit",
          "signature": "CoreExpr -\u003e CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Translate c m a ()",
          "source": "src/HERMIT-Dictionary-Reasoning.html#verifyEqualityCommonTargetT",
          "type": "function"
        },
        "index": {
          "description": "Given two expressions and rewrite from the former to the latter verify that rewrite",
          "hierarchy": "HERMIT Dictionary Reasoning",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "verifyEqualityCommonTargetT",
          "normalized": "CoreExpr-\u003eCoreExpr-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr-\u003eTranslate a b c()",
          "package": "hermit",
          "partial": "Equality Common Target",
          "signature": "CoreExpr-\u003eCoreExpr-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr-\u003eTranslate c m a()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Reasoning.html#v:verifyEqualityCommonTargetT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven two expressions, and a rewrite from the former to the latter, verify that rewrite.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "verifyEqualityLeftToRightT",
          "package": "hermit",
          "signature": "CoreExpr -\u003e CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Translate c m a ()",
          "source": "src/HERMIT-Dictionary-Reasoning.html#verifyEqualityLeftToRightT",
          "type": "function"
        },
        "index": {
          "description": "Given two expressions and rewrite from the former to the latter verify that rewrite",
          "hierarchy": "HERMIT Dictionary Reasoning",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "verifyEqualityLeftToRightT",
          "normalized": "CoreExpr-\u003eCoreExpr-\u003eRewrite a b CoreExpr-\u003eTranslate a b c()",
          "package": "hermit",
          "partial": "Equality Left To Right",
          "signature": "CoreExpr-\u003eCoreExpr-\u003eRewrite c m CoreExpr-\u003eTranslate c m a()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Reasoning.html#v:verifyEqualityLeftToRightT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven f :: X -\u003e Y and g :: Y -\u003e X, verify that f (g y) ==\u003e y and g (f x) ==\u003e x.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "verifyIsomorphismT",
          "package": "hermit",
          "signature": "CoreExpr -\u003e CoreExpr -\u003e Rewrite c HermitM CoreExpr -\u003e Rewrite c HermitM CoreExpr -\u003e Translate c HermitM a ()",
          "source": "src/HERMIT-Dictionary-Reasoning.html#verifyIsomorphismT",
          "type": "function"
        },
        "index": {
          "description": "Given and verify that and",
          "hierarchy": "HERMIT Dictionary Reasoning",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "verifyIsomorphismT",
          "normalized": "CoreExpr-\u003eCoreExpr-\u003eRewrite a HermitM CoreExpr-\u003eRewrite a HermitM CoreExpr-\u003eTranslate a HermitM b()",
          "package": "hermit",
          "partial": "Isomorphism",
          "signature": "CoreExpr-\u003eCoreExpr-\u003eRewrite c HermitM CoreExpr-\u003eRewrite c HermitM CoreExpr-\u003eTranslate c HermitM a()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Reasoning.html#v:verifyIsomorphismT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven f :: X -\u003e Y and g :: Y -\u003e X, verify that f (g y) ==\u003e y.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "verifyRetractionT",
          "package": "hermit",
          "signature": "CoreExpr -\u003e CoreExpr -\u003e Rewrite c HermitM CoreExpr -\u003e Translate c HermitM a ()",
          "source": "src/HERMIT-Dictionary-Reasoning.html#verifyRetractionT",
          "type": "function"
        },
        "index": {
          "description": "Given and verify that",
          "hierarchy": "HERMIT Dictionary Reasoning",
          "module": "HERMIT.Dictionary.Reasoning",
          "name": "verifyRetractionT",
          "normalized": "CoreExpr-\u003eCoreExpr-\u003eRewrite a HermitM CoreExpr-\u003eTranslate a HermitM b()",
          "package": "hermit",
          "partial": "Retraction",
          "signature": "CoreExpr-\u003eCoreExpr-\u003eRewrite c HermitM CoreExpr-\u003eTranslate c HermitM a()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Reasoning.html#v:verifyRetractionT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Undefined",
          "name": "Undefined",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Undefined.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "Undefined",
          "package": "hermit",
          "partial": "Undefined",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eerror ty string ==\u003e undefined ty\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "errorToUndefinedR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#errorToUndefinedR",
          "type": "function"
        },
        "index": {
          "description": "error ty string undefined ty",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "errorToUndefinedR",
          "package": "hermit",
          "partial": "To Undefined",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:errorToUndefinedR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Undefined",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Undefined.html#externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCheck if the current expression is an undefined value.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "isUndefinedValT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr ()",
          "source": "src/HERMIT-Dictionary-Undefined.html#isUndefinedValT",
          "type": "function"
        },
        "index": {
          "description": "Check if the current expression is an undefined value",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "isUndefinedValT",
          "normalized": "Translate a b CoreExpr()",
          "package": "hermit",
          "partial": "Undefined Val",
          "signature": "Translate c m CoreExpr()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:isUndefinedValT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMake an undefined value of the given type.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "mkUndefinedValT",
          "package": "hermit",
          "signature": "Type -\u003e Translate c m a CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#mkUndefinedValT",
          "type": "function"
        },
        "index": {
          "description": "Make an undefined value of the given type",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "mkUndefinedValT",
          "normalized": "Type-\u003eTranslate a b c CoreExpr",
          "package": "hermit",
          "partial": "Undefined Val",
          "signature": "Type-\u003eTranslate c m a CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:mkUndefinedValT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSet the current expression to \u003ccode\u003e\u003ca\u003eundefined\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "replaceWithUndefinedR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#replaceWithUndefinedR",
          "type": "function"
        },
        "index": {
          "description": "Set the current expression to undefined",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "replaceWithUndefinedR",
          "package": "hermit",
          "partial": "With Undefined",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:replaceWithUndefinedR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e(undefined ty1) e\u003c/code\u003e ==\u003e \u003ccode\u003eundefined ty2\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedAppR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedAppR",
          "type": "function"
        },
        "index": {
          "description": "undefined ty1 undefined ty2",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedAppR",
          "package": "hermit",
          "partial": "App",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedAppR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ecase e of {pat_1 -\u003e undefined ty ; pat_2 -\u003e undefined ty ; ... ; pat_n -\u003e undefined ty} ==\u003e undefined ty\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedCaseAltsR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedCaseAltsR",
          "type": "function"
        },
        "index": {
          "description": "case of pat undefined ty pat undefined ty pat undefined ty undefined ty",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedCaseAltsR",
          "package": "hermit",
          "partial": "Case Alts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedCaseAltsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eundefinedCaseR = undefinedCaseScrutineeR \u003c+ undefinedCaseAltsR\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedCaseR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedCaseR",
          "type": "function"
        },
        "index": {
          "description": "undefinedCaseR undefinedCaseScrutineeR undefinedCaseAltsR",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedCaseR",
          "package": "hermit",
          "partial": "Case",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedCaseR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ecase (undefined ty) of alts ==\u003e undefined ty\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedCaseScrutineeR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedCaseScrutineeR",
          "type": "function"
        },
        "index": {
          "description": "case undefined ty of alts undefined ty",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedCaseScrutineeR",
          "package": "hermit",
          "partial": "Case Scrutinee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedCaseScrutineeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCast (undefined ty1) co ==\u003e undefined ty2\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedCastR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedCastR",
          "type": "function"
        },
        "index": {
          "description": "Cast undefined ty1 co undefined ty2",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedCastR",
          "package": "hermit",
          "partial": "Cast",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedCastR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eundefinedExprR = undefinedAppR \u003c+ undefinedLamR \u003c+ undefinedLetR \u003c+ undefinedCastR \u003c+ undefinedTickR \u003c+ undefinedCaseR\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedExprR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedExprR",
          "type": "function"
        },
        "index": {
          "description": "undefinedExprR undefinedAppR undefinedLamR undefinedLetR undefinedCastR undefinedTickR undefinedCaseR",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedExprR",
          "package": "hermit",
          "partial": "Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedExprR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e( v -\u003e undefined ty1)\u003c/code\u003e ==\u003e \u003ccode\u003eundefined ty2\u003c/code\u003e  (where v is not a \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedLamR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedLamR",
          "type": "function"
        },
        "index": {
          "description": "undefined ty1 undefined ty2 where is not TyVar",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedLamR",
          "package": "hermit",
          "partial": "Lam",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedLamR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003elet bds in (undefined ty) ==\u003e undefined ty\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedLetR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedLetR",
          "type": "function"
        },
        "index": {
          "description": "let bds in undefined ty undefined ty",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedLetR",
          "package": "hermit",
          "partial": "Let",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedLetR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTick tick (undefined ty1) ==\u003e undefined ty1\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedTickR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Undefined.html#undefinedTickR",
          "type": "function"
        },
        "index": {
          "description": "Tick tick undefined ty1 undefined ty1",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "undefinedTickR",
          "package": "hermit",
          "partial": "Tick",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:undefinedTickR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eVerify that the given rewrite is a proof that the given expression is a strict function.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "verifyStrictT",
          "package": "hermit",
          "signature": "CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Translate c m a ()",
          "source": "src/HERMIT-Dictionary-Undefined.html#verifyStrictT",
          "type": "function"
        },
        "index": {
          "description": "Verify that the given rewrite is proof that the given expression is strict function",
          "hierarchy": "HERMIT Dictionary Undefined",
          "module": "HERMIT.Dictionary.Undefined",
          "name": "verifyStrictT",
          "normalized": "CoreExpr-\u003eRewrite a b CoreExpr-\u003eTranslate a b c()",
          "package": "hermit",
          "partial": "Strict",
          "signature": "CoreExpr-\u003eRewrite c m CoreExpr-\u003eTranslate c m a()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Undefined.html#v:verifyStrictT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unfold",
          "name": "Unfold",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Unfold.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "Unfold",
          "package": "hermit",
          "partial": "Unfold",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ecleanupUnfoldR cleans a unfold operation\n  (for example, an inline or rule application)\n It is used at the level of the top-redex.\n Invariant: will not introduce let bindings\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "cleanupUnfoldR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr",
          "source": "src/HERMIT-Dictionary-Unfold.html#cleanupUnfoldR",
          "type": "function"
        },
        "index": {
          "description": "cleanupUnfoldR cleans unfold operation for example an inline or rule application It is used at the level of the top-redex Invariant will not introduce let bindings",
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "cleanupUnfoldR",
          "package": "hermit",
          "partial": "Unfold",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:cleanupUnfoldR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unfold",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Unfold.html#externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eStash a binding with a name for later use.\n Allows us to look at past definitions.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "rememberR",
          "package": "hermit",
          "signature": "Label -\u003e Rewrite c HermitM Core",
          "source": "src/HERMIT-Dictionary-Unfold.html#rememberR",
          "type": "function"
        },
        "index": {
          "description": "Stash binding with name for later use Allows us to look at past definitions",
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "rememberR",
          "normalized": "Label-\u003eRewrite a HermitM Core",
          "package": "hermit",
          "signature": "Label-\u003eRewrite c HermitM Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:rememberR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unfold",
          "name": "showStashT",
          "package": "hermit",
          "signature": "PrettyC -\u003e PrettyH a -\u003e Translate c HermitM a DocH",
          "source": "src/HERMIT-Dictionary-Unfold.html#showStashT",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "showStashT",
          "normalized": "PrettyC-\u003ePrettyH a-\u003eTranslate b HermitM a DocH",
          "package": "hermit",
          "partial": "Stash",
          "signature": "PrettyC-\u003ePrettyH a-\u003eTranslate c HermitM a DocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:showStashT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unfold",
          "name": "specializeR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Unfold.html#specializeR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "specializeR",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:specializeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldNameR",
          "package": "hermit",
          "signature": "Name -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Unfold.html#unfoldNameR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldNameR",
          "normalized": "Name-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Name",
          "signature": "Name-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:unfoldNameR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldNamesR",
          "package": "hermit",
          "signature": "[Name] -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Unfold.html#unfoldNamesR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldNamesR",
          "normalized": "[Name]-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Names",
          "signature": "[Name]-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:unfoldNamesR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldPredR",
          "package": "hermit",
          "signature": "(Id -\u003e [CoreExpr] -\u003e Bool) -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Unfold.html#unfoldPredR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldPredR",
          "normalized": "(Id-\u003e[CoreExpr]-\u003eBool)-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Pred",
          "signature": "(Id-\u003e[CoreExpr]-\u003eBool)-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:unfoldPredR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA more powerful \u003ccode\u003einline\u003c/code\u003e. Matches two cases:\n      Var ==\u003e inlines\n      App ==\u003e inlines the head of the function call for the app tree\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Unfold.html#unfoldR",
          "type": "function"
        },
        "index": {
          "description": "more powerful inline Matches two cases Var inlines App inlines the head of the function call for the app tree",
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldR",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:unfoldR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldSaturatedR",
          "package": "hermit",
          "signature": "Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Unfold.html#unfoldSaturatedR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldSaturatedR",
          "package": "hermit",
          "partial": "Saturated",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:unfoldSaturatedR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eStash a binding with a name for later use.\n Allows us to look at past definitions.\n rememberR :: String -\u003e Translate c m Core ()\n rememberR label = contextfreeT $  core -\u003e\n     case core of\n         DefCore def -\u003e saveDef label def\n         BindCore (NonRec i e) -\u003e saveDef label (Def i e)\n         _           -\u003e fail \u003ca\u003eremember: not a binding\u003c/a\u003e\n\u003c/p\u003e\u003cp\u003eApply a stashed definition (like inline, but looks in stash instead of context).\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldStashR",
          "package": "hermit",
          "signature": "String -\u003e Rewrite c HermitM CoreExpr",
          "source": "src/HERMIT-Dictionary-Unfold.html#unfoldStashR",
          "type": "function"
        },
        "index": {
          "description": "Stash binding with name for later use Allows us to look at past definitions rememberR String Translate Core rememberR label contextfreeT core case core of DefCore def saveDef label def BindCore NonRec saveDef label Def fail remember not binding Apply stashed definition like inline but looks in stash instead of context",
          "hierarchy": "HERMIT Dictionary Unfold",
          "module": "HERMIT.Dictionary.Unfold",
          "name": "unfoldStashR",
          "normalized": "String-\u003eRewrite a HermitM CoreExpr",
          "package": "hermit",
          "partial": "Stash",
          "signature": "String-\u003eRewrite c HermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unfold.html#v:unfoldStashR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unsafe",
          "name": "Unsafe",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-Unsafe.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unsafe",
          "module": "HERMIT.Dictionary.Unsafe",
          "name": "Unsafe",
          "package": "hermit",
          "partial": "Unsafe",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unsafe.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unsafe",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-Unsafe.html#externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unsafe",
          "module": "HERMIT.Dictionary.Unsafe",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unsafe.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unsafe",
          "name": "unsafeReplaceR",
          "package": "hermit",
          "signature": "CoreString -\u003e RewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-Unsafe.html#unsafeReplaceR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unsafe",
          "module": "HERMIT.Dictionary.Unsafe",
          "name": "unsafeReplaceR",
          "normalized": "CoreString-\u003eRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Replace",
          "signature": "CoreString-\u003eRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unsafe.html#v:unsafeReplaceR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.Unsafe",
          "name": "unsafeReplaceStashR",
          "package": "hermit",
          "signature": "String -\u003e RewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-Unsafe.html#unsafeReplaceStashR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary Unsafe",
          "module": "HERMIT.Dictionary.Unsafe",
          "name": "unsafeReplaceStashR",
          "normalized": "String-\u003eRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Replace Stash",
          "signature": "String-\u003eRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-Unsafe.html#v:unsafeReplaceStashR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "Common",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Common.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Common",
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "Common",
          "package": "hermit",
          "partial": "Common",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Common.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "WWAssumption",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Common.html#WWAssumption",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Common",
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "WWAssumption",
          "package": "hermit",
          "partial": "WWAssumption",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Common.html#t:WWAssumption"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "WWAssumptionTag",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Common.html#WWAssumptionTag",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Common",
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "WWAssumptionTag",
          "package": "hermit",
          "partial": "WWAssumption Tag",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Common.html#t:WWAssumptionTag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "A",
          "package": "hermit",
          "signature": "A",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Common.html#WWAssumptionTag",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Common",
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "A",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Common.html#v:A"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "B",
          "package": "hermit",
          "signature": "B",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Common.html#WWAssumptionTag",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Common",
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "B",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Common.html#v:B"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "C",
          "package": "hermit",
          "signature": "C",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Common.html#WWAssumptionTag",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Common",
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "C",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Common.html#v:C"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "WWAssumption",
          "package": "hermit",
          "signature": "WWAssumption WWAssumptionTag (RewriteH CoreExpr)",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Common.html#WWAssumption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Common",
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "WWAssumption",
          "package": "hermit",
          "partial": "WWAssumption",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Common.html#v:WWAssumption"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "workLabel",
          "package": "hermit",
          "signature": "Label",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Common.html#workLabel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Common",
          "module": "HERMIT.Dictionary.WorkerWrapper.Common",
          "name": "workLabel",
          "package": "hermit",
          "partial": "Label",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Common.html#v:workLabel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "Fix",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Fix.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "Fix",
          "package": "hermit",
          "partial": "Fix",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals for manipulating fixed points, and for the worker/wrapper transformation.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Fix.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals for manipulating fixed points and for the worker wrapper transformation",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ewrap (unwrap a)\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ea\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwAssA",
          "package": "hermit",
          "signature": "Maybe (RewriteH CoreExpr)-\u003e CoreExpr-\u003e CoreExpr-\u003e BiRewriteH CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "wrap unwrap",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwAssA",
          "normalized": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Ass",
          "signature": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:wwAssA"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ewrap (unwrap (f a))\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ef a\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwAssB",
          "package": "hermit",
          "signature": "Maybe (RewriteH CoreExpr)-\u003e CoreExpr-\u003e CoreExpr-\u003e CoreExpr-\u003e BiRewriteH CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "wrap unwrap",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwAssB",
          "normalized": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Ass",
          "signature": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:wwAssB"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003efix A ( a -\u003e wrap (unwrap (f a)))\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003efix A f\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwAssC",
          "package": "hermit",
          "signature": "Maybe (RewriteH CoreExpr)-\u003e CoreExpr-\u003e CoreExpr-\u003e CoreExpr-\u003e BiRewriteH CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "fix wrap unwrap fix",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwAssC",
          "normalized": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Ass",
          "signature": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:wwAssC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFor any \u003ccode\u003ef :: A -\u003e A\u003c/code\u003e, and given \u003ccode\u003ewrap :: B -\u003e A\u003c/code\u003e and \u003ccode\u003eunwrap :: A -\u003e B\u003c/code\u003e as arguments, then\n   \u003ccode\u003efix A f\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ewrap (fix B (\\ b -\u003e unwrap (f (wrap b))))\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwFacBR",
          "package": "hermit",
          "signature": "Maybe WWAssumption -\u003e CoreExpr -\u003e CoreExpr -\u003e BiRewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Fix.html#wwFacBR",
          "type": "function"
        },
        "index": {
          "description": "For any and given wrap and unwrap as arguments then fix wrap fix unwrap wrap",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwFacBR",
          "normalized": "Maybe WWAssumption-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Fac BR",
          "signature": "Maybe WWAssumption-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:wwFacBR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven \u003ccode\u003ewrap :: B -\u003e A\u003c/code\u003e, \u003ccode\u003eunwrap :: A -\u003e B\u003c/code\u003e and \u003ccode\u003ework :: B\u003c/code\u003e as arguments, then\n   \u003ccode\u003eunwrap (wrap work)\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ework\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwFusionBR",
          "package": "hermit",
          "signature": "BiRewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Fix.html#wwFusionBR",
          "type": "function"
        },
        "index": {
          "description": "Given wrap unwrap and work as arguments then unwrap wrap work work",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwFusionBR",
          "package": "hermit",
          "partial": "Fusion BR",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:wwFusionBR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSave the recursive definition of work in the stash, so that we can later verify uses of \u003ccode\u003e\u003ca\u003ewwFusionBR\u003c/a\u003e\u003c/code\u003e.\n   Must be applied to a definition of the form: \u003ccode\u003ework = unwrap (f (wrap work))\u003c/code\u003e\n   Note that this is performed automatically as part of \u003ccode\u003e\u003ca\u003ewwSplitR\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwGenerateFusionR",
          "package": "hermit",
          "signature": "Maybe WWAssumption -\u003e RewriteH Core",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Fix.html#wwGenerateFusionR",
          "type": "function"
        },
        "index": {
          "description": "Save the recursive definition of work in the stash so that we can later verify uses of wwFusionBR Must be applied to definition of the form work unwrap wrap work Note that this is performed automatically as part of wwSplitR",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwGenerateFusionR",
          "normalized": "Maybe WWAssumption-\u003eRewriteH Core",
          "package": "hermit",
          "partial": "Generate Fusion",
          "signature": "Maybe WWAssumption-\u003eRewriteH Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:wwGenerateFusionR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\\ wrap unwrap -\u003e  (\u003ccode\u003eprog = expr\u003c/code\u003e  ==\u003e  \u003ccode\u003eprog = let f = \\ prog -\u003e expr in let work = unwrap (f (wrap work)) in wrap work)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwSplitR",
          "package": "hermit",
          "signature": "Maybe WWAssumption -\u003e CoreExpr -\u003e CoreExpr -\u003e RewriteH CoreDef",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Fix.html#wwSplitR",
          "type": "function"
        },
        "index": {
          "description": "wrap unwrap prog expr prog let prog expr in let work unwrap wrap work in wrap work",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwSplitR",
          "normalized": "Maybe WWAssumption-\u003eCoreExpr-\u003eCoreExpr-\u003eRewriteH CoreDef",
          "package": "hermit",
          "partial": "Split",
          "signature": "Maybe WWAssumption-\u003eCoreExpr-\u003eCoreExpr-\u003eRewriteH CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:wwSplitR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAs \u003ccode\u003ewwSplit\u003c/code\u003e but performs the static-argument transformation for \u003ccode\u003en\u003c/code\u003e static arguments first, and optionally provides some of those arguments (specified by index) to all calls of wrap and unwrap.\n   This is useful if, for example, the expression, and wrap and unwrap, all have a \u003ccode\u003eforall\u003c/code\u003e type.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwSplitStaticArg",
          "package": "hermit",
          "signature": "Int -\u003e [Int] -\u003e Maybe WWAssumption -\u003e CoreString -\u003e CoreString -\u003e RewriteH CoreDef",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-Fix.html#wwSplitStaticArg",
          "type": "function"
        },
        "index": {
          "description": "As wwSplit but performs the static-argument transformation for static arguments first and optionally provides some of those arguments specified by index to all calls of wrap and unwrap This is useful if for example the expression and wrap and unwrap all have forall type",
          "hierarchy": "HERMIT Dictionary WorkerWrapper Fix",
          "module": "HERMIT.Dictionary.WorkerWrapper.Fix",
          "name": "wwSplitStaticArg",
          "normalized": "Int-\u003e[Int]-\u003eMaybe WWAssumption-\u003eCoreString-\u003eCoreString-\u003eRewriteH CoreDef",
          "package": "hermit",
          "partial": "Split Static Arg",
          "signature": "Int-\u003e[Int]-\u003eMaybe WWAssumption-\u003eCoreString-\u003eCoreString-\u003eRewriteH CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-Fix.html#v:wwSplitStaticArg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "FixResult",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-FixResult.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "FixResult",
          "package": "hermit",
          "partial": "Fix Result",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eExternals for manipulating fixed points, and for the worker/wrapper transformation.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-FixResult.html#externals",
          "type": "function"
        },
        "index": {
          "description": "Externals for manipulating fixed points and for the worker wrapper transformation",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003eabs (rep a)\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ea\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultAssA",
          "package": "hermit",
          "signature": "Maybe (RewriteH CoreExpr)-\u003e CoreExpr-\u003e CoreExpr-\u003e BiRewriteH CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "abs rep",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultAssA",
          "normalized": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Result Ass",
          "signature": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:wwResultAssA"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003eabs (rep (f h x))\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ef h x\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultAssB",
          "package": "hermit",
          "signature": "Maybe (RewriteH CoreExpr)-\u003e CoreExpr-\u003e CoreExpr-\u003e CoreExpr-\u003e BiRewriteH CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "abs rep",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultAssB",
          "normalized": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Result Ass",
          "signature": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:wwResultAssB"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003efix (X-\u003eA) ( h x -\u003e abs (rep (f h x)))\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003efix (X-\u003eA) f\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultAssC",
          "package": "hermit",
          "signature": "Maybe (RewriteH CoreExpr)-\u003e CoreExpr-\u003e CoreExpr-\u003e CoreExpr-\u003e BiRewriteH CoreExpr",
          "type": "function"
        },
        "index": {
          "description": "fix abs rep fix",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultAssC",
          "normalized": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Result Ass",
          "signature": "Maybe(RewriteH CoreExpr)-\u003eCoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:wwResultAssC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFor any \u003ccode\u003ef :: (X -\u003e A) -\u003e (X -\u003e A)\u003c/code\u003e, and given \u003ccode\u003eabs :: B -\u003e A\u003c/code\u003e and \u003ccode\u003erep :: A -\u003e B\u003c/code\u003e as arguments, then\n   \u003ccode\u003efix A f\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003e\\ x1 -\u003e abs (fix (X-\u003eB) (\\ h x2 -\u003e rep (f (\\ x3 -\u003e abs (h x3)) x2)) x1)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultFacBR",
          "package": "hermit",
          "signature": "Maybe WWAssumption -\u003e CoreExpr -\u003e CoreExpr -\u003e BiRewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-FixResult.html#wwResultFacBR",
          "type": "function"
        },
        "index": {
          "description": "For any and given abs and rep as arguments then fix x1 abs fix x2 rep x3 abs x3 x2 x1",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultFacBR",
          "normalized": "Maybe WWAssumption-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "package": "hermit",
          "partial": "Result Fac BR",
          "signature": "Maybe WWAssumption-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:wwResultFacBR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven \u003ccode\u003eabs :: B -\u003e A\u003c/code\u003e, \u003ccode\u003erep :: A -\u003e B\u003c/code\u003e and \u003ccode\u003ework :: X -\u003e B\u003c/code\u003e as arguments, then\n   \u003ccode\u003erep (abs (work x))\u003c/code\u003e  \u003c==\u003e  \u003ccode\u003ework x\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultFusionBR",
          "package": "hermit",
          "signature": "BiRewriteH CoreExpr",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-FixResult.html#wwResultFusionBR",
          "type": "function"
        },
        "index": {
          "description": "Given abs rep and work as arguments then rep abs work work",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultFusionBR",
          "package": "hermit",
          "partial": "Result Fusion BR",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:wwResultFusionBR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSave the recursive definition of work in the stash, so that we can later verify uses of \u003ccode\u003e\u003ca\u003ewwResultFusionBR\u003c/a\u003e\u003c/code\u003e.\n   Must be applied to a definition of the form: \u003ccode\u003ework = \\ x1 -\u003e rep (f (\\ x2 -\u003e abs (work x2)) x1)\u003c/code\u003e\n   Note that this is performed automatically as part of \u003ccode\u003e\u003ca\u003ewwResultSplitR\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultGenerateFusionR",
          "package": "hermit",
          "signature": "Maybe WWAssumption -\u003e RewriteH Core",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-FixResult.html#wwResultGenerateFusionR",
          "type": "function"
        },
        "index": {
          "description": "Save the recursive definition of work in the stash so that we can later verify uses of wwResultFusionBR Must be applied to definition of the form work x1 rep x2 abs work x2 x1 Note that this is performed automatically as part of wwResultSplitR",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultGenerateFusionR",
          "normalized": "Maybe WWAssumption-\u003eRewriteH Core",
          "package": "hermit",
          "partial": "Result Generate Fusion",
          "signature": "Maybe WWAssumption-\u003eRewriteH Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:wwResultGenerateFusionR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\\ abs rep -\u003e (\u003ccode\u003eprog = expr\u003c/code\u003e  ==\u003e  \u003ccode\u003eprog = let f = \\ prog -\u003e expr in let work = \\ x1 -\u003e rep (f (\\ x2 -\u003e abs (work x2)) x1) in \\ x0 -\u003e abs (work x0)\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultSplitR",
          "package": "hermit",
          "signature": "Maybe WWAssumption -\u003e CoreExpr -\u003e CoreExpr -\u003e RewriteH CoreDef",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-FixResult.html#wwResultSplitR",
          "type": "function"
        },
        "index": {
          "description": "abs rep prog expr prog let prog expr in let work x1 rep x2 abs work x2 x1 in x0 abs work x0",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultSplitR",
          "normalized": "Maybe WWAssumption-\u003eCoreExpr-\u003eCoreExpr-\u003eRewriteH CoreDef",
          "package": "hermit",
          "partial": "Result Split",
          "signature": "Maybe WWAssumption-\u003eCoreExpr-\u003eCoreExpr-\u003eRewriteH CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:wwResultSplitR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAs \u003ccode\u003ewwSplit\u003c/code\u003e but performs the static-argument transformation for \u003ccode\u003en\u003c/code\u003e static arguments first, and optionally provides some of those arguments (specified by index) to all calls of abs and rep.\n   This is useful if, for example, the expression, and abs and rep, all have a \u003ccode\u003eforall\u003c/code\u003e type.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultSplitStaticArg",
          "package": "hermit",
          "signature": "Int -\u003e [Int] -\u003e Maybe WWAssumption -\u003e CoreString -\u003e CoreString -\u003e RewriteH CoreDef",
          "source": "src/HERMIT-Dictionary-WorkerWrapper-FixResult.html#wwResultSplitStaticArg",
          "type": "function"
        },
        "index": {
          "description": "As wwSplit but performs the static-argument transformation for static arguments first and optionally provides some of those arguments specified by index to all calls of abs and rep This is useful if for example the expression and abs and rep all have forall type",
          "hierarchy": "HERMIT Dictionary WorkerWrapper FixResult",
          "module": "HERMIT.Dictionary.WorkerWrapper.FixResult",
          "name": "wwResultSplitStaticArg",
          "normalized": "Int-\u003e[Int]-\u003eMaybe WWAssumption-\u003eCoreString-\u003eCoreString-\u003eRewriteH CoreDef",
          "package": "hermit",
          "partial": "Result Split Static Arg",
          "signature": "Int-\u003e[Int]-\u003eMaybe WWAssumption-\u003eCoreString-\u003eCoreString-\u003eRewriteH CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary-WorkerWrapper-FixResult.html#v:wwResultSplitStaticArg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Dictionary",
          "name": "Dictionary",
          "package": "hermit",
          "source": "src/HERMIT-Dictionary.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Dictionary",
          "module": "HERMIT.Dictionary",
          "name": "Dictionary",
          "package": "hermit",
          "partial": "Dictionary",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList of all \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es provided by HERMIT.\n\u003c/p\u003e",
          "module": "HERMIT.Dictionary",
          "name": "externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Dictionary.html#externals",
          "type": "function"
        },
        "index": {
          "description": "List of all External provided by HERMIT",
          "hierarchy": "HERMIT Dictionary",
          "module": "HERMIT.Dictionary",
          "name": "externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Dictionary.html#v:externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Driver",
          "name": "Driver",
          "package": "hermit",
          "source": "src/HERMIT-Driver.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Driver",
          "module": "HERMIT.Driver",
          "name": "Driver",
          "package": "hermit",
          "partial": "Driver",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Driver.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Driver",
          "name": "ghcFlags",
          "package": "hermit",
          "signature": "[String]",
          "source": "src/HERMIT-Driver.html#ghcFlags",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Driver",
          "module": "HERMIT.Driver",
          "name": "ghcFlags",
          "normalized": "[String]",
          "package": "hermit",
          "partial": "Flags",
          "signature": "[String]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Driver.html#v:ghcFlags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Driver",
          "name": "hermit_version",
          "package": "hermit",
          "signature": "String",
          "source": "src/HERMIT-Driver.html#hermit_version",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Driver",
          "module": "HERMIT.Driver",
          "name": "hermit_version",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Driver.html#v:hermit_version"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "External",
          "package": "hermit",
          "source": "src/HERMIT-External.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "External",
          "package": "hermit",
          "partial": "External",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "BiRewriteCoreBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#BiRewriteCoreBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "BiRewriteCoreBox",
          "package": "hermit",
          "partial": "Bi Rewrite Core Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:BiRewriteCoreBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRequirement: commands cannot have the same name as any \u003ccode\u003e\u003ca\u003eCmdTag\u003c/a\u003e\u003c/code\u003e\n   (or the help function will not find it).\n   These should be \u003cem\u003euser facing\u003c/em\u003e, because they give the user\n   a way of sub-dividing our confusing array of commands.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "CmdTag",
          "package": "hermit",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "data"
        },
        "index": {
          "description": "Requirement commands cannot have the same name as any CmdTag or the help function will not find it These should be user facing because they give the user way of sub-dividing our confusing array of commands",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "CmdTag",
          "package": "hermit",
          "partial": "Cmd Tag",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:CmdTag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "CoreBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#CoreBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "CoreBox",
          "package": "hermit",
          "partial": "Core Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:CoreBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "CoreString",
          "package": "hermit",
          "source": "src/HERMIT-External.html#CoreString",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "CoreString",
          "package": "hermit",
          "partial": "Core String",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:CoreString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "CrumbBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#CrumbBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "CrumbBox",
          "package": "hermit",
          "partial": "Crumb Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:CrumbBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA \u003ccode\u003e\u003ca\u003eDictionary\u003c/a\u003e\u003c/code\u003e is a collection of \u003ccode\u003e\u003ca\u003eDynamic\u003c/a\u003e\u003c/code\u003es.\n   Looking up a \u003ccode\u003e\u003ca\u003eDynamic\u003c/a\u003e\u003c/code\u003e (via an \u003ccode\u003e\u003ca\u003eExternalName\u003c/a\u003e\u003c/code\u003e key) returns a list, as there can be multiple \u003ccode\u003e\u003ca\u003eDynamic\u003c/a\u003e\u003c/code\u003es with the same name.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Dictionary",
          "package": "hermit",
          "source": "src/HERMIT-External.html#Dictionary",
          "type": "type"
        },
        "index": {
          "description": "Dictionary is collection of Dynamic Looking up Dynamic via an ExternalName key returns list as there can be multiple Dynamic with the same name",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Dictionary",
          "package": "hermit",
          "partial": "Dictionary",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:Dictionary"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe class of things that can be made into \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es.\n   To be an \u003ccode\u003e\u003ca\u003eExtern\u003c/a\u003e\u003c/code\u003e there must exist an isomorphic \u003ccode\u003e\u003ca\u003eBox\u003c/a\u003e\u003c/code\u003e type that is an instance of \u003ccode\u003e\u003ca\u003eTypeable\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Extern",
          "package": "hermit",
          "source": "src/HERMIT-External.html#Extern",
          "type": "class"
        },
        "index": {
          "description": "The class of things that can be made into External To be an Extern there must exist an isomorphic Box type that is an instance of Typeable",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Extern",
          "package": "hermit",
          "partial": "Extern",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:Extern"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e is a \u003ccode\u003e\u003ca\u003eDynamic\u003c/a\u003e\u003c/code\u003e value with some associated meta-data (name, help string and tags).\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "External",
          "package": "hermit",
          "source": "src/HERMIT-External.html#External",
          "type": "data"
        },
        "index": {
          "description": "An External is Dynamic value with some associated meta-data name help string and tags",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "External",
          "package": "hermit",
          "partial": "External",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:External"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHelp information for \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es is stored as a list of strings, designed for multi-line displaying.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "ExternalHelp",
          "package": "hermit",
          "source": "src/HERMIT-External.html#ExternalHelp",
          "type": "type"
        },
        "index": {
          "description": "Help information for External is stored as list of strings designed for multi-line displaying",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "ExternalHelp",
          "package": "hermit",
          "partial": "External Help",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:ExternalHelp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e names are just strings.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "ExternalName",
          "package": "hermit",
          "source": "src/HERMIT-External.html#ExternalName",
          "type": "type"
        },
        "index": {
          "description": "External names are just strings",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "ExternalName",
          "package": "hermit",
          "partial": "External Name",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:ExternalName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "IntBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#IntBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "IntBox",
          "package": "hermit",
          "partial": "Int Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:IntBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "IntListBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#IntListBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "IntListBox",
          "package": "hermit",
          "partial": "Int List Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:IntListBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "NameBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#NameBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "NameBox",
          "package": "hermit",
          "partial": "Name Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:NameBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "NameListBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#NameListBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "NameListBox",
          "package": "hermit",
          "partial": "Name List Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:NameListBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "PathBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#PathBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "PathBox",
          "package": "hermit",
          "partial": "Path Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:PathBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "RewriteCoreBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#RewriteCoreBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "RewriteCoreBox",
          "package": "hermit",
          "partial": "Rewrite Core Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:RewriteCoreBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "RewriteCoreListBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#RewriteCoreListBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "RewriteCoreListBox",
          "package": "hermit",
          "partial": "Rewrite Core List Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:RewriteCoreListBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "RewriteCoreTCBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#RewriteCoreTCBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "RewriteCoreTCBox",
          "package": "hermit",
          "partial": "Rewrite Core TCBox",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:RewriteCoreTCBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "StringBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#StringBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "StringBox",
          "package": "hermit",
          "partial": "String Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:StringBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "StringListBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#StringListBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "StringListBox",
          "package": "hermit",
          "partial": "String List Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:StringListBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTags are meta-data that we add to \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es to make them sortable and searchable.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Tag",
          "package": "hermit",
          "source": "src/HERMIT-External.html#Tag",
          "type": "class"
        },
        "index": {
          "description": "Tags are meta-data that we add to External to make them sortable and searchable",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Tag",
          "package": "hermit",
          "partial": "Tag",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:Tag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TagBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#TagBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TagBox",
          "package": "hermit",
          "partial": "Tag Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:TagBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA data type of logical operations on tags.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "TagE",
          "package": "hermit",
          "source": "src/HERMIT-External.html#TagE",
          "type": "data"
        },
        "index": {
          "description": "data type of logical operations on tags",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TagE",
          "package": "hermit",
          "partial": "Tag",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:TagE"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreCheckBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#TranslateCoreCheckBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreCheckBox",
          "package": "hermit",
          "partial": "Translate Core Check Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:TranslateCoreCheckBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCorePathBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#TranslateCorePathBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCorePathBox",
          "package": "hermit",
          "partial": "Translate Core Path Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:TranslateCorePathBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreStringBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#TranslateCoreStringBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreStringBox",
          "package": "hermit",
          "partial": "Translate Core String Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:TranslateCoreStringBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreTCCheckBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#TranslateCoreTCCheckBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreTCCheckBox",
          "package": "hermit",
          "partial": "Translate Core TCCheck Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:TranslateCoreTCCheckBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreTCPathBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#TranslateCoreTCPathBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreTCPathBox",
          "package": "hermit",
          "partial": "Translate Core TCPath Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:TranslateCoreTCPathBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreTCStringBox",
          "package": "hermit",
          "source": "src/HERMIT-External.html#TranslateCoreTCStringBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreTCStringBox",
          "package": "hermit",
          "partial": "Translate Core TCString Box",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#t:TranslateCoreTCStringBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn \"or\" on \u003ccode\u003e\u003ca\u003eTag\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "(.||)",
          "package": "hermit",
          "signature": "a -\u003e b -\u003e TagE",
          "source": "src/HERMIT-External.html#.%7C%7C",
          "type": "function"
        },
        "index": {
          "description": "An or on Tag",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "(.||) .||",
          "normalized": "a-\u003eb-\u003eTagE",
          "package": "hermit",
          "signature": "a-\u003eb-\u003eTagE",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:.-124--124-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn \"and\" on \u003ccode\u003e\u003ca\u003eTag\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "(.&)",
          "package": "hermit",
          "signature": "a -\u003e b -\u003e TagE",
          "source": "src/HERMIT-External.html#.%26",
          "type": "function"
        },
        "index": {
          "description": "An and on Tag",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "(.&) .&",
          "normalized": "a-\u003eb-\u003eTagE",
          "package": "hermit",
          "signature": "a-\u003eb-\u003eTagE",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:.-38-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd a \u003ccode\u003e\u003ca\u003eTag\u003c/a\u003e\u003c/code\u003e to an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "(.+)",
          "package": "hermit",
          "signature": "External -\u003e a -\u003e External",
          "source": "src/HERMIT-External.html#.%2B",
          "type": "method"
        },
        "index": {
          "description": "Add Tag to an External",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "(.+) .+",
          "normalized": "External-\u003ea-\u003eExternal",
          "package": "hermit",
          "signature": "External-\u003ea-\u003eExternal",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:.-43-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "BiRewriteCoreBox",
          "package": "hermit",
          "signature": "BiRewriteCoreBox (BiRewriteH Core)",
          "source": "src/HERMIT-External.html#BiRewriteCoreBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "BiRewriteCoreBox",
          "package": "hermit",
          "partial": "Bi Rewrite Core Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:BiRewriteCoreBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommute is when you swap nested terms.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Commute",
          "package": "hermit",
          "signature": "Commute",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Commute is when you swap nested terms",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Commute",
          "package": "hermit",
          "partial": "Commute",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Commute"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA command that uses its context, such as inlining.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Context",
          "package": "hermit",
          "signature": "Context",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "command that uses its context such as inlining",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Context",
          "package": "hermit",
          "partial": "Context",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Context"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "CoreBox",
          "package": "hermit",
          "signature": "CoreBox CoreString",
          "source": "src/HERMIT-External.html#CoreBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "CoreBox",
          "package": "hermit",
          "partial": "Core Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:CoreBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "CoreString",
          "package": "hermit",
          "signature": "CoreString",
          "source": "src/HERMIT-External.html#CoreString",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "CoreString",
          "package": "hermit",
          "partial": "Core String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:CoreString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "CrumbBox",
          "package": "hermit",
          "signature": "CrumbBox Crumb",
          "source": "src/HERMIT-External.html#CrumbBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "CrumbBox",
          "package": "hermit",
          "partial": "Crumb Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:CrumbBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommands specifically to help debugging.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Debug",
          "package": "hermit",
          "signature": "Debug",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Commands specifically to help debugging",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Debug",
          "package": "hermit",
          "partial": "Debug",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Debug"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommand may make a deep change, can be O(n).\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Deep",
          "package": "hermit",
          "signature": "Deep",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Command may make deep change can be",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Deep",
          "package": "hermit",
          "partial": "Deep",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Deep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA command that will be removed in a future release;\n   it has probably been renamed or subsumed by another command.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Deprecated",
          "package": "hermit",
          "signature": "Deprecated",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "command that will be removed in future release it has probably been renamed or subsumed by another command",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Deprecated",
          "package": "hermit",
          "partial": "Deprecated",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Deprecated"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe arrow of evaluation (reduces a term).\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Eval",
          "package": "hermit",
          "signature": "Eval",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "The arrow of evaluation reduces term",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Eval",
          "package": "hermit",
          "partial": "Eval",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Eval"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThings we are trying out.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Experiment",
          "package": "hermit",
          "signature": "Experiment",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Things we are trying out",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Experiment",
          "package": "hermit",
          "partial": "Experiment",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Experiment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "IntBox",
          "package": "hermit",
          "signature": "IntBox Int",
          "source": "src/HERMIT-External.html#IntBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "IntBox",
          "package": "hermit",
          "partial": "Int Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:IntBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "IntListBox",
          "package": "hermit",
          "signature": "IntListBox [Int]",
          "source": "src/HERMIT-External.html#IntListBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "IntListBox",
          "normalized": "IntListBox[Int]",
          "package": "hermit",
          "partial": "Int List Box",
          "signature": "IntListBox[Int]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:IntListBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIntroduce something, like a new name.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Introduce",
          "package": "hermit",
          "signature": "Introduce",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Introduce something like new name",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Introduce",
          "package": "hermit",
          "partial": "Introduce",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Introduce"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ca\u003eKURE\u003c/a\u003e\u003c/code\u003e command.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "KURE",
          "package": "hermit",
          "signature": "KURE",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "KURE command",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "KURE",
          "package": "hermit",
          "partial": "KURE",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:KURE"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommand may operate multiple times.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Loop",
          "package": "hermit",
          "signature": "Loop",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Command may operate multiple times",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Loop",
          "package": "hermit",
          "partial": "Loop",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Loop"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "NameBox",
          "package": "hermit",
          "signature": "NameBox Name",
          "source": "src/HERMIT-External.html#NameBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "NameBox",
          "package": "hermit",
          "partial": "Name Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:NameBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "NameListBox",
          "package": "hermit",
          "signature": "NameListBox [Name]",
          "source": "src/HERMIT-External.html#NameListBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "NameListBox",
          "normalized": "NameListBox[Name]",
          "package": "hermit",
          "partial": "Name List Box",
          "signature": "NameListBox[Name]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:NameListBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUses \u003ccode\u003e\u003ca\u003ePath\u003c/a\u003e\u003c/code\u003e or \u003ccode\u003e\u003ca\u003eLens\u003c/a\u003e\u003c/code\u003e to focus onto something.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Navigation",
          "package": "hermit",
          "signature": "Navigation",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Uses Path or Lens to focus onto something",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Navigation",
          "package": "hermit",
          "partial": "Navigation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Navigation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "PathBox",
          "package": "hermit",
          "signature": "PathBox LocalPathH",
          "source": "src/HERMIT-External.html#PathBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "PathBox",
          "package": "hermit",
          "partial": "Path Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:PathBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOperation has a (perhaps undocumented) precondition.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "PreCondition",
          "package": "hermit",
          "signature": "PreCondition",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Operation has perhaps undocumented precondition",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "PreCondition",
          "package": "hermit",
          "partial": "Pre Condition",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:PreCondition"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSomething that passes or fails.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Predicate",
          "package": "hermit",
          "signature": "Predicate",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Something that passes or fails",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Predicate",
          "package": "hermit",
          "partial": "Predicate",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Predicate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA question we ask.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Query",
          "package": "hermit",
          "signature": "Query",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "question we ask",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Query",
          "package": "hermit",
          "partial": "Query",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Query"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "RewriteCoreBox",
          "package": "hermit",
          "signature": "RewriteCoreBox (RewriteH Core)",
          "source": "src/HERMIT-External.html#RewriteCoreBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "RewriteCoreBox",
          "package": "hermit",
          "partial": "Rewrite Core Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:RewriteCoreBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "RewriteCoreListBox",
          "package": "hermit",
          "signature": "RewriteCoreListBox [RewriteH Core]",
          "source": "src/HERMIT-External.html#RewriteCoreListBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "RewriteCoreListBox",
          "normalized": "RewriteCoreListBox[RewriteH Core]",
          "package": "hermit",
          "partial": "Rewrite Core List Box",
          "signature": "RewriteCoreListBox[RewriteH Core]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:RewriteCoreListBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "RewriteCoreTCBox",
          "package": "hermit",
          "signature": "RewriteCoreTCBox (RewriteH CoreTC)",
          "source": "src/HERMIT-External.html#RewriteCoreTCBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "RewriteCoreTCBox",
          "package": "hermit",
          "partial": "Rewrite Core TCBox",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:RewriteCoreTCBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommand operates on local nodes only, O(1).\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Shallow",
          "package": "hermit",
          "signature": "Shallow",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Command operates on local nodes only",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Shallow",
          "package": "hermit",
          "partial": "Shallow",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Shallow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShell-specific command.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Shell",
          "package": "hermit",
          "signature": "Shell",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Shell-specific command",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Shell",
          "package": "hermit",
          "partial": "Shell",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Shell"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "StringBox",
          "package": "hermit",
          "signature": "StringBox String",
          "source": "src/HERMIT-External.html#StringBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "StringBox",
          "package": "hermit",
          "partial": "String Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:StringBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "StringListBox",
          "package": "hermit",
          "signature": "StringListBox [String]",
          "source": "src/HERMIT-External.html#StringListBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "StringListBox",
          "normalized": "StringListBox[String]",
          "package": "hermit",
          "partial": "String List Box",
          "signature": "StringListBox[String]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:StringListBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn incomplete or potentially buggy command.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "TODO",
          "package": "hermit",
          "signature": "TODO",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "An incomplete or potentially buggy command",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TODO",
          "package": "hermit",
          "partial": "TODO",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:TODO"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TagBox",
          "package": "hermit",
          "signature": "TagBox TagE",
          "source": "src/HERMIT-External.html#TagBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TagBox",
          "package": "hermit",
          "partial": "Tag Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:TagBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreCheckBox",
          "package": "hermit",
          "signature": "TranslateCoreCheckBox (TranslateH Core ())",
          "source": "src/HERMIT-External.html#TranslateCoreCheckBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreCheckBox",
          "normalized": "TranslateCoreCheckBox(TranslateH Core())",
          "package": "hermit",
          "partial": "Translate Core Check Box",
          "signature": "TranslateCoreCheckBox(TranslateH Core())",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:TranslateCoreCheckBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCorePathBox",
          "package": "hermit",
          "signature": "TranslateCorePathBox (TranslateH Core LocalPathH)",
          "source": "src/HERMIT-External.html#TranslateCorePathBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCorePathBox",
          "package": "hermit",
          "partial": "Translate Core Path Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:TranslateCorePathBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreStringBox",
          "package": "hermit",
          "signature": "TranslateCoreStringBox (TranslateH Core String)",
          "source": "src/HERMIT-External.html#TranslateCoreStringBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreStringBox",
          "package": "hermit",
          "partial": "Translate Core String Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:TranslateCoreStringBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreTCCheckBox",
          "package": "hermit",
          "signature": "TranslateCoreTCCheckBox (TranslateH CoreTC ())",
          "source": "src/HERMIT-External.html#TranslateCoreTCCheckBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreTCCheckBox",
          "normalized": "TranslateCoreTCCheckBox(TranslateH CoreTC())",
          "package": "hermit",
          "partial": "Translate Core TCCheck Box",
          "signature": "TranslateCoreTCCheckBox(TranslateH CoreTC())",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:TranslateCoreTCCheckBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreTCPathBox",
          "package": "hermit",
          "signature": "TranslateCoreTCPathBox (TranslateH CoreTC LocalPathH)",
          "source": "src/HERMIT-External.html#TranslateCoreTCPathBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreTCPathBox",
          "package": "hermit",
          "partial": "Translate Core TCPath Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:TranslateCoreTCPathBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "TranslateCoreTCStringBox",
          "package": "hermit",
          "signature": "TranslateCoreTCStringBox (TranslateH CoreTC String)",
          "source": "src/HERMIT-External.html#TranslateCoreTCStringBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "TranslateCoreTCStringBox",
          "package": "hermit",
          "partial": "Translate Core TCString Box",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:TranslateCoreTCStringBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommands that are not type safe (may cause Core Lint to fail),\n   or may otherwise change the semantics of the program.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "Unsafe",
          "package": "hermit",
          "signature": "Unsafe",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Commands that are not type safe may cause Core Lint to fail or may otherwise change the semantics of the program",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "Unsafe",
          "package": "hermit",
          "partial": "Unsafe",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:Unsafe"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eVersion control for Core syntax.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "VersionControl",
          "package": "hermit",
          "signature": "VersionControl",
          "source": "src/HERMIT-External.html#CmdTag",
          "type": "function"
        },
        "index": {
          "description": "Version control for Core syntax",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "VersionControl",
          "package": "hermit",
          "partial": "Version Control",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:VersionControl"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWrap a value in a \u003ccode\u003e\u003ca\u003eBox\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "box",
          "package": "hermit",
          "signature": "a -\u003e Box a",
          "source": "src/HERMIT-External.html#box",
          "type": "method"
        },
        "index": {
          "description": "Wrap value in Box",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "box",
          "normalized": "a-\u003eBox a",
          "package": "hermit",
          "signature": "a-\u003eBox a",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:box"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLists all the tags paired with a short description of what they're about.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "dictionaryOfTags",
          "package": "hermit",
          "signature": "[(CmdTag, String)]",
          "source": "src/HERMIT-External.html#dictionaryOfTags",
          "type": "function"
        },
        "index": {
          "description": "Lists all the tags paired with short description of what they re about",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "dictionaryOfTags",
          "normalized": "[(CmdTag,String)]",
          "package": "hermit",
          "partial": "Of Tags",
          "signature": "[(CmdTag,String)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:dictionaryOfTags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet the \u003ccode\u003e\u003ca\u003eDynamic\u003c/a\u003e\u003c/code\u003e value stored in an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "externDyn",
          "package": "hermit",
          "signature": "External -\u003e Dynamic",
          "source": "src/HERMIT-External.html#externDyn",
          "type": "function"
        },
        "index": {
          "description": "Get the Dynamic value stored in an External",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "externDyn",
          "normalized": "External-\u003eDynamic",
          "package": "hermit",
          "partial": "Dyn",
          "signature": "External-\u003eDynamic",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:externDyn"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet the list of help \u003ccode\u003e\u003ca\u003eString\u003c/a\u003e\u003c/code\u003es for an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "externHelp",
          "package": "hermit",
          "signature": "External -\u003e ExternalHelp",
          "source": "src/HERMIT-External.html#externHelp",
          "type": "function"
        },
        "index": {
          "description": "Get the list of help String for an External",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "externHelp",
          "normalized": "External-\u003eExternalHelp",
          "package": "hermit",
          "partial": "Help",
          "signature": "External-\u003eExternalHelp",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:externHelp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet the name of an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "externName",
          "package": "hermit",
          "signature": "External -\u003e ExternalName",
          "source": "src/HERMIT-External.html#externName",
          "type": "function"
        },
        "index": {
          "description": "Get the name of an External",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "externName",
          "normalized": "External-\u003eExternalName",
          "package": "hermit",
          "partial": "Name",
          "signature": "External-\u003eExternalName",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:externName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList all the \u003ccode\u003e\u003ca\u003eCmdTag\u003c/a\u003e\u003c/code\u003es associated with an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "externTags",
          "package": "hermit",
          "signature": "External -\u003e [CmdTag]",
          "source": "src/HERMIT-External.html#externTags",
          "type": "function"
        },
        "index": {
          "description": "List all the CmdTag associated with an External",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "externTags",
          "normalized": "External-\u003e[CmdTag]",
          "package": "hermit",
          "partial": "Tags",
          "signature": "External-\u003e[CmdTag]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:externTags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "externTypeArgResString",
          "package": "hermit",
          "signature": "External -\u003e ([String], String)",
          "source": "src/HERMIT-External.html#externTypeArgResString",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "externTypeArgResString",
          "normalized": "External-\u003e([String],String)",
          "package": "hermit",
          "partial": "Type Arg Res String",
          "signature": "External-\u003e([String],String)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:externTypeArgResString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet a string representation of the (monomorphic) type of an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "externTypeString",
          "package": "hermit",
          "signature": "External -\u003e String",
          "source": "src/HERMIT-External.html#externTypeString",
          "type": "function"
        },
        "index": {
          "description": "Get string representation of the monomorphic type of an External",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "externTypeString",
          "normalized": "External-\u003eString",
          "package": "hermit",
          "partial": "Type String",
          "signature": "External-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:externTypeString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe primitive way to build an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "external",
          "package": "hermit",
          "signature": "ExternalName -\u003e a -\u003e ExternalHelp -\u003e External",
          "source": "src/HERMIT-External.html#external",
          "type": "function"
        },
        "index": {
          "description": "The primitive way to build an External",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "external",
          "normalized": "ExternalName-\u003ea-\u003eExternalHelp-\u003eExternal",
          "package": "hermit",
          "signature": "ExternalName-\u003ea-\u003eExternalHelp-\u003eExternal",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:external"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet all the \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es which match a given tag predicate\n and box a Translate of the appropriate type.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "matchingExternals",
          "package": "hermit",
          "signature": "t -\u003e [External] -\u003e [(External, tr)]",
          "source": "src/HERMIT-External.html#matchingExternals",
          "type": "function"
        },
        "index": {
          "description": "Get all the External which match given tag predicate and box Translate of the appropriate type",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "matchingExternals",
          "normalized": "a-\u003e[External]-\u003e[(External,b)]",
          "package": "hermit",
          "partial": "Externals",
          "signature": "t-\u003e[External]-\u003e[(External,tr)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:matchingExternals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA \"not\" on \u003ccode\u003e\u003ca\u003eTag\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "notT",
          "package": "hermit",
          "signature": "a -\u003e TagE",
          "source": "src/HERMIT-External.html#notT",
          "type": "function"
        },
        "index": {
          "description": "not on Tag",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "notT",
          "normalized": "a-\u003eTagE",
          "package": "hermit",
          "signature": "a-\u003eTagE",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:notT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRemove a \u003ccode\u003e\u003ca\u003eTag\u003c/a\u003e\u003c/code\u003e from an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "remTag",
          "package": "hermit",
          "signature": "a -\u003e External -\u003e External",
          "source": "src/HERMIT-External.html#remTag",
          "type": "method"
        },
        "index": {
          "description": "Remove Tag from an External",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "remTag",
          "normalized": "a-\u003eExternal-\u003eExternal",
          "package": "hermit",
          "partial": "Tag",
          "signature": "a-\u003eExternal-\u003eExternal",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:remTag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCheck if an \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003e has the specified \u003ccode\u003e\u003ca\u003eTag\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "tagMatch",
          "package": "hermit",
          "signature": "a -\u003e External -\u003e Bool",
          "source": "src/HERMIT-External.html#tagMatch",
          "type": "method"
        },
        "index": {
          "description": "Check if an External has the specified Tag",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "tagMatch",
          "normalized": "a-\u003eExternal-\u003eBool",
          "package": "hermit",
          "partial": "Match",
          "signature": "a-\u003eExternal-\u003eBool",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:tagMatch"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eBuild a \u003ccode\u003e\u003ca\u003eMap\u003c/a\u003e\u003c/code\u003e from names to \u003ccode\u003e\u003ca\u003eDynamic\u003c/a\u003e\u003c/code\u003e values.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "toDictionary",
          "package": "hermit",
          "signature": "[External] -\u003e Dictionary",
          "source": "src/HERMIT-External.html#toDictionary",
          "type": "function"
        },
        "index": {
          "description": "Build Map from names to Dynamic values",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "toDictionary",
          "normalized": "[External]-\u003eDictionary",
          "package": "hermit",
          "partial": "Dictionary",
          "signature": "[External]-\u003eDictionary",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:toDictionary"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eBuild a \u003ccode\u003e\u003ca\u003eMap\u003c/a\u003e\u003c/code\u003e from names to help information.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "toHelp",
          "package": "hermit",
          "signature": "[External] -\u003e Map ExternalName ExternalHelp",
          "source": "src/HERMIT-External.html#toHelp",
          "type": "function"
        },
        "index": {
          "description": "Build Map from names to help information",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "toHelp",
          "normalized": "[External]-\u003eMap ExternalName ExternalHelp",
          "package": "hermit",
          "partial": "Help",
          "signature": "[External]-\u003eMap ExternalName ExternalHelp",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:toHelp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.External",
          "name": "unCoreString",
          "package": "hermit",
          "signature": "String",
          "source": "src/HERMIT-External.html#CoreString",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "unCoreString",
          "package": "hermit",
          "partial": "Core String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:unCoreString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUnwrap a value from a \u003ccode\u003e\u003ca\u003eBox\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.External",
          "name": "unbox",
          "package": "hermit",
          "signature": "Box a -\u003e a",
          "source": "src/HERMIT-External.html#unbox",
          "type": "method"
        },
        "index": {
          "description": "Unwrap value from Box",
          "hierarchy": "HERMIT External",
          "module": "HERMIT.External",
          "name": "unbox",
          "normalized": "Box a-\u003ea",
          "package": "hermit",
          "signature": "Box a-\u003ea",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-External.html#v:unbox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "GHC",
          "package": "hermit",
          "source": "src/HERMIT-GHC.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "GHC",
          "package": "hermit",
          "partial": "GHC",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGHC's own exception type\n   error messages all take the form:\n\u003c/p\u003e\u003cpre\u003e\n      \u003ca\u003elocation\u003c/a\u003e: \u003ca\u003eerror\u003c/a\u003e\n\u003c/pre\u003e\u003cp\u003eIf the location is on the command line, or in GHC itself, then\n   \u003ca\u003elocation\u003c/a\u003e=\u003ca\u003eghc\u003c/a\u003e.  All of the error types below correspond to\n   a \u003ca\u003elocation\u003c/a\u003e of \u003ca\u003eghc\u003c/a\u003e, except for ProgramError (where the string is\n  assumed to contain a location already, so we don't print one).\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "GhcException",
          "package": "hermit",
          "type": "data"
        },
        "index": {
          "description": "GHC own exception type error messages all take the form location error If the location is on the command line or in GHC itself then location ghc All of the error types below correspond to location of ghc except for ProgramError where the string is assumed to contain location already so we don print one",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "GhcException",
          "package": "hermit",
          "partial": "Ghc Exception",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#t:GhcException"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "Pair",
          "package": "hermit",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "Pair",
          "package": "hermit",
          "partial": "Pair",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#t:Pair"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "TyLit",
          "package": "hermit",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "TyLit",
          "package": "hermit",
          "partial": "Ty Lit",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#t:TyLit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe key representation of types within the compiler\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "Type",
          "package": "hermit",
          "type": "data"
        },
        "index": {
          "description": "The key representation of types within the compiler",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "Type",
          "package": "hermit",
          "partial": "Type",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#t:Type"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eType application to something other than a \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e. Parameters:\n\u003c/p\u003e\u003cp\u003e1) Function: must \u003cem\u003enot\u003c/em\u003e be a \u003ccode\u003e\u003ca\u003eTyConApp\u003c/a\u003e\u003c/code\u003e,\n     must be another \u003ccode\u003e\u003ca\u003eAppTy\u003c/a\u003e\u003c/code\u003e, or \u003ccode\u003e\u003ca\u003eTyVarTy\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e\u003cp\u003e2) Argument type\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "AppTy",
          "package": "hermit",
          "signature": "AppTy Type Type",
          "type": "function"
        },
        "index": {
          "description": "Type application to something other than TyCon Parameters Function must not be TyConApp must be another AppTy or TyVarTy Argument type",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "AppTy",
          "package": "hermit",
          "partial": "App Ty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:AppTy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA polymorphic type\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "ForAllTy",
          "package": "hermit",
          "signature": "ForAllTy Var Type",
          "type": "function"
        },
        "index": {
          "description": "polymorphic type",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "ForAllTy",
          "package": "hermit",
          "partial": "For All Ty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:ForAllTy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSpecial case of \u003ccode\u003e\u003ca\u003eTyConApp\u003c/a\u003e\u003c/code\u003e: \u003ccode\u003eTyConApp FunTyCon [t1, t2]\u003c/code\u003e\n See Note [Equality-constrained types]\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "FunTy",
          "package": "hermit",
          "signature": "FunTy Type Type",
          "type": "function"
        },
        "index": {
          "description": "Special case of TyConApp TyConApp FunTyCon t1 t2 See Note Equality-constrained types",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "FunTy",
          "package": "hermit",
          "partial": "Fun Ty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:FunTy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eType literals are simillar to type constructors.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "LitTy",
          "package": "hermit",
          "signature": "LitTy TyLit",
          "type": "function"
        },
        "index": {
          "description": "Type literals are simillar to type constructors",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "LitTy",
          "package": "hermit",
          "partial": "Lit Ty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:LitTy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "NumTyLit",
          "package": "hermit",
          "signature": "NumTyLit Integer",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "NumTyLit",
          "package": "hermit",
          "partial": "Num Ty Lit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:NumTyLit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "Pair",
          "package": "hermit",
          "signature": "Pair",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "Pair",
          "package": "hermit",
          "partial": "Pair",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:Pair"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn error in the user's code, probably.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "ProgramError",
          "package": "hermit",
          "signature": "ProgramError String",
          "type": "function"
        },
        "index": {
          "description": "An error in the user code probably",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "ProgramError",
          "package": "hermit",
          "partial": "Program Error",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:ProgramError"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "StrTyLit",
          "package": "hermit",
          "signature": "StrTyLit FastString",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "StrTyLit",
          "package": "hermit",
          "partial": "Str Ty Lit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:StrTyLit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApplication of a \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e, including newtypes \u003cem\u003eand\u003c/em\u003e synonyms.\n Invariant: saturated appliations of \u003ccode\u003eFunTyCon\u003c/code\u003e must\n use \u003ccode\u003e\u003ca\u003eFunTy\u003c/a\u003e\u003c/code\u003e and saturated synonyms must use their own\n constructors. However, \u003cem\u003eunsaturated\u003c/em\u003e \u003ccode\u003eFunTyCon\u003c/code\u003es\n do appear as \u003ccode\u003e\u003ca\u003eTyConApp\u003c/a\u003e\u003c/code\u003es.\n Parameters:\n\u003c/p\u003e\u003cp\u003e1) Type constructor being applied to.\n\u003c/p\u003e\u003cp\u003e2) Type arguments. Might not have enough type arguments\n    here to saturate the constructor.\n    Even type synonyms are not necessarily saturated;\n    for example unsaturated type synonyms\n    can appear as the right hand side of a type synonym.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "TyConApp",
          "package": "hermit",
          "signature": "TyConApp TyCon [KindOrType]",
          "type": "function"
        },
        "index": {
          "description": "Application of TyCon including newtypes and synonyms Invariant saturated appliations of FunTyCon must use FunTy and saturated synonyms must use their own constructors However unsaturated FunTyCon do appear as TyConApp Parameters Type constructor being applied to Type arguments Might not have enough type arguments here to saturate the constructor Even type synonyms are not necessarily saturated for example unsaturated type synonyms can appear as the right hand side of type synonym",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "TyConApp",
          "normalized": "TyConApp TyCon[KindOrType]",
          "package": "hermit",
          "partial": "Ty Con App",
          "signature": "TyConApp TyCon[KindOrType]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:TyConApp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eVanilla type or kind variable (*never* a coercion variable)\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "TyVarTy",
          "package": "hermit",
          "signature": "TyVarTy Var",
          "type": "function"
        },
        "index": {
          "description": "Vanilla type or kind variable never coercion variable",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "TyVarTy",
          "package": "hermit",
          "partial": "Ty Var Ty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:TyVarTy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "alphaTyVars",
          "package": "hermit",
          "signature": "[TyVar]",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "alphaTyVars",
          "normalized": "[TyVar]",
          "package": "hermit",
          "partial": "Ty Vars",
          "signature": "[TyVar]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:alphaTyVars"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "bndrRuleAndUnfoldingVars",
          "package": "hermit",
          "signature": "Var -\u003e VarSet",
          "source": "src/HERMIT-GHC.html#bndrRuleAndUnfoldingVars",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "bndrRuleAndUnfoldingVars",
          "normalized": "Var-\u003eVarSet",
          "package": "hermit",
          "partial": "Rule And Unfolding Vars",
          "signature": "Var-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:bndrRuleAndUnfoldingVars"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompare a \u003ccode\u003e\u003ca\u003eString\u003c/a\u003e\u003c/code\u003e to a \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e for equality.\n Strings containing a period are assumed to be fully qualified names.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "cmpString2Name",
          "package": "hermit",
          "signature": "String -\u003e Name -\u003e Bool",
          "source": "src/HERMIT-GHC.html#cmpString2Name",
          "type": "function"
        },
        "index": {
          "description": "Compare String to Name for equality Strings containing period are assumed to be fully qualified names",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "cmpString2Name",
          "normalized": "String-\u003eName-\u003eBool",
          "package": "hermit",
          "partial": "String Name",
          "signature": "String-\u003eName-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:cmpString2Name"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompare a \u003ccode\u003e\u003ca\u003eString\u003c/a\u003e\u003c/code\u003e to a \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e for equality. See \u003ccode\u003e\u003ca\u003ecmpString2Name\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "cmpString2Var",
          "package": "hermit",
          "signature": "String -\u003e Var -\u003e Bool",
          "source": "src/HERMIT-GHC.html#cmpString2Var",
          "type": "function"
        },
        "index": {
          "description": "Compare String to Var for equality See cmpString2Name",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "cmpString2Var",
          "normalized": "String-\u003eVar-\u003eBool",
          "package": "hermit",
          "partial": "String Var",
          "signature": "String-\u003eVar-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:cmpString2Var"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompare a \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e to a \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e for equality. See \u003ccode\u003e\u003ca\u003ecmpString2Name\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "cmpTHName2Name",
          "package": "hermit",
          "signature": "Name -\u003e Name -\u003e Bool",
          "source": "src/HERMIT-GHC.html#cmpTHName2Name",
          "type": "function"
        },
        "index": {
          "description": "Compare Name to Name for equality See cmpString2Name",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "cmpTHName2Name",
          "normalized": "Name-\u003eName-\u003eBool",
          "package": "hermit",
          "partial": "THName Name",
          "signature": "Name-\u003eName-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:cmpTHName2Name"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompare a \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e to a \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e for equality. See \u003ccode\u003e\u003ca\u003ecmpString2Name\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "cmpTHName2Var",
          "package": "hermit",
          "signature": "Name -\u003e Var -\u003e Bool",
          "source": "src/HERMIT-GHC.html#cmpTHName2Var",
          "type": "function"
        },
        "index": {
          "description": "Compare Name to Var for equality See cmpString2Name",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "cmpTHName2Var",
          "normalized": "Name-\u003eVar-\u003eBool",
          "package": "hermit",
          "partial": "THName Var",
          "signature": "Name-\u003eVar-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:cmpTHName2Var"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn approximate, fast, version of \u003ccode\u003e\u003ca\u003eexprEtaExpandArity\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "exprArity",
          "package": "hermit",
          "signature": "CoreExpr -\u003e Arity",
          "type": "function"
        },
        "index": {
          "description": "An approximate fast version of exprEtaExpandArity",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "exprArity",
          "normalized": "CoreExpr-\u003eArity",
          "package": "hermit",
          "partial": "Arity",
          "signature": "CoreExpr-\u003eArity",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:exprArity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRecover the type of a well-typed Core expression. Fails when\n applied to the actual \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e expression as it cannot\n really be said to have a type\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "exprType",
          "package": "hermit",
          "signature": "CoreExpr -\u003e Type",
          "source": "src/HERMIT-GHC.html#exprType",
          "type": "function"
        },
        "index": {
          "description": "Recover the type of well-typed Core expression Fails when applied to the actual Type expression as it cannot really be said to have type",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "exprType",
          "normalized": "CoreExpr-\u003eType",
          "package": "hermit",
          "partial": "Type",
          "signature": "CoreExpr-\u003eType",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:exprType"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003es matching a given fully qualified or unqualified name.\n If given name is fully qualified, will only return first result, which is assumed unique.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "findNamesFromString",
          "package": "hermit",
          "signature": "GlobalRdrEnv -\u003e String -\u003e [Name]",
          "source": "src/HERMIT-GHC.html#findNamesFromString",
          "type": "function"
        },
        "index": {
          "description": "Find Name matching given fully qualified or unqualified name If given name is fully qualified will only return first result which is assumed unique",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "findNamesFromString",
          "normalized": "GlobalRdrEnv-\u003eString-\u003e[Name]",
          "package": "hermit",
          "partial": "Names From String",
          "signature": "GlobalRdrEnv-\u003eString-\u003e[Name]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:findNamesFromString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003es matching a \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e. See \u003ccode\u003e\u003ca\u003efindNamesFromString\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "findNamesFromTH",
          "package": "hermit",
          "signature": "GlobalRdrEnv -\u003e Name -\u003e [Name]",
          "source": "src/HERMIT-GHC.html#findNamesFromTH",
          "type": "function"
        },
        "index": {
          "description": "Find Name matching Name See findNamesFromString",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "findNamesFromTH",
          "normalized": "GlobalRdrEnv-\u003eName-\u003e[Name]",
          "package": "hermit",
          "partial": "Names From TH",
          "signature": "GlobalRdrEnv-\u003eName-\u003e[Name]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:findNamesFromTH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet the fully qualified name from a \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "fqName",
          "package": "hermit",
          "signature": "Name -\u003e String",
          "source": "src/HERMIT-GHC.html#fqName",
          "type": "function"
        },
        "index": {
          "description": "Get the fully qualified name from Name",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "fqName",
          "normalized": "Name-\u003eString",
          "package": "hermit",
          "partial": "Name",
          "signature": "Name-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:fqName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIs this a kind (i.e. a type-of-types)?\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "isKind",
          "package": "hermit",
          "signature": "Kind -\u003e Bool",
          "type": "function"
        },
        "index": {
          "description": "Is this kind i.e type-of-types",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "isKind",
          "normalized": "Kind-\u003eBool",
          "package": "hermit",
          "partial": "Kind",
          "signature": "Kind-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:isKind"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "isLiftedTypeKindCon",
          "package": "hermit",
          "signature": "TyCon -\u003e Bool",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "isLiftedTypeKindCon",
          "normalized": "TyCon-\u003eBool",
          "package": "hermit",
          "partial": "Lifted Type Kind Con",
          "signature": "TyCon-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:isLiftedTypeKindCon"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "liftIO",
          "package": "hermit",
          "signature": "forall a.  IO a -\u003e m a",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "liftIO",
          "normalized": "a b IO c-\u003ed c",
          "package": "hermit",
          "partial": "IO",
          "signature": "forall a. IO a-\u003em a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:liftIO"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConverts a GHC \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e to a Template Haskell \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e, going via a \u003ccode\u003e\u003ca\u003eString\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "name2THName",
          "package": "hermit",
          "signature": "Name -\u003e Name",
          "source": "src/HERMIT-GHC.html#name2THName",
          "type": "function"
        },
        "index": {
          "description": "Converts GHC Name to Template Haskell Name going via String",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "name2THName",
          "normalized": "Name-\u003eName",
          "package": "hermit",
          "partial": "THName",
          "signature": "Name-\u003eName",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:name2THName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDetermine if a \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e is not an element of a \u003ccode\u003e\u003ca\u003eVarSet\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "notElemVarSet",
          "package": "hermit",
          "signature": "Var -\u003e VarSet -\u003e Bool",
          "source": "src/HERMIT-GHC.html#notElemVarSet",
          "type": "function"
        },
        "index": {
          "description": "Determine if Var is not an element of VarSet",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "notElemVarSet",
          "normalized": "Var-\u003eVarSet-\u003eBool",
          "package": "hermit",
          "partial": "Elem Var Set",
          "signature": "Var-\u003eVarSet-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:notElemVarSet"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "occurAnalyseExpr",
          "package": "hermit",
          "signature": "CoreExpr -\u003e CoreExpr",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "occurAnalyseExpr",
          "normalized": "CoreExpr-\u003eCoreExpr",
          "package": "hermit",
          "partial": "Analyse Expr",
          "signature": "CoreExpr-\u003eCoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:occurAnalyseExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "pFst",
          "package": "hermit",
          "signature": "a",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "pFst",
          "package": "hermit",
          "partial": "Fst",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:pFst"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "pSnd",
          "package": "hermit",
          "signature": "a",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "pSnd",
          "package": "hermit",
          "partial": "Snd",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:pSnd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePretty-print an identifier.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "ppIdInfo",
          "package": "hermit",
          "signature": "Id -\u003e IdInfo -\u003e SDoc",
          "source": "src/HERMIT-GHC.html#ppIdInfo",
          "type": "function"
        },
        "index": {
          "description": "Pretty-print an identifier",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "ppIdInfo",
          "normalized": "Id-\u003eIdInfo-\u003eSDoc",
          "package": "hermit",
          "partial": "Id Info",
          "signature": "Id-\u003eIdInfo-\u003eSDoc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:ppIdInfo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShow a human-readable version of a \u003ccode\u003e\u003ca\u003eVarSet\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "showVarSet",
          "package": "hermit",
          "signature": "VarSet -\u003e String",
          "source": "src/HERMIT-GHC.html#showVarSet",
          "type": "function"
        },
        "index": {
          "description": "Show human-readable version of VarSet",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "showVarSet",
          "normalized": "VarSet-\u003eString",
          "package": "hermit",
          "partial": "Var Set",
          "signature": "VarSet-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:showVarSet"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "thRdrNameGuesses",
          "package": "hermit",
          "signature": "Name -\u003e [RdrName]",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "thRdrNameGuesses",
          "normalized": "Name-\u003e[RdrName]",
          "package": "hermit",
          "partial": "Rdr Name Guesses",
          "signature": "Name-\u003e[RdrName]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:thRdrNameGuesses"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.GHC",
          "name": "throwGhcException",
          "package": "hermit",
          "signature": "GhcException -\u003e a",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "throwGhcException",
          "normalized": "GhcException-\u003ea",
          "package": "hermit",
          "partial": "Ghc Exception",
          "signature": "GhcException-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:throwGhcException"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet the unqualified name from a \u003ccode\u003e\u003ca\u003eNamedThing\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "uqName",
          "package": "hermit",
          "signature": "nm -\u003e String",
          "source": "src/HERMIT-GHC.html#uqName",
          "type": "function"
        },
        "index": {
          "description": "Get the unqualified name from NamedThing",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "uqName",
          "normalized": "a-\u003eString",
          "package": "hermit",
          "partial": "Name",
          "signature": "nm-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:uqName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConvert a variable to a neat string for printing (unqualfied name).\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "var2String",
          "package": "hermit",
          "signature": "Var -\u003e String",
          "source": "src/HERMIT-GHC.html#var2String",
          "type": "function"
        },
        "index": {
          "description": "Convert variable to neat string for printing unqualfied name",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "var2String",
          "normalized": "Var-\u003eString",
          "package": "hermit",
          "partial": "String",
          "signature": "Var-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:var2String"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConverts an \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e to a Template Haskell \u003ccode\u003e\u003ca\u003eName\u003c/a\u003e\u003c/code\u003e, going via a \u003ccode\u003e\u003ca\u003eString\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "var2THName",
          "package": "hermit",
          "signature": "Var -\u003e Name",
          "source": "src/HERMIT-GHC.html#var2THName",
          "type": "function"
        },
        "index": {
          "description": "Converts an Var to Template Haskell Name going via String",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "var2THName",
          "normalized": "Var-\u003eName",
          "package": "hermit",
          "partial": "THName",
          "signature": "Var-\u003eName",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:var2THName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConvert a \u003ccode\u003e\u003ca\u003eVarSet\u003c/a\u003e\u003c/code\u003e to a list of user-readable strings.\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "varSetToStrings",
          "package": "hermit",
          "signature": "VarSet -\u003e [String]",
          "source": "src/HERMIT-GHC.html#varSetToStrings",
          "type": "function"
        },
        "index": {
          "description": "Convert VarSet to list of user-readable strings",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "varSetToStrings",
          "normalized": "VarSet-\u003e[String]",
          "package": "hermit",
          "partial": "Set To Strings",
          "signature": "VarSet-\u003e[String]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:varSetToStrings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eErase all \u003ccode\u003e\u003ca\u003eOccInfo\u003c/a\u003e\u003c/code\u003e in a variable if it is is an \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, or do nothing if it's a \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e or \u003ccode\u003e\u003ca\u003eCoVar\u003c/a\u003e\u003c/code\u003e (which have no \u003ccode\u003e\u003ca\u003eOccInfo\u003c/a\u003e\u003c/code\u003e).\n\u003c/p\u003e",
          "module": "HERMIT.GHC",
          "name": "zapVarOccInfo",
          "package": "hermit",
          "signature": "Var -\u003e Var",
          "source": "src/HERMIT-GHC.html#zapVarOccInfo",
          "type": "function"
        },
        "index": {
          "description": "Erase all OccInfo in variable if it is is an Id or do nothing if it TyVar or CoVar which have no OccInfo",
          "hierarchy": "HERMIT GHC",
          "module": "HERMIT.GHC",
          "name": "zapVarOccInfo",
          "normalized": "Var-\u003eVar",
          "package": "hermit",
          "partial": "Var Occ Info",
          "signature": "Var-\u003eVar",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-GHC.html#v:zapVarOccInfo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Interp",
          "name": "Interp",
          "package": "hermit",
          "source": "src/HERMIT-Interp.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Interp",
          "module": "HERMIT.Interp",
          "name": "Interp",
          "package": "hermit",
          "partial": "Interp",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Interp.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn \u003ccode\u003e\u003ca\u003eInterp\u003c/a\u003e\u003c/code\u003e \u003ccode\u003ea\u003c/code\u003e is a \u003cem\u003epossible\u003c/em\u003e means of converting a \u003ccode\u003e\u003ca\u003eTypeable\u003c/a\u003e\u003c/code\u003e value to a value of type \u003ccode\u003ea\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Interp",
          "name": "Interp",
          "package": "hermit",
          "source": "src/HERMIT-Interp.html#Interp",
          "type": "data"
        },
        "index": {
          "description": "An Interp is possible means of converting Typeable value to value of type",
          "hierarchy": "HERMIT Interp",
          "module": "HERMIT.Interp",
          "name": "Interp",
          "package": "hermit",
          "partial": "Interp",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Interp.html#t:Interp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe primitive way of building an \u003ccode\u003e\u003ca\u003eInterp\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Interp",
          "name": "interp",
          "package": "hermit",
          "signature": "(a -\u003e b) -\u003e Interp b",
          "source": "src/HERMIT-Interp.html#interp",
          "type": "function"
        },
        "index": {
          "description": "The primitive way of building an Interp",
          "hierarchy": "HERMIT Interp",
          "module": "HERMIT.Interp",
          "name": "interp",
          "normalized": "(a-\u003eb)-\u003eInterp b",
          "package": "hermit",
          "signature": "(a-\u003eb)-\u003eInterp b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Interp.html#v:interp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInterpret an \u003ccode\u003e\u003ca\u003eExprH\u003c/a\u003e\u003c/code\u003e by looking up the appropriate \u003ccode\u003e\u003ca\u003eDynamic\u003c/a\u003e\u003c/code\u003e(s) in the provided \u003ccode\u003e\u003ca\u003eDictionary\u003c/a\u003e\u003c/code\u003e, then interpreting the \u003ccode\u003e\u003ca\u003eDynamic\u003c/a\u003e\u003c/code\u003e(s) with the provided \u003ccode\u003e\u003ca\u003eInterp\u003c/a\u003e\u003c/code\u003es, returning the first interpretation to succeed (or an error string if none succeed).\n\u003c/p\u003e",
          "module": "HERMIT.Interp",
          "name": "interpExprH",
          "package": "hermit",
          "signature": "Dictionary -\u003e [Interp a] -\u003e ExprH -\u003e m a",
          "source": "src/HERMIT-Interp.html#interpExprH",
          "type": "function"
        },
        "index": {
          "description": "Interpret an ExprH by looking up the appropriate Dynamic in the provided Dictionary then interpreting the Dynamic with the provided Interp returning the first interpretation to succeed or an error string if none succeed",
          "hierarchy": "HERMIT Interp",
          "module": "HERMIT.Interp",
          "name": "interpExprH",
          "normalized": "Dictionary-\u003e[Interp a]-\u003eExprH-\u003eb a",
          "package": "hermit",
          "partial": "Expr",
          "signature": "Dictionary-\u003e[Interp a]-\u003eExprH-\u003em a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Interp.html#v:interpExprH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "Scoped",
          "package": "hermit",
          "source": "src/HERMIT-Kernel-Scoped.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "Scoped",
          "package": "hermit",
          "partial": "Scoped",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA primitive means of denoting navigation of a tree (within a local scope).\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "Direction",
          "package": "hermit",
          "source": "src/HERMIT-Kernel-Scoped.html#Direction",
          "type": "data"
        },
        "index": {
          "description": "primitive means of denoting navigation of tree within local scope",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "Direction",
          "package": "hermit",
          "partial": "Direction",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#t:Direction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA \u003ccode\u003e\u003ca\u003eSnocPath\u003c/a\u003e\u003c/code\u003e from a local origin.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "LocalPath",
          "package": "hermit",
          "type": "type"
        },
        "index": {
          "description": "SnocPath from local origin",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "LocalPath",
          "package": "hermit",
          "partial": "Local Path",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#t:LocalPath"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA \u003cem\u003ehandle\u003c/em\u003e for an \u003ccode\u003e\u003ca\u003eAST\u003c/a\u003e\u003c/code\u003e combined with scoping information.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "SAST",
          "package": "hermit",
          "source": "src/HERMIT-Kernel-Scoped.html#SAST",
          "type": "newtype"
        },
        "index": {
          "description": "handle for an AST combined with scoping information",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "SAST",
          "package": "hermit",
          "partial": "SAST",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#t:SAST"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn alternative HERMIT kernel, that provides scoping.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "ScopedKernel",
          "package": "hermit",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "data"
        },
        "index": {
          "description": "An alternative HERMIT kernel that provides scoping",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "ScopedKernel",
          "package": "hermit",
          "partial": "Scoped Kernel",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#t:ScopedKernel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLeft\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "L",
          "package": "hermit",
          "signature": "L",
          "source": "src/HERMIT-Kernel-Scoped.html#Direction",
          "type": "function"
        },
        "index": {
          "description": "Left",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "L",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:L"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRight\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "R",
          "package": "hermit",
          "signature": "R",
          "source": "src/HERMIT-Kernel-Scoped.html#Direction",
          "type": "function"
        },
        "index": {
          "description": "Right",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "R",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:R"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "SAST",
          "package": "hermit",
          "signature": "SAST Int",
          "source": "src/HERMIT-Kernel-Scoped.html#SAST",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "SAST",
          "package": "hermit",
          "partial": "SAST",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:SAST"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "ScopedKernel",
          "package": "hermit",
          "signature": "ScopedKernel",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "ScopedKernel",
          "package": "hermit",
          "partial": "Scoped Kernel",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:ScopedKernel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTop\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "T",
          "package": "hermit",
          "signature": "T",
          "source": "src/HERMIT-Kernel-Scoped.html#Direction",
          "type": "function"
        },
        "index": {
          "description": "Top",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "T",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:T"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUp\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "U",
          "package": "hermit",
          "signature": "U",
          "source": "src/HERMIT-Kernel-Scoped.html#Direction",
          "type": "function"
        },
        "index": {
          "description": "Up",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "U",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:U"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "abortS",
          "package": "hermit",
          "signature": "m ()",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "abortS",
          "normalized": "a()",
          "package": "hermit",
          "signature": "m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:abortS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "applyS",
          "package": "hermit",
          "signature": "RewriteH g -\u003e HermitMEnv -\u003e SAST -\u003e m SAST",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "applyS",
          "normalized": "RewriteH a-\u003eHermitMEnv-\u003eSAST-\u003eb SAST",
          "package": "hermit",
          "signature": "RewriteH g-\u003eHermitMEnv-\u003eSAST-\u003em SAST",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:applyS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "beginScopeS",
          "package": "hermit",
          "signature": "SAST -\u003e m SAST",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "beginScopeS",
          "normalized": "SAST-\u003ea SAST",
          "package": "hermit",
          "partial": "Scope",
          "signature": "SAST-\u003em SAST",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:beginScopeS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "deleteS",
          "package": "hermit",
          "signature": "SAST -\u003e m ()",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "deleteS",
          "normalized": "SAST-\u003ea()",
          "package": "hermit",
          "signature": "SAST-\u003em()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:deleteS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "endScopeS",
          "package": "hermit",
          "signature": "SAST -\u003e m SAST",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "endScopeS",
          "normalized": "SAST-\u003ea SAST",
          "package": "hermit",
          "partial": "Scope",
          "signature": "SAST-\u003em SAST",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:endScopeS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "kernelS",
          "package": "hermit",
          "signature": "Kernel",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "kernelS",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:kernelS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "listS",
          "package": "hermit",
          "signature": "m [SAST]",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "listS",
          "normalized": "a[SAST]",
          "package": "hermit",
          "signature": "m[SAST]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:listS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "modPathS",
          "package": "hermit",
          "signature": "(LocalPathH -\u003e LocalPathH) -\u003e HermitMEnv -\u003e SAST -\u003e m SAST",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "modPathS",
          "normalized": "(LocalPathH-\u003eLocalPathH)-\u003eHermitMEnv-\u003eSAST-\u003ea SAST",
          "package": "hermit",
          "partial": "Path",
          "signature": "(LocalPathH-\u003eLocalPathH)-\u003eHermitMEnv-\u003eSAST-\u003em SAST",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:modPathS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMovement confined within the local scope.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "moveLocally",
          "package": "hermit",
          "signature": "Direction -\u003e LocalPathH -\u003e LocalPathH",
          "source": "src/HERMIT-Kernel-Scoped.html#moveLocally",
          "type": "function"
        },
        "index": {
          "description": "Movement confined within the local scope",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "moveLocally",
          "normalized": "Direction-\u003eLocalPathH-\u003eLocalPathH",
          "package": "hermit",
          "partial": "Locally",
          "signature": "Direction-\u003eLocalPathH-\u003eLocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:moveLocally"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "pathS",
          "package": "hermit",
          "signature": "SAST -\u003e m [PathH]",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "pathS",
          "normalized": "SAST-\u003ea[PathH]",
          "package": "hermit",
          "signature": "SAST-\u003em[PathH]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:pathS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "queryS",
          "package": "hermit",
          "signature": "TranslateH g a -\u003e HermitMEnv -\u003e SAST -\u003e m a",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "queryS",
          "normalized": "TranslateH a b-\u003eHermitMEnv-\u003eSAST-\u003ec b",
          "package": "hermit",
          "signature": "TranslateH g a-\u003eHermitMEnv-\u003eSAST-\u003em a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:queryS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "resumeS",
          "package": "hermit",
          "signature": "SAST -\u003e m ()",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "resumeS",
          "normalized": "SAST-\u003ea()",
          "package": "hermit",
          "signature": "SAST-\u003em()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:resumeS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eStart a HERMIT client by providing an IO function that takes the initial \u003ccode\u003e\u003ca\u003eScopedKernel\u003c/a\u003e\u003c/code\u003e and inital \u003ccode\u003e\u003ca\u003eSAST\u003c/a\u003e\u003c/code\u003e handle.\n   The \u003ccode\u003eModguts\u003c/code\u003e to \u003ccode\u003e\u003ca\u003eCoreM\u003c/a\u003e\u003c/code\u003e Modguts' function required by GHC Plugins is returned.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel.Scoped",
          "name": "scopedKernel",
          "package": "hermit",
          "signature": "(ScopedKernel -\u003e SAST -\u003e IO ()) -\u003e ModGuts -\u003e CoreM ModGuts",
          "source": "src/HERMIT-Kernel-Scoped.html#scopedKernel",
          "type": "function"
        },
        "index": {
          "description": "Start HERMIT client by providing an IO function that takes the initial ScopedKernel and inital SAST handle The Modguts to CoreM Modguts function required by GHC Plugins is returned",
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "scopedKernel",
          "normalized": "(ScopedKernel-\u003eSAST-\u003eIO())-\u003eModGuts-\u003eCoreM ModGuts",
          "package": "hermit",
          "partial": "Kernel",
          "signature": "(ScopedKernel-\u003eSAST-\u003eIO())-\u003eModGuts-\u003eCoreM ModGuts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:scopedKernel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel.Scoped",
          "name": "toASTS",
          "package": "hermit",
          "signature": "SAST -\u003e m AST",
          "source": "src/HERMIT-Kernel-Scoped.html#ScopedKernel",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kernel Scoped",
          "module": "HERMIT.Kernel.Scoped",
          "name": "toASTS",
          "normalized": "SAST-\u003ea AST",
          "package": "hermit",
          "partial": "ASTS",
          "signature": "SAST-\u003em AST",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel-Scoped.html#v:toASTS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kernel",
          "name": "Kernel",
          "package": "hermit",
          "source": "src/HERMIT-Kernel.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "Kernel",
          "package": "hermit",
          "partial": "Kernel",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA \u003cem\u003ehandle\u003c/em\u003e for a specific version of the \u003ccode\u003e\u003ca\u003eModGuts\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "AST",
          "package": "hermit",
          "source": "src/HERMIT-Kernel.html#AST",
          "type": "data"
        },
        "index": {
          "description": "handle for specific version of the ModGuts",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "AST",
          "package": "hermit",
          "partial": "AST",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#t:AST"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA \u003ccode\u003e\u003ca\u003eKernel\u003c/a\u003e\u003c/code\u003e is a repository for complete Core syntax trees (\u003ccode\u003e\u003ca\u003eModGuts\u003c/a\u003e\u003c/code\u003e).\n   For now, operations on a \u003ccode\u003e\u003ca\u003eKernel\u003c/a\u003e\u003c/code\u003e are sequential, but later\n   it will be possible to have two \u003ccode\u003e\u003ca\u003eapplyK\u003c/a\u003e\u003c/code\u003es running in parallel.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "Kernel",
          "package": "hermit",
          "source": "src/HERMIT-Kernel.html#Kernel",
          "type": "data"
        },
        "index": {
          "description": "Kernel is repository for complete Core syntax trees ModGuts For now operations on Kernel are sequential but later it will be possible to have two applyK running in parallel",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "Kernel",
          "package": "hermit",
          "partial": "Kernel",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#t:Kernel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHalt the \u003ccode\u003e\u003ca\u003eKernel\u003c/a\u003e\u003c/code\u003e and abort GHC without compiling.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "abortK",
          "package": "hermit",
          "signature": "Kernel -\u003e IO ()",
          "source": "src/HERMIT-Kernel.html#abortK",
          "type": "function"
        },
        "index": {
          "description": "Halt the Kernel and abort GHC without compiling",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "abortK",
          "normalized": "Kernel-\u003eIO()",
          "package": "hermit",
          "signature": "Kernel-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#v:abortK"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a \u003ccode\u003e\u003ca\u003eRewrite\u003c/a\u003e\u003c/code\u003e to the specified \u003ccode\u003e\u003ca\u003eAST\u003c/a\u003e\u003c/code\u003e and return a handle to the resulting \u003ccode\u003e\u003ca\u003eAST\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "applyK",
          "package": "hermit",
          "signature": "Kernel -\u003e AST -\u003e RewriteH ModGuts -\u003e HermitMEnv -\u003e IO (KureM AST)",
          "source": "src/HERMIT-Kernel.html#applyK",
          "type": "function"
        },
        "index": {
          "description": "Apply Rewrite to the specified AST and return handle to the resulting AST",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "applyK",
          "normalized": "Kernel-\u003eAST-\u003eRewriteH ModGuts-\u003eHermitMEnv-\u003eIO(KureM AST)",
          "package": "hermit",
          "signature": "Kernel-\u003eAST-\u003eRewriteH ModGuts-\u003eHermitMEnv-\u003eIO(KureM AST)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#v:applyK"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDelete the internal record of the specified \u003ccode\u003e\u003ca\u003eAST\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "deleteK",
          "package": "hermit",
          "signature": "Kernel -\u003e AST -\u003e IO ()",
          "source": "src/HERMIT-Kernel.html#deleteK",
          "type": "function"
        },
        "index": {
          "description": "Delete the internal record of the specified AST",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "deleteK",
          "normalized": "Kernel-\u003eAST-\u003eIO()",
          "package": "hermit",
          "signature": "Kernel-\u003eAST-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#v:deleteK"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eStart a HERMIT client by providing an IO function that takes the initial \u003ccode\u003e\u003ca\u003eKernel\u003c/a\u003e\u003c/code\u003e and inital \u003ccode\u003e\u003ca\u003eAST\u003c/a\u003e\u003c/code\u003e handle.\n   The \u003ccode\u003eModguts\u003c/code\u003e to \u003ccode\u003e\u003ca\u003eCoreM\u003c/a\u003e\u003c/code\u003e Modguts' function required by GHC Plugins is returned.\n   The callback is only ever called once.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "hermitKernel",
          "package": "hermit",
          "signature": "(Kernel -\u003e AST -\u003e IO ()) -\u003e ModGuts -\u003e CoreM ModGuts",
          "source": "src/HERMIT-Kernel.html#hermitKernel",
          "type": "function"
        },
        "index": {
          "description": "Start HERMIT client by providing an IO function that takes the initial Kernel and inital AST handle The Modguts to CoreM Modguts function required by GHC Plugins is returned The callback is only ever called once",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "hermitKernel",
          "normalized": "(Kernel-\u003eAST-\u003eIO())-\u003eModGuts-\u003eCoreM ModGuts",
          "package": "hermit",
          "partial": "Kernel",
          "signature": "(Kernel-\u003eAST-\u003eIO())-\u003eModGuts-\u003eCoreM ModGuts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#v:hermitKernel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList all the \u003ccode\u003e\u003ca\u003eAST\u003c/a\u003e\u003c/code\u003es tracked by the \u003ccode\u003e\u003ca\u003eKernel\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "listK",
          "package": "hermit",
          "signature": "Kernel -\u003e IO [AST]",
          "source": "src/HERMIT-Kernel.html#listK",
          "type": "function"
        },
        "index": {
          "description": "List all the AST tracked by the Kernel",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "listK",
          "normalized": "Kernel-\u003eIO[AST]",
          "package": "hermit",
          "signature": "Kernel-\u003eIO[AST]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#v:listK"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a \u003ccode\u003e\u003ca\u003eTranslateH\u003c/a\u003e\u003c/code\u003e to the \u003ccode\u003e\u003ca\u003eAST\u003c/a\u003e\u003c/code\u003e and return the resulting value.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "queryK",
          "package": "hermit",
          "signature": "Kernel -\u003e forall a.  AST -\u003e TranslateH ModGuts a -\u003e HermitMEnv -\u003e IO (KureM a)",
          "source": "src/HERMIT-Kernel.html#queryK",
          "type": "function"
        },
        "index": {
          "description": "Apply TranslateH to the AST and return the resulting value",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "queryK",
          "normalized": "Kernel-\u003ea b AST-\u003eTranslateH ModGuts c-\u003eHermitMEnv-\u003eIO(KureM c)",
          "package": "hermit",
          "signature": "Kernel-\u003eforall a. AST-\u003eTranslateH ModGuts a-\u003eHermitMEnv-\u003eIO(KureM a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#v:queryK"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHalt the \u003ccode\u003e\u003ca\u003eKernel\u003c/a\u003e\u003c/code\u003e and return control to GHC, which compiles the specified \u003ccode\u003e\u003ca\u003eAST\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kernel",
          "name": "resumeK",
          "package": "hermit",
          "signature": "Kernel -\u003e AST -\u003e IO ()",
          "source": "src/HERMIT-Kernel.html#resumeK",
          "type": "function"
        },
        "index": {
          "description": "Halt the Kernel and return control to GHC which compiles the specified AST",
          "hierarchy": "HERMIT Kernel",
          "module": "HERMIT.Kernel",
          "name": "resumeK",
          "normalized": "Kernel-\u003eAST-\u003eIO()",
          "package": "hermit",
          "signature": "Kernel-\u003eAST-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kernel.html#v:resumeK"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure.SumTypes",
          "name": "SumTypes",
          "package": "hermit",
          "source": "src/HERMIT-Kure-SumTypes.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "SumTypes",
          "package": "hermit",
          "partial": "Sum Types",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCore is a sum type for use by KURE.  Core = ModGuts + CoreProg + CoreBind + CoreDef + CoreExpr + CoreAlt\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "Core",
          "package": "hermit",
          "source": "src/HERMIT-Kure-SumTypes.html#Core",
          "type": "data"
        },
        "index": {
          "description": "Core is sum type for use by KURE Core ModGuts CoreProg CoreBind CoreDef CoreExpr CoreAlt",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "Core",
          "package": "hermit",
          "partial": "Core",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#t:Core"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCoreTC is a sum type for use by KURE.  CoreTC = Core + TyCo\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "CoreTC",
          "package": "hermit",
          "source": "src/HERMIT-Kure-SumTypes.html#CoreTC",
          "type": "data"
        },
        "index": {
          "description": "CoreTC is sum type for use by KURE CoreTC Core TyCo",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "CoreTC",
          "package": "hermit",
          "partial": "Core TC",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#t:CoreTC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTyCo is a sum type for use by KURE.  TyCo = Type + Coercion\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "TyCo",
          "package": "hermit",
          "source": "src/HERMIT-Kure-SumTypes.html#TyCo",
          "type": "data"
        },
        "index": {
          "description": "TyCo is sum type for use by KURE TyCo Type Coercion",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "TyCo",
          "package": "hermit",
          "partial": "Ty Co",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#t:TyCo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA case alternative.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "AltCore",
          "package": "hermit",
          "signature": "AltCore CoreAlt",
          "source": "src/HERMIT-Kure-SumTypes.html#Core",
          "type": "function"
        },
        "index": {
          "description": "case alternative",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "AltCore",
          "package": "hermit",
          "partial": "Alt Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:AltCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA binding group.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "BindCore",
          "package": "hermit",
          "signature": "BindCore CoreBind",
          "source": "src/HERMIT-Kure-SumTypes.html#Core",
          "type": "function"
        },
        "index": {
          "description": "binding group",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "BindCore",
          "package": "hermit",
          "partial": "Bind Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:BindCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA coercion.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "CoercionCore",
          "package": "hermit",
          "signature": "CoercionCore Coercion",
          "source": "src/HERMIT-Kure-SumTypes.html#TyCo",
          "type": "function"
        },
        "index": {
          "description": "coercion",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "CoercionCore",
          "package": "hermit",
          "partial": "Coercion Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:CoercionCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure.SumTypes",
          "name": "Core",
          "package": "hermit",
          "signature": "Core Core",
          "source": "src/HERMIT-Kure-SumTypes.html#CoreTC",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "Core",
          "package": "hermit",
          "partial": "Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:Core"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA recursive definition.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "DefCore",
          "package": "hermit",
          "signature": "DefCore CoreDef",
          "source": "src/HERMIT-Kure-SumTypes.html#Core",
          "type": "function"
        },
        "index": {
          "description": "recursive definition",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "DefCore",
          "package": "hermit",
          "partial": "Def Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:DefCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn expression.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "ExprCore",
          "package": "hermit",
          "signature": "ExprCore CoreExpr",
          "source": "src/HERMIT-Kure-SumTypes.html#Core",
          "type": "function"
        },
        "index": {
          "description": "An expression",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "ExprCore",
          "package": "hermit",
          "partial": "Expr Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:ExprCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe module.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "GutsCore",
          "package": "hermit",
          "signature": "GutsCore ModGuts",
          "source": "src/HERMIT-Kure-SumTypes.html#Core",
          "type": "function"
        },
        "index": {
          "description": "The module",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "GutsCore",
          "package": "hermit",
          "partial": "Guts Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:GutsCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA program (a telescope of top-level binding groups).\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "ProgCore",
          "package": "hermit",
          "signature": "ProgCore CoreProg",
          "source": "src/HERMIT-Kure-SumTypes.html#Core",
          "type": "function"
        },
        "index": {
          "description": "program telescope of top-level binding groups",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "ProgCore",
          "package": "hermit",
          "partial": "Prog Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:ProgCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure.SumTypes",
          "name": "TyCo",
          "package": "hermit",
          "signature": "TyCo TyCo",
          "source": "src/HERMIT-Kure-SumTypes.html#CoreTC",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "TyCo",
          "package": "hermit",
          "partial": "Ty Co",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:TyCo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA type.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "TypeCore",
          "package": "hermit",
          "signature": "TypeCore Type",
          "source": "src/HERMIT-Kure-SumTypes.html#TyCo",
          "type": "function"
        },
        "index": {
          "description": "type",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "TypeCore",
          "package": "hermit",
          "partial": "Type Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:TypeCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of \u003ccode\u003e\u003ca\u003eCore\u003c/a\u003e\u003c/code\u003e fragments.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "coreAlphaEq",
          "package": "hermit",
          "signature": "Core -\u003e Core -\u003e Bool",
          "source": "src/HERMIT-Kure-SumTypes.html#coreAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of Core fragments",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "coreAlphaEq",
          "normalized": "Core-\u003eCore-\u003eBool",
          "package": "hermit",
          "partial": "Alpha Eq",
          "signature": "Core-\u003eCore-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:coreAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic equality of \u003ccode\u003e\u003ca\u003eCore\u003c/a\u003e\u003c/code\u003e fragments.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "coreSyntaxEq",
          "package": "hermit",
          "signature": "Core -\u003e Core -\u003e Bool",
          "source": "src/HERMIT-Kure-SumTypes.html#coreSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic equality of Core fragments",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "coreSyntaxEq",
          "normalized": "Core-\u003eCore-\u003eBool",
          "package": "hermit",
          "partial": "Syntax Eq",
          "signature": "Core-\u003eCore-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:coreSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of \u003ccode\u003e\u003ca\u003eCoreTC\u003c/a\u003e\u003c/code\u003e fragments.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "coreTCAlphaEq",
          "package": "hermit",
          "signature": "CoreTC -\u003e CoreTC -\u003e Bool",
          "source": "src/HERMIT-Kure-SumTypes.html#coreTCAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of CoreTC fragments",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "coreTCAlphaEq",
          "normalized": "CoreTC-\u003eCoreTC-\u003eBool",
          "package": "hermit",
          "partial": "TCAlpha Eq",
          "signature": "CoreTC-\u003eCoreTC-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:coreTCAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic equality of \u003ccode\u003e\u003ca\u003eCoreTC\u003c/a\u003e\u003c/code\u003e fragments.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "coreTCSyntaxEq",
          "package": "hermit",
          "signature": "CoreTC -\u003e CoreTC -\u003e Bool",
          "source": "src/HERMIT-Kure-SumTypes.html#coreTCSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic equality of CoreTC fragments",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "coreTCSyntaxEq",
          "normalized": "CoreTC-\u003eCoreTC-\u003eBool",
          "package": "hermit",
          "partial": "TCSyntax Eq",
          "signature": "CoreTC-\u003eCoreTC-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:coreTCSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in a \u003ccode\u003e\u003ca\u003eCore\u003c/a\u003e\u003c/code\u003e node.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "freeVarsCore",
          "package": "hermit",
          "signature": "Core -\u003e VarSet",
          "source": "src/HERMIT-Kure-SumTypes.html#freeVarsCore",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in Core node",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "freeVarsCore",
          "normalized": "Core-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Core",
          "signature": "Core-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:freeVarsCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in a \u003ccode\u003e\u003ca\u003eCoreTC\u003c/a\u003e\u003c/code\u003e node.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "freeVarsCoreTC",
          "package": "hermit",
          "signature": "CoreTC -\u003e VarSet",
          "source": "src/HERMIT-Kure-SumTypes.html#freeVarsCoreTC",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in CoreTC node",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "freeVarsCoreTC",
          "normalized": "CoreTC-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Core TC",
          "signature": "CoreTC-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:freeVarsCoreTC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFind all free variables in a \u003ccode\u003e\u003ca\u003eTyCo\u003c/a\u003e\u003c/code\u003e node.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "freeVarsTyCo",
          "package": "hermit",
          "signature": "TyCo -\u003e VarSet",
          "source": "src/HERMIT-Kure-SumTypes.html#freeVarsTyCo",
          "type": "function"
        },
        "index": {
          "description": "Find all free variables in TyCo node",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "freeVarsTyCo",
          "normalized": "TyCo-\u003eVarSet",
          "package": "hermit",
          "partial": "Vars Ty Co",
          "signature": "TyCo-\u003eVarSet",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:freeVarsTyCo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a rewrite on \u003ccode\u003e\u003ca\u003eCoreAlt\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteAltR",
          "package": "hermit",
          "signature": "Rewrite c m CoreAlt -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteAltR",
          "type": "function"
        },
        "index": {
          "description": "Promote rewrite on CoreAlt",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteAltR",
          "normalized": "Rewrite a b CoreAlt-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Alt",
          "signature": "Rewrite c m CoreAlt-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteAltR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a translate on \u003ccode\u003e\u003ca\u003eCoreAlt\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteAltT",
          "package": "hermit",
          "signature": "Translate c m CoreAlt b -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteAltT",
          "type": "function"
        },
        "index": {
          "description": "Promote translate on CoreAlt",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteAltT",
          "normalized": "Translate a b CoreAlt c-\u003eTranslate a b d c",
          "package": "hermit",
          "partial": "Alt",
          "signature": "Translate c m CoreAlt b-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteAltT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a rewrite on \u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteBindR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteBindR",
          "type": "function"
        },
        "index": {
          "description": "Promote rewrite on CoreBind",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteBindR",
          "normalized": "Rewrite a b CoreBind-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Bind",
          "signature": "Rewrite c m CoreBind-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteBindR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a translate on \u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteBindT",
          "package": "hermit",
          "signature": "Translate c m CoreBind b -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteBindT",
          "type": "function"
        },
        "index": {
          "description": "Promote translate on CoreBind",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteBindT",
          "normalized": "Translate a b CoreBind c-\u003eTranslate a b d c",
          "package": "hermit",
          "partial": "Bind",
          "signature": "Translate c m CoreBind b-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteBindT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a rewrite on \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteCoercionR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteCoercionR",
          "type": "function"
        },
        "index": {
          "description": "Promote rewrite on Coercion",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteCoercionR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Coercion",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteCoercionR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a translate on \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteCoercionT",
          "package": "hermit",
          "signature": "Translate c m Coercion b -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteCoercionT",
          "type": "function"
        },
        "index": {
          "description": "Promote translate on Coercion",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteCoercionT",
          "normalized": "Translate a b Coercion c-\u003eTranslate a b d c",
          "package": "hermit",
          "partial": "Coercion",
          "signature": "Translate c m Coercion b-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteCoercionT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a rewrite on \u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteDefR",
          "package": "hermit",
          "signature": "Rewrite c m CoreDef -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteDefR",
          "type": "function"
        },
        "index": {
          "description": "Promote rewrite on CoreDef",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteDefR",
          "normalized": "Rewrite a b CoreDef-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Def",
          "signature": "Rewrite c m CoreDef-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteDefR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a translate on \u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteDefT",
          "package": "hermit",
          "signature": "Translate c m CoreDef b -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteDefT",
          "type": "function"
        },
        "index": {
          "description": "Promote translate on CoreDef",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteDefT",
          "normalized": "Translate a b CoreDef c-\u003eTranslate a b d c",
          "package": "hermit",
          "partial": "Def",
          "signature": "Translate c m CoreDef b-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteDefT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a bidirectional rewrite on \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteExprBiR",
          "package": "hermit",
          "signature": "BiRewrite c m CoreExpr -\u003e BiRewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteExprBiR",
          "type": "function"
        },
        "index": {
          "description": "Promote bidirectional rewrite on CoreExpr",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteExprBiR",
          "normalized": "BiRewrite a b CoreExpr-\u003eBiRewrite a b c",
          "package": "hermit",
          "partial": "Expr Bi",
          "signature": "BiRewrite c m CoreExpr-\u003eBiRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteExprBiR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a rewrite on \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteExprR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteExprR",
          "type": "function"
        },
        "index": {
          "description": "Promote rewrite on CoreExpr",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteExprR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Expr",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteExprR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a translate on \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteExprT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr b -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteExprT",
          "type": "function"
        },
        "index": {
          "description": "Promote translate on CoreExpr",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteExprT",
          "normalized": "Translate a b CoreExpr c-\u003eTranslate a b d c",
          "package": "hermit",
          "partial": "Expr",
          "signature": "Translate c m CoreExpr b-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteExprT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a rewrite on \u003ccode\u003e\u003ca\u003eModGuts\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteModGutsR",
          "package": "hermit",
          "signature": "Rewrite c m ModGuts -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteModGutsR",
          "type": "function"
        },
        "index": {
          "description": "Promote rewrite on ModGuts",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteModGutsR",
          "normalized": "Rewrite a b ModGuts-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Mod Guts",
          "signature": "Rewrite c m ModGuts-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteModGutsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a translate on \u003ccode\u003e\u003ca\u003eModGuts\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteModGutsT",
          "package": "hermit",
          "signature": "Translate c m ModGuts b -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteModGutsT",
          "type": "function"
        },
        "index": {
          "description": "Promote translate on ModGuts",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteModGutsT",
          "normalized": "Translate a b ModGuts c-\u003eTranslate a b d c",
          "package": "hermit",
          "partial": "Mod Guts",
          "signature": "Translate c m ModGuts b-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteModGutsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a rewrite on \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteProgR",
          "package": "hermit",
          "signature": "Rewrite c m CoreProg -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteProgR",
          "type": "function"
        },
        "index": {
          "description": "Promote rewrite on CoreProg",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteProgR",
          "normalized": "Rewrite a b CoreProg-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Prog",
          "signature": "Rewrite c m CoreProg-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteProgR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a translate on \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteProgT",
          "package": "hermit",
          "signature": "Translate c m CoreProg b -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteProgT",
          "type": "function"
        },
        "index": {
          "description": "Promote translate on CoreProg",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteProgT",
          "normalized": "Translate a b CoreProg c-\u003eTranslate a b d c",
          "package": "hermit",
          "partial": "Prog",
          "signature": "Translate c m CoreProg b-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteProgT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a rewrite on \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteTypeR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteTypeR",
          "type": "function"
        },
        "index": {
          "description": "Promote rewrite on Type",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteTypeR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Type",
          "signature": "Rewrite c m Type-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteTypeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePromote a translate on \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteTypeT",
          "package": "hermit",
          "signature": "Translate c m Type b -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure-SumTypes.html#promoteTypeT",
          "type": "function"
        },
        "index": {
          "description": "Promote translate on Type",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "promoteTypeT",
          "normalized": "Translate a b Type c-\u003eTranslate a b d c",
          "package": "hermit",
          "partial": "Type",
          "signature": "Translate c m Type b-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:promoteTypeT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlpha equality of \u003ccode\u003e\u003ca\u003eTyCo\u003c/a\u003e\u003c/code\u003e fragments.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "tyCoAlphaEq",
          "package": "hermit",
          "signature": "TyCo -\u003e TyCo -\u003e Bool",
          "source": "src/HERMIT-Kure-SumTypes.html#tyCoAlphaEq",
          "type": "function"
        },
        "index": {
          "description": "Alpha equality of TyCo fragments",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "tyCoAlphaEq",
          "normalized": "TyCo-\u003eTyCo-\u003eBool",
          "package": "hermit",
          "partial": "Co Alpha Eq",
          "signature": "TyCo-\u003eTyCo-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:tyCoAlphaEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSyntactic equality of \u003ccode\u003e\u003ca\u003eTyCo\u003c/a\u003e\u003c/code\u003e fragments.\n\u003c/p\u003e",
          "module": "HERMIT.Kure.SumTypes",
          "name": "tyCoSyntaxEq",
          "package": "hermit",
          "signature": "TyCo -\u003e TyCo -\u003e Bool",
          "source": "src/HERMIT-Kure-SumTypes.html#tyCoSyntaxEq",
          "type": "function"
        },
        "index": {
          "description": "Syntactic equality of TyCo fragments",
          "hierarchy": "HERMIT Kure SumTypes",
          "module": "HERMIT.Kure.SumTypes",
          "name": "tyCoSyntaxEq",
          "normalized": "TyCo-\u003eTyCo-\u003eBool",
          "package": "hermit",
          "partial": "Co Syntax Eq",
          "signature": "TyCo-\u003eTyCo-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure-SumTypes.html#v:tyCoSyntaxEq"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure",
          "name": "Kure",
          "package": "hermit",
          "source": "src/HERMIT-Kure.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "Kure",
          "package": "hermit",
          "partial": "Kure",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure",
          "name": "BiRewriteH",
          "package": "hermit",
          "source": "src/HERMIT-Kure.html#BiRewriteH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "BiRewriteH",
          "package": "hermit",
          "partial": "Bi Rewrite",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#t:BiRewriteH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure",
          "name": "LensH",
          "package": "hermit",
          "source": "src/HERMIT-Kure.html#LensH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "LensH",
          "package": "hermit",
          "partial": "Lens",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#t:LensH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure",
          "name": "PathH",
          "package": "hermit",
          "source": "src/HERMIT-Kure.html#PathH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "PathH",
          "package": "hermit",
          "partial": "Path",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#t:PathH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure",
          "name": "RewriteH",
          "package": "hermit",
          "source": "src/HERMIT-Kure.html#RewriteH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "RewriteH",
          "package": "hermit",
          "partial": "Rewrite",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#t:RewriteH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Kure",
          "name": "TranslateH",
          "package": "hermit",
          "source": "src/HERMIT-Kure.html#TranslateH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "TranslateH",
          "package": "hermit",
          "partial": "Translate",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#t:TranslateH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a case alternative of the form: (\u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "altAllR",
          "package": "hermit",
          "signature": "Rewrite c m AltCon -\u003e (Int -\u003e Rewrite c m Var) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreAlt",
          "source": "src/HERMIT-Kure.html#altAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of case alternative of the form AltCon Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "altAllR",
          "normalized": "Rewrite a b AltCon-\u003e(Int-\u003eRewrite a b Var)-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreAlt",
          "package": "hermit",
          "partial": "All",
          "signature": "Rewrite c m AltCon-\u003e(Int-\u003eRewrite c m Var)-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreAlt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:altAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a case alternative of the form: (\u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "altAnyR",
          "package": "hermit",
          "signature": "Rewrite c m AltCon -\u003e (Int -\u003e Rewrite c m Var) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreAlt",
          "source": "src/HERMIT-Kure.html#altAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of case alternative of the form AltCon Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "altAnyR",
          "normalized": "Rewrite a b AltCon-\u003e(Int-\u003eRewrite a b Var)-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreAlt",
          "package": "hermit",
          "partial": "Any",
          "signature": "Rewrite c m AltCon-\u003e(Int-\u003eRewrite c m Var)-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreAlt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:altAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a case alternative of the form: (\u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "altOneR",
          "package": "hermit",
          "signature": "Rewrite c m AltCon -\u003e (Int -\u003e Rewrite c m Var) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreAlt",
          "source": "src/HERMIT-Kure.html#altOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of case alternative of the form AltCon Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "altOneR",
          "normalized": "Rewrite a b AltCon-\u003e(Int-\u003eRewrite a b Var)-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreAlt",
          "package": "hermit",
          "partial": "One",
          "signature": "Rewrite c m AltCon-\u003e(Int-\u003eRewrite c m Var)-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreAlt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:altOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a case alternative of the form: (\u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e, [\u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e], \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "altT",
          "package": "hermit",
          "signature": "Translate c m AltCon a1 -\u003e (Int -\u003e Translate c m Var a2) -\u003e Translate c m CoreExpr a3 -\u003e (a1 -\u003e [a2] -\u003e a3 -\u003e b) -\u003e Translate c m CoreAlt b",
          "source": "src/HERMIT-Kure.html#altT",
          "type": "function"
        },
        "index": {
          "description": "Translate case alternative of the form AltCon Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "altT",
          "normalized": "Translate a b AltCon c-\u003e(Int-\u003eTranslate a b Var c)-\u003eTranslate a b CoreExpr c-\u003e(c-\u003e[c]-\u003ec-\u003ed)-\u003eTranslate a b CoreAlt d",
          "package": "hermit",
          "signature": "Translate c m AltCon a-\u003e(Int-\u003eTranslate c m Var a)-\u003eTranslate c m CoreExpr a-\u003e(a-\u003e[a]-\u003ea-\u003eb)-\u003eTranslate c m CoreAlt b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:altT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eApp\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appAllR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#appAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form App CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appAllR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "All",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eApp\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appAnyR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#appAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form App CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appAnyR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Any",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a coercion of the form: \u003ccode\u003eAppCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appCoAllR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#appCoAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of coercion of the form AppCo Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appCoAllR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co All",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appCoAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a coercion of the form: \u003ccode\u003eAppCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appCoAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#appCoAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of coercion of the form AppCo Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appCoAnyR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co Any",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appCoAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a coercion of the form: \u003ccode\u003eAppCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appCoOneR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#appCoOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of coercion of the form AppCo Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appCoOneR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co One",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appCoOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eAppCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appCoT",
          "package": "hermit",
          "signature": "Translate c m Coercion a1 -\u003e Translate c m Coercion a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#appCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form AppCo Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appCoT",
          "normalized": "Translate a b Coercion c-\u003eTranslate a b Coercion c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Coercion d",
          "package": "hermit",
          "partial": "Co",
          "signature": "Translate c m Coercion a-\u003eTranslate c m Coercion a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eApp\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appOneR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#appOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form App CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appOneR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "One",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eApp\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr a1 -\u003e Translate c m CoreExpr a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#appT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form App CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appT",
          "normalized": "Translate a b CoreExpr c-\u003eTranslate a b CoreExpr c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b CoreExpr d",
          "package": "hermit",
          "signature": "Translate c m CoreExpr a-\u003eTranslate c m CoreExpr a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a type of the form: \u003ccode\u003eAppTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appTyAllR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#appTyAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of type of the form AppTy Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appTyAllR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Ty All",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appTyAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a type of the form: \u003ccode\u003eAppTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appTyAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#appTyAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of type of the form AppTy Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appTyAnyR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Ty Any",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appTyAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a type of the form: \u003ccode\u003eAppTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appTyOneR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#appTyOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of type of the form AppTy Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appTyOneR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Ty One",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appTyOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a type of the form: \u003ccode\u003eAppTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "appTyT",
          "package": "hermit",
          "signature": "Translate c m Type a1 -\u003e Translate c m Type a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Type b",
          "source": "src/HERMIT-Kure.html#appTyT",
          "type": "function"
        },
        "index": {
          "description": "Translate type of the form AppTy Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "appTyT",
          "normalized": "Translate a b Type c-\u003eTranslate a b Type c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Type d",
          "package": "hermit",
          "partial": "Ty",
          "signature": "Translate c m Type a-\u003eTranslate c m Type a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Type b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:appTyT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a coercion of the form: \u003ccode\u003eAxiomInstCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoAxiom\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "axiomInstCoAllR",
          "package": "hermit",
          "signature": "Rewrite c m CoAxiom -\u003e (Int -\u003e Rewrite c m Coercion) -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#axiomInstCoAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of coercion of the form AxiomInstCo CoAxiom Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "axiomInstCoAllR",
          "normalized": "Rewrite a b CoAxiom-\u003e(Int-\u003eRewrite a b Coercion)-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Inst Co All",
          "signature": "Rewrite c m CoAxiom-\u003e(Int-\u003eRewrite c m Coercion)-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:axiomInstCoAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a coercion of the form: \u003ccode\u003eAxiomInstCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoAxiom\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "axiomInstCoAnyR",
          "package": "hermit",
          "signature": "Rewrite c m CoAxiom -\u003e (Int -\u003e Rewrite c m Coercion) -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#axiomInstCoAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of coercion of the form AxiomInstCo CoAxiom Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "axiomInstCoAnyR",
          "normalized": "Rewrite a b CoAxiom-\u003e(Int-\u003eRewrite a b Coercion)-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Inst Co Any",
          "signature": "Rewrite c m CoAxiom-\u003e(Int-\u003eRewrite c m Coercion)-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:axiomInstCoAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a coercion of the form: \u003ccode\u003eAxiomInstCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoAxiom\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "axiomInstCoOneR",
          "package": "hermit",
          "signature": "Rewrite c m CoAxiom -\u003e (Int -\u003e Rewrite c m Coercion) -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#axiomInstCoOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of coercion of the form AxiomInstCo CoAxiom Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "axiomInstCoOneR",
          "normalized": "Rewrite a b CoAxiom-\u003e(Int-\u003eRewrite a b Coercion)-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Inst Co One",
          "signature": "Rewrite c m CoAxiom-\u003e(Int-\u003eRewrite c m Coercion)-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:axiomInstCoOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eAxiomInstCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoAxiom\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "axiomInstCoT",
          "package": "hermit",
          "signature": "Translate c m CoAxiom a1 -\u003e (Int -\u003e Translate c m Coercion a2) -\u003e (a1 -\u003e [a2] -\u003e b) -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#axiomInstCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form AxiomInstCo CoAxiom Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "axiomInstCoT",
          "normalized": "Translate a b CoAxiom c-\u003e(Int-\u003eTranslate a b Coercion c)-\u003e(c-\u003e[c]-\u003ed)-\u003eTranslate a b Coercion d",
          "package": "hermit",
          "partial": "Inst Co",
          "signature": "Translate c m CoAxiom a-\u003e(Int-\u003eTranslate c m Coercion a)-\u003e(a-\u003e[a]-\u003eb)-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:axiomInstCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eCase\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreAlt\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "caseAllR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Id -\u003e Rewrite c m Type -\u003e (Int -\u003e Rewrite c m CoreAlt) -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#caseAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Case CoreExpr Id Type CoreAlt",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "caseAllR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Id-\u003eRewrite a b Type-\u003e(Int-\u003eRewrite a b CoreAlt)-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "All",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Id-\u003eRewrite c m Type-\u003e(Int-\u003eRewrite c m CoreAlt)-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:caseAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eCase\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e, [\u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e], \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "caseAltAllR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Id -\u003e Rewrite c m Type -\u003e (Int -\u003e (Rewrite c m AltCon, Int -\u003e Rewrite c m Var, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#caseAltAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Case CoreExpr Id Type AltCon Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "caseAltAllR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Id-\u003eRewrite a b Type-\u003e(Int-\u003e(Rewrite a b AltCon,Int-\u003eRewrite a b Var,Rewrite a b CoreExpr))-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Alt All",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Id-\u003eRewrite c m Type-\u003e(Int-\u003e(Rewrite c m AltCon,Int-\u003eRewrite c m Var,Rewrite c m CoreExpr))-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:caseAltAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eCase\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e, [\u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e], \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "caseAltAnyR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Id -\u003e Rewrite c m Type -\u003e (Int -\u003e (Rewrite c m AltCon, Int -\u003e Rewrite c m Var, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#caseAltAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Case CoreExpr Id Type AltCon Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "caseAltAnyR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Id-\u003eRewrite a b Type-\u003e(Int-\u003e(Rewrite a b AltCon,Int-\u003eRewrite a b Var,Rewrite a b CoreExpr))-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Alt Any",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Id-\u003eRewrite c m Type-\u003e(Int-\u003e(Rewrite c m AltCon,Int-\u003eRewrite c m Var,Rewrite c m CoreExpr))-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:caseAltAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eCase\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e, [\u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e], \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "caseAltOneR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Id -\u003e Rewrite c m Type -\u003e (Int -\u003e (Rewrite c m AltCon, Int -\u003e Rewrite c m Var, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#caseAltOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Case CoreExpr Id Type AltCon Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "caseAltOneR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Id-\u003eRewrite a b Type-\u003e(Int-\u003e(Rewrite a b AltCon,Int-\u003eRewrite a b Var,Rewrite a b CoreExpr))-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Alt One",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Id-\u003eRewrite c m Type-\u003e(Int-\u003e(Rewrite c m AltCon,Int-\u003eRewrite c m Var,Rewrite c m CoreExpr))-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:caseAltOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eCase\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eAltCon\u003c/a\u003e\u003c/code\u003e, [\u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e], \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "caseAltT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr sc -\u003e Translate c m Id w -\u003e Translate c m Type ty -\u003e (Int -\u003e (Translate c m AltCon con, Int -\u003e Translate c m Var v, Translate c m CoreExpr rhs)) -\u003e (sc -\u003e w -\u003e ty -\u003e [(con, [v], rhs)] -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#caseAltT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Case CoreExpr Id Type AltCon Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "caseAltT",
          "normalized": "Translate a b CoreExpr c-\u003eTranslate a b Id d-\u003eTranslate a b Type e-\u003e(Int-\u003e(Translate a b AltCon f,Int-\u003eTranslate a b Var g,Translate a b CoreExpr h))-\u003e(c-\u003ed-\u003ee-\u003e[(f,[g],h)]-\u003ei)-\u003eTranslate a b CoreExpr i",
          "package": "hermit",
          "partial": "Alt",
          "signature": "Translate c m CoreExpr sc-\u003eTranslate c m Id w-\u003eTranslate c m Type ty-\u003e(Int-\u003e(Translate c m AltCon con,Int-\u003eTranslate c m Var v,Translate c m CoreExpr rhs))-\u003e(sc-\u003ew-\u003ety-\u003e[(con,[v],rhs)]-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:caseAltT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eCase\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreAlt\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "caseAnyR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Id -\u003e Rewrite c m Type -\u003e (Int -\u003e Rewrite c m CoreAlt) -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#caseAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Case CoreExpr Id Type CoreAlt",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "caseAnyR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Id-\u003eRewrite a b Type-\u003e(Int-\u003eRewrite a b CoreAlt)-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Any",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Id-\u003eRewrite c m Type-\u003e(Int-\u003eRewrite c m CoreAlt)-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:caseAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eCase\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreAlt\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "caseOneR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Id -\u003e Rewrite c m Type -\u003e (Int -\u003e Rewrite c m CoreAlt) -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#caseOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Case CoreExpr Id Type CoreAlt",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "caseOneR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Id-\u003eRewrite a b Type-\u003e(Int-\u003eRewrite a b CoreAlt)-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "One",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Id-\u003eRewrite c m Type-\u003e(Int-\u003eRewrite c m CoreAlt)-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:caseOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eCase\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreAlt\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "caseT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr e -\u003e Translate c m Id w -\u003e Translate c m Type ty -\u003e (Int -\u003e Translate c m CoreAlt alt) -\u003e (e -\u003e w -\u003e ty -\u003e [alt] -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#caseT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Case CoreExpr Id Type CoreAlt",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "caseT",
          "normalized": "Translate a b CoreExpr c-\u003eTranslate a b Id d-\u003eTranslate a b Type e-\u003e(Int-\u003eTranslate a b CoreAlt f)-\u003e(c-\u003ed-\u003ee-\u003e[f]-\u003eg)-\u003eTranslate a b CoreExpr g",
          "package": "hermit",
          "signature": "Translate c m CoreExpr e-\u003eTranslate c m Id w-\u003eTranslate c m Type ty-\u003e(Int-\u003eTranslate c m CoreAlt alt)-\u003e(e-\u003ew-\u003ety-\u003e[alt]-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:caseT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eCast\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "castAllR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Coercion -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#castAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Cast CoreExpr Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "castAllR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Coercion-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "All",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Coercion-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:castAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eCast\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "castAnyR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Coercion -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#castAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Cast CoreExpr Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "castAnyR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Coercion-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Any",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Coercion-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:castAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eCast\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "castOneR",
          "package": "hermit",
          "signature": "Rewrite c m CoreExpr -\u003e Rewrite c m Coercion -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#castOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Cast CoreExpr Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "castOneR",
          "normalized": "Rewrite a b CoreExpr-\u003eRewrite a b Coercion-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "One",
          "signature": "Rewrite c m CoreExpr-\u003eRewrite c m Coercion-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:castOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eCast\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "castT",
          "package": "hermit",
          "signature": "Translate c m CoreExpr a1 -\u003e Translate c m Coercion a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#castT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Cast CoreExpr Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "castT",
          "normalized": "Translate a b CoreExpr c-\u003eTranslate a b Coercion c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b CoreExpr d",
          "package": "hermit",
          "signature": "Translate c m CoreExpr a-\u003eTranslate c m Coercion a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:castT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eCoVar\u003c/a\u003e\u003c/code\u003e child of a coercion of the form: \u003ccode\u003eCoVarCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoVar\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "coVarCoR",
          "package": "hermit",
          "signature": "Rewrite c m CoVar -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#coVarCoR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the CoVar child of coercion of the form CoVarCo CoVar",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "coVarCoR",
          "normalized": "Rewrite a b CoVar-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Var Co",
          "signature": "Rewrite c m CoVar-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:coVarCoR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eCoVarCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoVar\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "coVarCoT",
          "package": "hermit",
          "signature": "Translate c m CoVar b -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#coVarCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form CoVarCo CoVar",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "coVarCoT",
          "normalized": "Translate a b CoVar c-\u003eTranslate a b Coercion c",
          "package": "hermit",
          "partial": "Var Co",
          "signature": "Translate c m CoVar b-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:coVarCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e child in an expression of the form: \u003ccode\u003eCoercion\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "coercionR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#coercionR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the Coercion child in an expression of the form Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "coercionR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:coercionR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eCoercion\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "coercionT",
          "package": "hermit",
          "signature": "Translate c m Coercion b -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#coercionT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "coercionT",
          "normalized": "Translate a b Coercion c-\u003eTranslate a b CoreExpr c",
          "package": "hermit",
          "signature": "Translate c m Coercion b-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:coercionT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: (\u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consNonRecAllR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consNonRecAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form NonRec Var CoreExpr CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consNonRecAllR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Non Rec All",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consNonRecAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: (\u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consNonRecAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consNonRecAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form NonRec Var CoreExpr CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consNonRecAnyR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Non Rec Any",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consNonRecAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: (\u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consNonRecOneR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consNonRecOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form NonRec Var CoreExpr CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consNonRecOneR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Non Rec One",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consNonRecOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a program of the form: (\u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consNonRecT",
          "package": "hermit",
          "signature": "Translate c m Var a1 -\u003e Translate c m CoreExpr a2 -\u003e Translate c m CoreProg a3 -\u003e (a1 -\u003e a2 -\u003e a3 -\u003e b) -\u003e Translate c m CoreProg b",
          "source": "src/HERMIT-Kure.html#consNonRecT",
          "type": "function"
        },
        "index": {
          "description": "Translate program of the form NonRec Var CoreExpr CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consNonRecT",
          "normalized": "Translate a b Var c-\u003eTranslate a b CoreExpr c-\u003eTranslate a b CoreProg c-\u003e(c-\u003ec-\u003ec-\u003ed)-\u003eTranslate a b CoreProg d",
          "package": "hermit",
          "partial": "Non Rec",
          "signature": "Translate c m Var a-\u003eTranslate c m CoreExpr a-\u003eTranslate c m CoreProg a-\u003e(a-\u003ea-\u003ea-\u003eb)-\u003eTranslate c m CoreProg b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consNonRecT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: (\u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consRecAllR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consRecAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Rec CoreDef CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consRecAllR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Rec All",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consRecAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: (\u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consRecAnyR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consRecAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Rec CoreDef CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consRecAnyR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Rec Any",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consRecAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: (\u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consRecDefAllR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consRecDefAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Rec Id CoreExpr CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consRecDefAllR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Rec Def All",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consRecDefAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: (\u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consRecDefAnyR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consRecDefAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Rec Id CoreExpr CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consRecDefAnyR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Rec Def Any",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consRecDefAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: (\u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consRecDefOneR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consRecDefOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Rec Id CoreExpr CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consRecDefOneR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Rec Def One",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consRecDefOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: (\u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consRecDefT",
          "package": "hermit",
          "signature": "(Int -\u003e (Translate c m Id a1, Translate c m CoreExpr a2)) -\u003e Translate c m CoreProg a3 -\u003e ([(a1, a2)] -\u003e a3 -\u003e b) -\u003e Translate c m CoreProg b",
          "source": "src/HERMIT-Kure.html#consRecDefT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Rec Id CoreExpr CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consRecDefT",
          "normalized": "(Int-\u003e(Translate a b Id c,Translate a b CoreExpr c))-\u003eTranslate a b CoreProg c-\u003e([(c,c)]-\u003ec-\u003ed)-\u003eTranslate a b CoreProg d",
          "package": "hermit",
          "partial": "Rec Def",
          "signature": "(Int-\u003e(Translate c m Id a,Translate c m CoreExpr a))-\u003eTranslate c m CoreProg a-\u003e([(a,a)]-\u003ea-\u003eb)-\u003eTranslate c m CoreProg b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consRecDefT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: (\u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consRecOneR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#consRecOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Rec CoreDef CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consRecOneR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Rec One",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consRecOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: (\u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]) \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "consRecT",
          "package": "hermit",
          "signature": "(Int -\u003e Translate c m CoreDef a1) -\u003e Translate c m CoreProg a2 -\u003e ([a1] -\u003e a2 -\u003e b) -\u003e Translate c m CoreProg b",
          "source": "src/HERMIT-Kure.html#consRecT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Rec CoreDef CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "consRecT",
          "normalized": "(Int-\u003eTranslate a b CoreDef c)-\u003eTranslate a b CoreProg c-\u003e([c]-\u003ec-\u003ed)-\u003eTranslate a b CoreProg d",
          "package": "hermit",
          "partial": "Rec",
          "signature": "(Int-\u003eTranslate c m CoreDef a)-\u003eTranslate c m CoreProg a-\u003e([a]-\u003ea-\u003eb)-\u003eTranslate c m CoreProg b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:consRecT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a recursive definition of the form: \u003ccode\u003eDef\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "defAllR",
          "package": "hermit",
          "signature": "Rewrite c m Id -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreDef",
          "source": "src/HERMIT-Kure.html#defAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of recursive definition of the form Def Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "defAllR",
          "normalized": "Rewrite a b Id-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreDef",
          "package": "hermit",
          "partial": "All",
          "signature": "Rewrite c m Id-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:defAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a recursive definition of the form: \u003ccode\u003eDef\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "defAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Id -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreDef",
          "source": "src/HERMIT-Kure.html#defAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of recursive definition of the form Def Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "defAnyR",
          "normalized": "Rewrite a b Id-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreDef",
          "package": "hermit",
          "partial": "Any",
          "signature": "Rewrite c m Id-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:defAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a recursive definition of the form: \u003ccode\u003eDef\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "defOneR",
          "package": "hermit",
          "signature": "Rewrite c m Id -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreDef",
          "source": "src/HERMIT-Kure.html#defOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of recursive definition of the form Def Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "defOneR",
          "normalized": "Rewrite a b Id-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreDef",
          "package": "hermit",
          "partial": "One",
          "signature": "Rewrite c m Id-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:defOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a definition of the form \u003ccode\u003eNonRec \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e or \u003ccode\u003eDef \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "defOrNonRecAllR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure.html#defOrNonRecAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of definition of the form NonRec Var CoreExpr or Def Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "defOrNonRecAllR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Or Non Rec All",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:defOrNonRecAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a definition of the form \u003ccode\u003eNonRec \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e or \u003ccode\u003eDef \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "defOrNonRecAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure.html#defOrNonRecAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of definition of the form NonRec Var CoreExpr or Def Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "defOrNonRecAnyR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Or Non Rec Any",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:defOrNonRecAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a definition of the form \u003ccode\u003eNonRec \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e or \u003ccode\u003eDef \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "defOrNonRecOneR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m g",
          "source": "src/HERMIT-Kure.html#defOrNonRecOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of definition of the form NonRec Var CoreExpr or Def Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "defOrNonRecOneR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b c",
          "package": "hermit",
          "partial": "Or Non Rec One",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m g",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:defOrNonRecOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a definition of the form \u003ccode\u003eNonRec \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e or \u003ccode\u003eDef \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "defOrNonRecT",
          "package": "hermit",
          "signature": "Translate c m Var a1 -\u003e Translate c m CoreExpr a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m g b",
          "source": "src/HERMIT-Kure.html#defOrNonRecT",
          "type": "function"
        },
        "index": {
          "description": "Translate definition of the form NonRec Var CoreExpr or Def Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "defOrNonRecT",
          "normalized": "Translate a b Var c-\u003eTranslate a b CoreExpr c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b e d",
          "package": "hermit",
          "partial": "Or Non Rec",
          "signature": "Translate c m Var a-\u003eTranslate c m CoreExpr a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m g b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:defOrNonRecT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a recursive definition of the form: \u003ccode\u003eDef\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "defT",
          "package": "hermit",
          "signature": "Translate c m Id a1 -\u003e Translate c m CoreExpr a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m CoreDef b",
          "source": "src/HERMIT-Kure.html#defT",
          "type": "function"
        },
        "index": {
          "description": "Translate recursive definition of the form Def Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "defT",
          "normalized": "Translate a b Id c-\u003eTranslate a b CoreExpr c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b CoreDef d",
          "package": "hermit",
          "signature": "Translate c m Id a-\u003eTranslate c m CoreExpr a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m CoreDef b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:defT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEarlier versions of HERMIT used \u003ccode\u003e\u003ca\u003eInt\u003c/a\u003e\u003c/code\u003e as the crumb type.\n   This translation maps an \u003ccode\u003e\u003ca\u003eInt\u003c/a\u003e\u003c/code\u003e to the corresponding \u003ccode\u003e\u003ca\u003eCrumb\u003c/a\u003e\u003c/code\u003e, for backwards compatibility purposes.\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "deprecatedIntToCrumbT",
          "package": "hermit",
          "signature": "Int -\u003e Translate c m Core Crumb",
          "source": "src/HERMIT-Kure.html#deprecatedIntToCrumbT",
          "type": "function"
        },
        "index": {
          "description": "Earlier versions of HERMIT used Int as the crumb type This translation maps an Int to the corresponding Crumb for backwards compatibility purposes",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "deprecatedIntToCrumbT",
          "normalized": "Int-\u003eTranslate a b Core Crumb",
          "package": "hermit",
          "partial": "Int To Crumb",
          "signature": "Int-\u003eTranslate c m Core Crumb",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:deprecatedIntToCrumbT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eBuilds a path to the first child, based on the old numbering system.\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "deprecatedIntToPathT",
          "package": "hermit",
          "signature": "Int -\u003e Translate c m Core LocalPathH",
          "source": "src/HERMIT-Kure.html#deprecatedIntToPathT",
          "type": "function"
        },
        "index": {
          "description": "Builds path to the first child based on the old numbering system",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "deprecatedIntToPathT",
          "normalized": "Int-\u003eTranslate a b Core LocalPathH",
          "package": "hermit",
          "partial": "Int To Path",
          "signature": "Int-\u003eTranslate c m Core LocalPathH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:deprecatedIntToPathT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a coercion of the form: \u003ccode\u003eForAllCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "forAllCoAllR",
          "package": "hermit",
          "signature": "Rewrite c m TyVar -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#forAllCoAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of coercion of the form ForAllCo TyVar Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "forAllCoAllR",
          "normalized": "Rewrite a b TyVar-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "All Co All",
          "signature": "Rewrite c m TyVar-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:forAllCoAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a coercion of the form: \u003ccode\u003eForAllCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "forAllCoAnyR",
          "package": "hermit",
          "signature": "Rewrite c m TyVar -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#forAllCoAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of coercion of the form ForAllCo TyVar Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "forAllCoAnyR",
          "normalized": "Rewrite a b TyVar-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "All Co Any",
          "signature": "Rewrite c m TyVar-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:forAllCoAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a coercion of the form: \u003ccode\u003eForAllCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "forAllCoOneR",
          "package": "hermit",
          "signature": "Rewrite c m TyVar -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#forAllCoOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of coercion of the form ForAllCo TyVar Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "forAllCoOneR",
          "normalized": "Rewrite a b TyVar-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "All Co One",
          "signature": "Rewrite c m TyVar-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:forAllCoOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eForAllCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "forAllCoT",
          "package": "hermit",
          "signature": "Translate c m TyVar a1 -\u003e Translate c m Coercion a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#forAllCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form ForAllCo TyVar Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "forAllCoT",
          "normalized": "Translate a b TyVar c-\u003eTranslate a b Coercion c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Coercion d",
          "package": "hermit",
          "partial": "All Co",
          "signature": "Translate c m TyVar a-\u003eTranslate c m Coercion a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:forAllCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a type of the form: \u003ccode\u003eForAllTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "forAllTyAllR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#forAllTyAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of type of the form ForAllTy Var Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "forAllTyAllR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "All Ty All",
          "signature": "Rewrite c m Var-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:forAllTyAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a type of the form: \u003ccode\u003eForAllTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "forAllTyAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#forAllTyAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of type of the form ForAllTy Var Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "forAllTyAnyR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "All Ty Any",
          "signature": "Rewrite c m Var-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:forAllTyAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a type of the form: \u003ccode\u003eForAllTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "forAllTyOneR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#forAllTyOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of type of the form ForAllTy Var Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "forAllTyOneR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "All Ty One",
          "signature": "Rewrite c m Var-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:forAllTyOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a type of the form: \u003ccode\u003eForAllTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "forAllTyT",
          "package": "hermit",
          "signature": "Translate c m Var a1 -\u003e Translate c m Type a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Type b",
          "source": "src/HERMIT-Kure.html#forAllTyT",
          "type": "function"
        },
        "index": {
          "description": "Translate type of the form ForAllTy Var Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "forAllTyT",
          "normalized": "Translate a b Var c-\u003eTranslate a b Type c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Type d",
          "package": "hermit",
          "partial": "All Ty",
          "signature": "Translate c m Var a-\u003eTranslate c m Type a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Type b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:forAllTyT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a type of the form: \u003ccode\u003eFunTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "funTyAllR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#funTyAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of type of the form FunTy Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "funTyAllR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Ty All",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:funTyAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a type of the form: \u003ccode\u003eFunTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "funTyAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#funTyAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of type of the form FunTy Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "funTyAnyR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Ty Any",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:funTyAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a type of the form: \u003ccode\u003eFunTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "funTyOneR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#funTyOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of type of the form FunTy Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "funTyOneR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Ty One",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:funTyOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a type of the form: \u003ccode\u003eFunTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "funTyT",
          "package": "hermit",
          "signature": "Translate c m Type a1 -\u003e Translate c m Type a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Type b",
          "source": "src/HERMIT-Kure.html#funTyT",
          "type": "function"
        },
        "index": {
          "description": "Translate type of the form FunTy Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "funTyT",
          "normalized": "Translate a b Type c-\u003eTranslate a b Type c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Type d",
          "package": "hermit",
          "partial": "Ty",
          "signature": "Translate c m Type a-\u003eTranslate c m Type a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Type b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:funTyT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a coercion of the form: \u003ccode\u003eInstCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "instCoAllR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Type -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#instCoAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of coercion of the form InstCo Coercion Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "instCoAllR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Type-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co All",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Type-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:instCoAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a coercion of the form: \u003ccode\u003eInstCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "instCoAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Type -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#instCoAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of coercion of the form InstCo Coercion Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "instCoAnyR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Type-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co Any",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Type-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:instCoAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a coercion of the form: \u003ccode\u003eInstCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "instCoOneR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Type -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#instCoOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of coercion of the form InstCo Coercion Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "instCoOneR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Type-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co One",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Type-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:instCoOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eInstCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "instCoT",
          "package": "hermit",
          "signature": "Translate c m Coercion a1 -\u003e Translate c m Type a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#instCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form InstCo Coercion Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "instCoT",
          "normalized": "Translate a b Coercion c-\u003eTranslate a b Type c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Coercion d",
          "package": "hermit",
          "partial": "Co",
          "signature": "Translate c m Coercion a-\u003eTranslate c m Type a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:instCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eLam\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "lamAllR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#lamAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Lam Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "lamAllR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "All",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:lamAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eLam\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "lamAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#lamAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Lam Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "lamAnyR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Any",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:lamAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eLam\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "lamOneR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#lamOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Lam Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "lamOneR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "One",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:lamOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eLam\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "lamT",
          "package": "hermit",
          "signature": "Translate c m Var a1 -\u003e Translate c m CoreExpr a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#lamT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Lam Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "lamT",
          "normalized": "Translate a b Var c-\u003eTranslate a b CoreExpr c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b CoreExpr d",
          "package": "hermit",
          "signature": "Translate c m Var a-\u003eTranslate c m CoreExpr a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:lamT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letAllR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Let CoreBind CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letAllR",
          "normalized": "Rewrite a b CoreBind-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "All",
          "signature": "Rewrite c m CoreBind-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letAnyR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Let CoreBind CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letAnyR",
          "normalized": "Rewrite a b CoreBind-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Any",
          "signature": "Rewrite c m CoreBind-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letNonRecAllR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letNonRecAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Let NonRec Var CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letNonRecAllR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Non Rec All",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letNonRecAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letNonRecAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letNonRecAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Let NonRec Var CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letNonRecAnyR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Non Rec Any",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letNonRecAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letNonRecOneR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letNonRecOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Let NonRec Var CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letNonRecOneR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Non Rec One",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letNonRecOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letNonRecT",
          "package": "hermit",
          "signature": "Translate c m Var a1 -\u003e Translate c m CoreExpr a2 -\u003e Translate c m CoreExpr a3 -\u003e (a1 -\u003e a2 -\u003e a3 -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#letNonRecT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Let NonRec Var CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letNonRecT",
          "normalized": "Translate a b Var c-\u003eTranslate a b CoreExpr c-\u003eTranslate a b CoreExpr c-\u003e(c-\u003ec-\u003ec-\u003ed)-\u003eTranslate a b CoreExpr d",
          "package": "hermit",
          "partial": "Non Rec",
          "signature": "Translate c m Var a-\u003eTranslate c m CoreExpr a-\u003eTranslate c m CoreExpr a-\u003e(a-\u003ea-\u003ea-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letNonRecT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letOneR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Let CoreBind CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letOneR",
          "normalized": "Rewrite a b CoreBind-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "One",
          "signature": "Rewrite c m CoreBind-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letRecAllR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letRecAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Let Rec CoreDef CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letRecAllR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Rec All",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letRecAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letRecAnyR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letRecAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Let Rec CoreDef CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letRecAnyR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Rec Any",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letRecAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letRecDefAllR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letRecDefAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Let Rec Id CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letRecDefAllR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Rec Def All",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letRecDefAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letRecDefAnyR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letRecDefAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Let Rec Id CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letRecDefAnyR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Rec Def Any",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letRecDefAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letRecDefOneR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letRecDefOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Let Rec Id CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letRecDefOneR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Rec Def One",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letRecDefOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letRecDefT",
          "package": "hermit",
          "signature": "(Int -\u003e (Translate c m Id a1, Translate c m CoreExpr a2)) -\u003e Translate c m CoreExpr a3 -\u003e ([(a1, a2)] -\u003e a3 -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#letRecDefT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Let Rec Id CoreExpr CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letRecDefT",
          "normalized": "(Int-\u003e(Translate a b Id c,Translate a b CoreExpr c))-\u003eTranslate a b CoreExpr c-\u003e([(c,c)]-\u003ec-\u003ed)-\u003eTranslate a b CoreExpr d",
          "package": "hermit",
          "partial": "Rec Def",
          "signature": "(Int-\u003e(Translate c m Id a,Translate c m CoreExpr a))-\u003eTranslate c m CoreExpr a-\u003e([(a,a)]-\u003ea-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letRecDefT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letRecOneR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#letRecOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of an expression of the form Let Rec CoreDef CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letRecOneR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Rec One",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letRecOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eLet\u003c/code\u003e (\u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]) \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letRecT",
          "package": "hermit",
          "signature": "(Int -\u003e Translate c m CoreDef a1) -\u003e Translate c m CoreExpr a2 -\u003e ([a1] -\u003e a2 -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#letRecT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Let Rec CoreDef CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letRecT",
          "normalized": "(Int-\u003eTranslate a b CoreDef c)-\u003eTranslate a b CoreExpr c-\u003e([c]-\u003ec-\u003ed)-\u003eTranslate a b CoreExpr d",
          "package": "hermit",
          "partial": "Rec",
          "signature": "(Int-\u003eTranslate c m CoreDef a)-\u003eTranslate c m CoreExpr a-\u003e([a]-\u003ea-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letRecT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eLet\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "letT",
          "package": "hermit",
          "signature": "Translate c m CoreBind a1 -\u003e Translate c m CoreExpr a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#letT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Let CoreBind CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "letT",
          "normalized": "Translate a b CoreBind c-\u003eTranslate a b CoreExpr c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b CoreExpr d",
          "package": "hermit",
          "signature": "Translate c m CoreBind a-\u003eTranslate c m CoreExpr a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:letT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eLiteral\u003c/a\u003e\u003c/code\u003e child in an expression of the form: \u003ccode\u003eLit\u003c/code\u003e \u003ccode\u003e\u003ca\u003eLiteral\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "litR",
          "package": "hermit",
          "signature": "Rewrite c m Literal -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#litR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the Literal child in an expression of the form Lit Literal",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "litR",
          "normalized": "Rewrite a b Literal-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "signature": "Rewrite c m Literal-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:litR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eLit\u003c/code\u003e \u003ccode\u003e\u003ca\u003eLiteral\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "litT",
          "package": "hermit",
          "signature": "Translate c m Literal b -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#litT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Lit Literal",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "litT",
          "normalized": "Translate a b Literal c-\u003eTranslate a b CoreExpr c",
          "package": "hermit",
          "signature": "Translate c m Literal b-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:litT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eTyLit\u003c/a\u003e\u003c/code\u003e child of a type of the form: \u003ccode\u003eLitTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyLit\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "litTyR",
          "package": "hermit",
          "signature": "Rewrite c m TyLit -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#litTyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the TyLit child of type of the form LitTy TyLit",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "litTyR",
          "normalized": "Rewrite a b TyLit-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Ty",
          "signature": "Rewrite c m TyLit-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:litTyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a type of the form: \u003ccode\u003eLitTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyLit\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "litTyT",
          "package": "hermit",
          "signature": "Translate c m TyLit b -\u003e Translate c m Type b",
          "source": "src/HERMIT-Kure.html#litTyT",
          "type": "function"
        },
        "index": {
          "description": "Translate type of the form LitTy TyLit",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "litTyT",
          "normalized": "Translate a b TyLit c-\u003eTranslate a b Type c",
          "package": "hermit",
          "partial": "Ty",
          "signature": "Translate c m TyLit b-\u003eTranslate c m Type b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:litTyT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e child of a module.\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "modGutsR",
          "package": "hermit",
          "signature": "Rewrite c m CoreProg -\u003e Rewrite c m ModGuts",
          "source": "src/HERMIT-Kure.html#modGutsR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the CoreProg child of module",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "modGutsR",
          "normalized": "Rewrite a b CoreProg-\u003eRewrite a b ModGuts",
          "package": "hermit",
          "partial": "Guts",
          "signature": "Rewrite c m CoreProg-\u003eRewrite c m ModGuts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:modGutsR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a module.\n   Slightly different to the other congruence combinators: it passes in \u003cem\u003eall\u003c/em\u003e of the original to the reconstruction function.\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "modGutsT",
          "package": "hermit",
          "signature": "Translate c m CoreProg a -\u003e (ModGuts -\u003e a -\u003e b) -\u003e Translate c m ModGuts b",
          "source": "src/HERMIT-Kure.html#modGutsT",
          "type": "function"
        },
        "index": {
          "description": "Translate module Slightly different to the other congruence combinators it passes in all of the original to the reconstruction function",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "modGutsT",
          "normalized": "Translate a b CoreProg c-\u003e(ModGuts-\u003ec-\u003ed)-\u003eTranslate a b ModGuts d",
          "package": "hermit",
          "partial": "Guts",
          "signature": "Translate c m CoreProg a-\u003e(ModGuts-\u003ea-\u003eb)-\u003eTranslate c m ModGuts b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:modGutsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a binding group of the form: \u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "nonRecAllR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#nonRecAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of binding group of the form NonRec Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "nonRecAllR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "Rec All",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:nonRecAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a binding group of the form: \u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "nonRecAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#nonRecAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of binding group of the form NonRec Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "nonRecAnyR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "Rec Any",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:nonRecAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a binding group of the form: \u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "nonRecOneR",
          "package": "hermit",
          "signature": "Rewrite c m Var -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#nonRecOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of binding group of the form NonRec Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "nonRecOneR",
          "normalized": "Rewrite a b Var-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "Rec One",
          "signature": "Rewrite c m Var-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:nonRecOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a binding group of the form: \u003ccode\u003eNonRec\u003c/code\u003e \u003ccode\u003e\u003ca\u003eVar\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "nonRecT",
          "package": "hermit",
          "signature": "Translate c m Var a1 -\u003e Translate c m CoreExpr a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m CoreBind b",
          "source": "src/HERMIT-Kure.html#nonRecT",
          "type": "function"
        },
        "index": {
          "description": "Translate binding group of the form NonRec Var CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "nonRecT",
          "normalized": "Translate a b Var c-\u003eTranslate a b CoreExpr c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b CoreBind d",
          "package": "hermit",
          "partial": "Rec",
          "signature": "Translate c m Var a-\u003eTranslate c m CoreExpr a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m CoreBind b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:nonRecT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a coercion of the form: \u003ccode\u003eNthCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eInt\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "nthCoAllR",
          "package": "hermit",
          "signature": "Rewrite c m Int -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#nthCoAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of coercion of the form NthCo Int Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "nthCoAllR",
          "normalized": "Rewrite a b Int-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co All",
          "signature": "Rewrite c m Int-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:nthCoAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a coercion of the form: \u003ccode\u003eNthCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eInt\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "nthCoAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Int -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#nthCoAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of coercion of the form NthCo Int Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "nthCoAnyR",
          "normalized": "Rewrite a b Int-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co Any",
          "signature": "Rewrite c m Int-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:nthCoAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a coercion of the form: \u003ccode\u003eNthCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eInt\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "nthCoOneR",
          "package": "hermit",
          "signature": "Rewrite c m Int -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#nthCoOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of coercion of the form NthCo Int Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "nthCoOneR",
          "normalized": "Rewrite a b Int-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co One",
          "signature": "Rewrite c m Int-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:nthCoOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eNthCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eInt\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "nthCoT",
          "package": "hermit",
          "signature": "Translate c m Int a1 -\u003e Translate c m Coercion a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#nthCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form NthCo Int Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "nthCoT",
          "normalized": "Translate a b Int c-\u003eTranslate a b Coercion c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Coercion d",
          "package": "hermit",
          "partial": "Co",
          "signature": "Translate c m Int a-\u003eTranslate c m Coercion a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:nthCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a program of the form: (\u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "progConsAllR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#progConsAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of program of the form CoreBind CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "progConsAllR",
          "normalized": "Rewrite a b CoreBind-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Cons All",
          "signature": "Rewrite c m CoreBind-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:progConsAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a program of the form: (\u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "progConsAnyR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#progConsAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of program of the form CoreBind CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "progConsAnyR",
          "normalized": "Rewrite a b CoreBind-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Cons Any",
          "signature": "Rewrite c m CoreBind-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:progConsAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a program of the form: (\u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "progConsOneR",
          "package": "hermit",
          "signature": "Rewrite c m CoreBind -\u003e Rewrite c m CoreProg -\u003e Rewrite c m CoreProg",
          "source": "src/HERMIT-Kure.html#progConsOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of program of the form CoreBind CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "progConsOneR",
          "normalized": "Rewrite a b CoreBind-\u003eRewrite a b CoreProg-\u003eRewrite a b CoreProg",
          "package": "hermit",
          "partial": "Cons One",
          "signature": "Rewrite c m CoreBind-\u003eRewrite c m CoreProg-\u003eRewrite c m CoreProg",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:progConsOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a program of the form: (\u003ccode\u003e\u003ca\u003eCoreBind\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e:\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreProg\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "progConsT",
          "package": "hermit",
          "signature": "Translate c m CoreBind a1 -\u003e Translate c m CoreProg a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m CoreProg b",
          "source": "src/HERMIT-Kure.html#progConsT",
          "type": "function"
        },
        "index": {
          "description": "Translate program of the form CoreBind CoreProg",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "progConsT",
          "normalized": "Translate a b CoreBind c-\u003eTranslate a b CoreProg c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b CoreProg d",
          "package": "hermit",
          "partial": "Cons",
          "signature": "Translate c m CoreBind a-\u003eTranslate c m CoreProg a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m CoreProg b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:progConsT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an empty list.\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "progNilT",
          "package": "hermit",
          "signature": "b -\u003e Translate c m CoreProg b",
          "source": "src/HERMIT-Kure.html#progNilT",
          "type": "function"
        },
        "index": {
          "description": "Translate an empty list",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "progNilT",
          "normalized": "a-\u003eTranslate b c CoreProg a",
          "package": "hermit",
          "partial": "Nil",
          "signature": "b-\u003eTranslate c m CoreProg b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:progNilT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a binding group of the form: \u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "recAllR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#recAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of binding group of the form Rec CoreDef",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "recAllR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "All",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:recAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a binding group of the form: \u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "recAnyR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#recAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of binding group of the form Rec CoreDef",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "recAnyR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "Any",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:recAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a binding group of the form: \u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "recDefAllR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#recDefAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of binding group of the form Rec Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "recDefAllR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "Def All",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:recDefAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a binding group of the form: \u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "recDefAnyR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#recDefAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of binding group of the form Rec Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "recDefAnyR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "Def Any",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:recDefAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a binding group of the form: \u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "recDefOneR",
          "package": "hermit",
          "signature": "(Int -\u003e (Rewrite c m Id, Rewrite c m CoreExpr)) -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#recDefOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of binding group of the form Rec Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "recDefOneR",
          "normalized": "(Int-\u003e(Rewrite a b Id,Rewrite a b CoreExpr))-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "Def One",
          "signature": "(Int-\u003e(Rewrite c m Id,Rewrite c m CoreExpr))-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:recDefOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a binding group of the form: \u003ccode\u003eRec\u003c/code\u003e [(\u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e)]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "recDefT",
          "package": "hermit",
          "signature": "(Int -\u003e (Translate c m Id a1, Translate c m CoreExpr a2)) -\u003e ([(a1, a2)] -\u003e b) -\u003e Translate c m CoreBind b",
          "source": "src/HERMIT-Kure.html#recDefT",
          "type": "function"
        },
        "index": {
          "description": "Translate binding group of the form Rec Id CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "recDefT",
          "normalized": "(Int-\u003e(Translate a b Id c,Translate a b CoreExpr c))-\u003e([(c,c)]-\u003ed)-\u003eTranslate a b CoreBind d",
          "package": "hermit",
          "partial": "Def",
          "signature": "(Int-\u003e(Translate c m Id a,Translate c m CoreExpr a))-\u003e([(a,a)]-\u003eb)-\u003eTranslate c m CoreBind b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:recDefT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a binding group of the form: \u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "recOneR",
          "package": "hermit",
          "signature": "(Int -\u003e Rewrite c m CoreDef) -\u003e Rewrite c m CoreBind",
          "source": "src/HERMIT-Kure.html#recOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of binding group of the form Rec CoreDef",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "recOneR",
          "normalized": "(Int-\u003eRewrite a b CoreDef)-\u003eRewrite a b CoreBind",
          "package": "hermit",
          "partial": "One",
          "signature": "(Int-\u003eRewrite c m CoreDef)-\u003eRewrite c m CoreBind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:recOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a binding group of the form: \u003ccode\u003eRec\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoreDef\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "recT",
          "package": "hermit",
          "signature": "(Int -\u003e Translate c m CoreDef a) -\u003e ([a] -\u003e b) -\u003e Translate c m CoreBind b",
          "source": "src/HERMIT-Kure.html#recT",
          "type": "function"
        },
        "index": {
          "description": "Translate binding group of the form Rec CoreDef",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "recT",
          "normalized": "(Int-\u003eTranslate a b CoreDef c)-\u003e([c]-\u003ed)-\u003eTranslate a b CoreBind d",
          "package": "hermit",
          "signature": "(Int-\u003eTranslate c m CoreDef a)-\u003e([a]-\u003eb)-\u003eTranslate c m CoreBind b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:recT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e child of a coercion of the form: \u003ccode\u003eRefl\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "reflR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#reflR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the Type child of coercion of the form Refl Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "reflR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Coercion",
          "package": "hermit",
          "signature": "Rewrite c m Type-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:reflR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eRefl\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "reflT",
          "package": "hermit",
          "signature": "Translate c m Type b -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#reflT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form Refl Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "reflT",
          "normalized": "Translate a b Type c-\u003eTranslate a b Coercion c",
          "package": "hermit",
          "signature": "Translate c m Type b-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:reflT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e child of a coercion of the form: \u003ccode\u003eSymCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "symCoR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#symCoR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the Coercion child of coercion of the form SymCo Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "symCoR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:symCoR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eSymCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "symCoT",
          "package": "hermit",
          "signature": "Translate c m Coercion b -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#symCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form SymCo Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "symCoT",
          "normalized": "Translate a b Coercion c-\u003eTranslate a b Coercion c",
          "package": "hermit",
          "partial": "Co",
          "signature": "Translate c m Coercion b-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:symCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of an expression of the form: \u003ccode\u003eTick\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreTickish\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tickAllR",
          "package": "hermit",
          "signature": "Rewrite c m CoreTickish -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#tickAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of an expression of the form Tick CoreTickish CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tickAllR",
          "normalized": "Rewrite a b CoreTickish-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "All",
          "signature": "Rewrite c m CoreTickish-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tickAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eTick\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreTickish\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tickAnyR",
          "package": "hermit",
          "signature": "Rewrite c m CoreTickish -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#tickAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Tick CoreTickish CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tickAnyR",
          "normalized": "Rewrite a b CoreTickish-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "Any",
          "signature": "Rewrite c m CoreTickish-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tickAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of an expression of the form: \u003ccode\u003eTick\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreTickish\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tickOneR",
          "package": "hermit",
          "signature": "Rewrite c m CoreTickish -\u003e Rewrite c m CoreExpr -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#tickOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of an expression of the form Tick CoreTickish CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tickOneR",
          "normalized": "Rewrite a b CoreTickish-\u003eRewrite a b CoreExpr-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "partial": "One",
          "signature": "Rewrite c m CoreTickish-\u003eRewrite c m CoreExpr-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tickOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eTick\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreTickish\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tickT",
          "package": "hermit",
          "signature": "Translate c m CoreTickish a1 -\u003e Translate c m CoreExpr a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#tickT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Tick CoreTickish CoreExpr",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tickT",
          "normalized": "Translate a b CoreTickish c-\u003eTranslate a b CoreExpr c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b CoreExpr d",
          "package": "hermit",
          "signature": "Translate c m CoreTickish a-\u003eTranslate c m CoreExpr a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tickT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a coercion of the form: \u003ccode\u003eTransCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "transCoAllR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#transCoAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of coercion of the form TransCo Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "transCoAllR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co All",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:transCoAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a coercion of the form: \u003ccode\u003eTransCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "transCoAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#transCoAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of coercion of the form TransCo Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "transCoAnyR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co Any",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:transCoAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a coercion of the form: \u003ccode\u003eTransCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "transCoOneR",
          "package": "hermit",
          "signature": "Rewrite c m Coercion -\u003e Rewrite c m Coercion -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#transCoOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of coercion of the form TransCo Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "transCoOneR",
          "normalized": "Rewrite a b Coercion-\u003eRewrite a b Coercion-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co One",
          "signature": "Rewrite c m Coercion-\u003eRewrite c m Coercion-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:transCoOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eTransCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "transCoT",
          "package": "hermit",
          "signature": "Translate c m Coercion a1 -\u003e Translate c m Coercion a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#transCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form TransCo Coercion Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "transCoT",
          "normalized": "Translate a b Coercion c-\u003eTranslate a b Coercion c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Coercion d",
          "package": "hermit",
          "partial": "Co",
          "signature": "Translate c m Coercion a-\u003eTranslate c m Coercion a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:transCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a type of the form: \u003ccode\u003eTyConApp\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eKindOrType\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyConAppAllR",
          "package": "hermit",
          "signature": "Rewrite c m TyCon -\u003e (Int -\u003e Rewrite c m KindOrType) -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#tyConAppAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of type of the form TyConApp TyCon KindOrType",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyConAppAllR",
          "normalized": "Rewrite a b TyCon-\u003e(Int-\u003eRewrite a b KindOrType)-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Con App All",
          "signature": "Rewrite c m TyCon-\u003e(Int-\u003eRewrite c m KindOrType)-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyConAppAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a type of the form: \u003ccode\u003eTyConApp\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eKindOrType\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyConAppAnyR",
          "package": "hermit",
          "signature": "Rewrite c m TyCon -\u003e (Int -\u003e Rewrite c m KindOrType) -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#tyConAppAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of type of the form TyConApp TyCon KindOrType",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyConAppAnyR",
          "normalized": "Rewrite a b TyCon-\u003e(Int-\u003eRewrite a b KindOrType)-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Con App Any",
          "signature": "Rewrite c m TyCon-\u003e(Int-\u003eRewrite c m KindOrType)-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyConAppAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a coercion of the form: \u003ccode\u003eTyConAppCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyConAppCoAllR",
          "package": "hermit",
          "signature": "Rewrite c m TyCon -\u003e (Int -\u003e Rewrite c m Coercion) -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#tyConAppCoAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of coercion of the form TyConAppCo TyCon Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyConAppCoAllR",
          "normalized": "Rewrite a b TyCon-\u003e(Int-\u003eRewrite a b Coercion)-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Con App Co All",
          "signature": "Rewrite c m TyCon-\u003e(Int-\u003eRewrite c m Coercion)-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyConAppCoAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a coercion of the form: \u003ccode\u003eTyConAppCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyConAppCoAnyR",
          "package": "hermit",
          "signature": "Rewrite c m TyCon -\u003e (Int -\u003e Rewrite c m Coercion) -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#tyConAppCoAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of coercion of the form TyConAppCo TyCon Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyConAppCoAnyR",
          "normalized": "Rewrite a b TyCon-\u003e(Int-\u003eRewrite a b Coercion)-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Con App Co Any",
          "signature": "Rewrite c m TyCon-\u003e(Int-\u003eRewrite c m Coercion)-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyConAppCoAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a coercion of the form: \u003ccode\u003eTyConAppCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyConAppCoOneR",
          "package": "hermit",
          "signature": "Rewrite c m TyCon -\u003e (Int -\u003e Rewrite c m Coercion) -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#tyConAppCoOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of coercion of the form TyConAppCo TyCon Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyConAppCoOneR",
          "normalized": "Rewrite a b TyCon-\u003e(Int-\u003eRewrite a b Coercion)-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Con App Co One",
          "signature": "Rewrite c m TyCon-\u003e(Int-\u003eRewrite c m Coercion)-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyConAppCoOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eTyConAppCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eCoercion\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyConAppCoT",
          "package": "hermit",
          "signature": "Translate c m TyCon a1 -\u003e (Int -\u003e Translate c m Coercion a2) -\u003e (a1 -\u003e [a2] -\u003e b) -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#tyConAppCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form TyConAppCo TyCon Coercion",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyConAppCoT",
          "normalized": "Translate a b TyCon c-\u003e(Int-\u003eTranslate a b Coercion c)-\u003e(c-\u003e[c]-\u003ed)-\u003eTranslate a b Coercion d",
          "package": "hermit",
          "partial": "Con App Co",
          "signature": "Translate c m TyCon a-\u003e(Int-\u003eTranslate c m Coercion a)-\u003e(a-\u003e[a]-\u003eb)-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyConAppCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a type of the form: \u003ccode\u003eTyConApp\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eKindOrType\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyConAppOneR",
          "package": "hermit",
          "signature": "Rewrite c m TyCon -\u003e (Int -\u003e Rewrite c m KindOrType) -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#tyConAppOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of type of the form TyConApp TyCon KindOrType",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyConAppOneR",
          "normalized": "Rewrite a b TyCon-\u003e(Int-\u003eRewrite a b KindOrType)-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Con App One",
          "signature": "Rewrite c m TyCon-\u003e(Int-\u003eRewrite c m KindOrType)-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyConAppOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a type of the form: \u003ccode\u003eTyConApp\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyCon\u003c/a\u003e\u003c/code\u003e [\u003ccode\u003e\u003ca\u003eKindOrType\u003c/a\u003e\u003c/code\u003e]\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyConAppT",
          "package": "hermit",
          "signature": "Translate c m TyCon a1 -\u003e (Int -\u003e Translate c m KindOrType a2) -\u003e (a1 -\u003e [a2] -\u003e b) -\u003e Translate c m Type b",
          "source": "src/HERMIT-Kure.html#tyConAppT",
          "type": "function"
        },
        "index": {
          "description": "Translate type of the form TyConApp TyCon KindOrType",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyConAppT",
          "normalized": "Translate a b TyCon c-\u003e(Int-\u003eTranslate a b KindOrType c)-\u003e(c-\u003e[c]-\u003ed)-\u003eTranslate a b Type d",
          "package": "hermit",
          "partial": "Con App",
          "signature": "Translate c m TyCon a-\u003e(Int-\u003eTranslate c m KindOrType a)-\u003e(a-\u003e[a]-\u003eb)-\u003eTranslate c m Type b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyConAppT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e child of a type of the form: \u003ccode\u003eTyVarTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyVarR",
          "package": "hermit",
          "signature": "Rewrite c m TyVar -\u003e Rewrite c m Type",
          "source": "src/HERMIT-Kure.html#tyVarR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the TyVar child of type of the form TyVarTy TyVar",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyVarR",
          "normalized": "Rewrite a b TyVar-\u003eRewrite a b Type",
          "package": "hermit",
          "partial": "Var",
          "signature": "Rewrite c m TyVar-\u003eRewrite c m Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyVarR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a type of the form: \u003ccode\u003eTyVarTy\u003c/code\u003e \u003ccode\u003e\u003ca\u003eTyVar\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "tyVarT",
          "package": "hermit",
          "signature": "Translate c m TyVar b -\u003e Translate c m Type b",
          "source": "src/HERMIT-Kure.html#tyVarT",
          "type": "function"
        },
        "index": {
          "description": "Translate type of the form TyVarTy TyVar",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "tyVarT",
          "normalized": "Translate a b TyVar c-\u003eTranslate a b Type c",
          "package": "hermit",
          "partial": "Var",
          "signature": "Translate c m TyVar b-\u003eTranslate c m Type b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:tyVarT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e child in an expression of the form: \u003ccode\u003eType\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "typeR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#typeR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the Type child in an expression of the form Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "typeR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "signature": "Rewrite c m Type-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:typeR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eType\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "typeT",
          "package": "hermit",
          "signature": "Translate c m Type b -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#typeT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "typeT",
          "normalized": "Translate a b Type c-\u003eTranslate a b CoreExpr c",
          "package": "hermit",
          "signature": "Translate c m Type b-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:typeT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite all children of a coercion of the form: \u003ccode\u003eUnsafeCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "unsafeCoAllR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#unsafeCoAllR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite all children of coercion of the form UnsafeCo Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "unsafeCoAllR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co All",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:unsafeCoAllR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite any children of a coercion of the form: \u003ccode\u003eUnsafeCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "unsafeCoAnyR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#unsafeCoAnyR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite any children of coercion of the form UnsafeCo Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "unsafeCoAnyR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co Any",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:unsafeCoAnyR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite one child of a coercion of the form: \u003ccode\u003eUnsafeCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "unsafeCoOneR",
          "package": "hermit",
          "signature": "Rewrite c m Type -\u003e Rewrite c m Type -\u003e Rewrite c m Coercion",
          "source": "src/HERMIT-Kure.html#unsafeCoOneR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite one child of coercion of the form UnsafeCo Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "unsafeCoOneR",
          "normalized": "Rewrite a b Type-\u003eRewrite a b Type-\u003eRewrite a b Coercion",
          "package": "hermit",
          "partial": "Co One",
          "signature": "Rewrite c m Type-\u003eRewrite c m Type-\u003eRewrite c m Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:unsafeCoOneR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate a coercion of the form: \u003ccode\u003eUnsafeCo\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eType\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "unsafeCoT",
          "package": "hermit",
          "signature": "Translate c m Type a1 -\u003e Translate c m Type a2 -\u003e (a1 -\u003e a2 -\u003e b) -\u003e Translate c m Coercion b",
          "source": "src/HERMIT-Kure.html#unsafeCoT",
          "type": "function"
        },
        "index": {
          "description": "Translate coercion of the form UnsafeCo Type Type",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "unsafeCoT",
          "normalized": "Translate a b Type c-\u003eTranslate a b Type c-\u003e(c-\u003ec-\u003ed)-\u003eTranslate a b Coercion d",
          "package": "hermit",
          "partial": "Co",
          "signature": "Translate c m Type a-\u003eTranslate c m Type a-\u003e(a-\u003ea-\u003eb)-\u003eTranslate c m Coercion b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:unsafeCoT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRewrite the \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e child in an expression of the form: \u003ccode\u003eVar\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "varR",
          "package": "hermit",
          "signature": "Rewrite c m Id -\u003e Rewrite c m CoreExpr",
          "source": "src/HERMIT-Kure.html#varR",
          "type": "function"
        },
        "index": {
          "description": "Rewrite the Id child in an expression of the form Var Id",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "varR",
          "normalized": "Rewrite a b Id-\u003eRewrite a b CoreExpr",
          "package": "hermit",
          "signature": "Rewrite c m Id-\u003eRewrite c m CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:varR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTranslate an expression of the form: \u003ccode\u003eVar\u003c/code\u003e \u003ccode\u003e\u003ca\u003eId\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
          "module": "HERMIT.Kure",
          "name": "varT",
          "package": "hermit",
          "signature": "Translate c m Id b -\u003e Translate c m CoreExpr b",
          "source": "src/HERMIT-Kure.html#varT",
          "type": "function"
        },
        "index": {
          "description": "Translate an expression of the form Var Id",
          "hierarchy": "HERMIT Kure",
          "module": "HERMIT.Kure",
          "name": "varT",
          "normalized": "Translate a b Id c-\u003eTranslate a b CoreExpr c",
          "package": "hermit",
          "signature": "Translate c m Id b-\u003eTranslate c m CoreExpr b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Kure.html#v:varT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Monad",
          "name": "Monad",
          "package": "hermit",
          "source": "src/HERMIT-Monad.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "Monad",
          "package": "hermit",
          "partial": "Monad",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA message packet.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "DebugMessage",
          "package": "hermit",
          "source": "src/HERMIT-Monad.html#DebugMessage",
          "type": "data"
        },
        "index": {
          "description": "message packet",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "DebugMessage",
          "package": "hermit",
          "partial": "Debug Message",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#t:DebugMessage"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA store of saved definitions.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "DefStash",
          "package": "hermit",
          "source": "src/HERMIT-Monad.html#DefStash",
          "type": "type"
        },
        "index": {
          "description": "store of saved definitions",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "DefStash",
          "package": "hermit",
          "partial": "Def Stash",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#t:DefStash"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe HERMIT monad is kept abstract.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "HermitM",
          "package": "hermit",
          "source": "src/HERMIT-Monad.html#HermitM",
          "type": "data"
        },
        "index": {
          "description": "The HERMIT monad is kept abstract",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "HermitM",
          "package": "hermit",
          "partial": "Hermit",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#t:HermitM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA way of sending messages to top level\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "HermitMEnv",
          "package": "hermit",
          "source": "src/HERMIT-Monad.html#HermitMEnv",
          "type": "newtype"
        },
        "index": {
          "description": "way of sending messages to top level",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "HermitMEnv",
          "package": "hermit",
          "partial": "Hermit MEnv",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#t:HermitMEnv"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA label for individual definitions.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "Label",
          "package": "hermit",
          "source": "src/HERMIT-Monad.html#Label",
          "type": "type"
        },
        "index": {
          "description": "label for individual definitions",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "Label",
          "package": "hermit",
          "partial": "Label",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#t:Label"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Monad",
          "name": "DebugCore",
          "package": "hermit",
          "signature": "DebugCore String HermitC CoreTC",
          "source": "src/HERMIT-Monad.html#DebugMessage",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "DebugCore",
          "package": "hermit",
          "partial": "Debug Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:DebugCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Monad",
          "name": "DebugTick",
          "package": "hermit",
          "signature": "DebugTick String",
          "source": "src/HERMIT-Monad.html#DebugMessage",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "DebugTick",
          "package": "hermit",
          "partial": "Debug Tick",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:DebugTick"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Monad",
          "name": "HermitMEnv",
          "package": "hermit",
          "signature": "HermitMEnv",
          "source": "src/HERMIT-Monad.html#HermitMEnv",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "HermitMEnv",
          "package": "hermit",
          "partial": "Hermit MEnv",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:HermitMEnv"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMake a new variable of the same type, with a modified textual name.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "cloneVarH",
          "package": "hermit",
          "signature": "(String -\u003e String) -\u003e Var -\u003e HermitM Var",
          "source": "src/HERMIT-Monad.html#cloneVarH",
          "type": "function"
        },
        "index": {
          "description": "Make new variable of the same type with modified textual name",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "cloneVarH",
          "normalized": "(String-\u003eString)-\u003eVar-\u003eHermitM Var",
          "package": "hermit",
          "partial": "Var",
          "signature": "(String-\u003eString)-\u003eVar-\u003eHermitM Var",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:cloneVarH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet the stash of saved definitions.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "getStash",
          "package": "hermit",
          "signature": "HermitM DefStash",
          "source": "src/HERMIT-Monad.html#getStash",
          "type": "function"
        },
        "index": {
          "description": "Get the stash of saved definitions",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "getStash",
          "package": "hermit",
          "partial": "Stash",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:getStash"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Monad",
          "name": "hs_debugChan",
          "package": "hermit",
          "signature": "DebugMessage -\u003e HermitM ()",
          "source": "src/HERMIT-Monad.html#HermitMEnv",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "hs_debugChan",
          "normalized": "DebugMessage-\u003eHermitM()",
          "package": "hermit",
          "partial": "Chan",
          "signature": "DebugMessage-\u003eHermitM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:hs_debugChan"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003e\u003ca\u003eCoreM\u003c/a\u003e\u003c/code\u003e can be lifted to \u003ccode\u003e\u003ca\u003eHermitM\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "liftCoreM",
          "package": "hermit",
          "signature": "CoreM a -\u003e HermitM a",
          "source": "src/HERMIT-Monad.html#liftCoreM",
          "type": "function"
        },
        "index": {
          "description": "CoreM can be lifted to HermitM",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "liftCoreM",
          "normalized": "CoreM a-\u003eHermitM a",
          "package": "hermit",
          "partial": "Core",
          "signature": "CoreM a-\u003eHermitM a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:liftCoreM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLookup a previously saved definition.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "lookupDef",
          "package": "hermit",
          "signature": "Label -\u003e HermitM CoreDef",
          "source": "src/HERMIT-Monad.html#lookupDef",
          "type": "function"
        },
        "index": {
          "description": "Lookup previously saved definition",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "lookupDef",
          "normalized": "Label-\u003eHermitM CoreDef",
          "package": "hermit",
          "partial": "Def",
          "signature": "Label-\u003eHermitM CoreDef",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:lookupDef"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Monad",
          "name": "mkHermitMEnv",
          "package": "hermit",
          "signature": "(DebugMessage -\u003e HermitM ()) -\u003e HermitMEnv",
          "source": "src/HERMIT-Monad.html#mkHermitMEnv",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "mkHermitMEnv",
          "normalized": "(DebugMessage-\u003eHermitM())-\u003eHermitMEnv",
          "package": "hermit",
          "partial": "Hermit MEnv",
          "signature": "(DebugMessage-\u003eHermitM())-\u003eHermitMEnv",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:mkHermitMEnv"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMake a unique coercion variable for a specified type, using a provided name.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "newCoVarH",
          "package": "hermit",
          "signature": "String -\u003e Type -\u003e HermitM TyVar",
          "source": "src/HERMIT-Monad.html#newCoVarH",
          "type": "function"
        },
        "index": {
          "description": "Make unique coercion variable for specified type using provided name",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "newCoVarH",
          "normalized": "String-\u003eType-\u003eHermitM TyVar",
          "package": "hermit",
          "partial": "Co Var",
          "signature": "String-\u003eType-\u003eHermitM TyVar",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:newCoVarH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMake a unique global identifier for a specified type, using a provided name.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "newGlobalIdH",
          "package": "hermit",
          "signature": "String -\u003e Type -\u003e HermitM Id",
          "source": "src/HERMIT-Monad.html#newGlobalIdH",
          "type": "function"
        },
        "index": {
          "description": "Make unique global identifier for specified type using provided name",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "newGlobalIdH",
          "normalized": "String-\u003eType-\u003eHermitM Id",
          "package": "hermit",
          "partial": "Global Id",
          "signature": "String-\u003eType-\u003eHermitM Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:newGlobalIdH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMake a unique identifier for a specified type, using a provided name.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "newIdH",
          "package": "hermit",
          "signature": "String -\u003e Type -\u003e HermitM Id",
          "source": "src/HERMIT-Monad.html#newIdH",
          "type": "function"
        },
        "index": {
          "description": "Make unique identifier for specified type using provided name",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "newIdH",
          "normalized": "String-\u003eType-\u003eHermitM Id",
          "package": "hermit",
          "partial": "Id",
          "signature": "String-\u003eType-\u003eHermitM Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:newIdH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMake a unique type variable for a specified kind, using a provided name.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "newTyVarH",
          "package": "hermit",
          "signature": "String -\u003e Kind -\u003e HermitM TyVar",
          "source": "src/HERMIT-Monad.html#newTyVarH",
          "type": "function"
        },
        "index": {
          "description": "Make unique type variable for specified kind using provided name",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "newTyVarH",
          "normalized": "String-\u003eKind-\u003eHermitM TyVar",
          "package": "hermit",
          "partial": "Ty Var",
          "signature": "String-\u003eKind-\u003eHermitM TyVar",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:newTyVarH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEliminator for \u003ccode\u003e\u003ca\u003eHermitM\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "runHM",
          "package": "hermit",
          "signature": "HermitMEnv -\u003e DefStash -\u003e (DefStash -\u003e a -\u003e CoreM b) -\u003e (String -\u003e CoreM b) -\u003e HermitM a -\u003e CoreM b",
          "source": "src/HERMIT-Monad.html#runHM",
          "type": "function"
        },
        "index": {
          "description": "Eliminator for HermitM",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "runHM",
          "normalized": "HermitMEnv-\u003eDefStash-\u003e(DefStash-\u003ea-\u003eCoreM b)-\u003e(String-\u003eCoreM b)-\u003eHermitM a-\u003eCoreM b",
          "package": "hermit",
          "partial": "HM",
          "signature": "HermitMEnv-\u003eDefStash-\u003e(DefStash-\u003ea-\u003eCoreM b)-\u003e(String-\u003eCoreM b)-\u003eHermitM a-\u003eCoreM b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:runHM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSave a definition for future use.\n\u003c/p\u003e",
          "module": "HERMIT.Monad",
          "name": "saveDef",
          "package": "hermit",
          "signature": "Label -\u003e CoreDef -\u003e HermitM ()",
          "source": "src/HERMIT-Monad.html#saveDef",
          "type": "function"
        },
        "index": {
          "description": "Save definition for future use",
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "saveDef",
          "normalized": "Label-\u003eCoreDef-\u003eHermitM()",
          "package": "hermit",
          "partial": "Def",
          "signature": "Label-\u003eCoreDef-\u003eHermitM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:saveDef"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Monad",
          "name": "sendDebugMessage",
          "package": "hermit",
          "signature": "DebugMessage -\u003e HermitM ()",
          "source": "src/HERMIT-Monad.html#sendDebugMessage",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Monad",
          "module": "HERMIT.Monad",
          "name": "sendDebugMessage",
          "normalized": "DebugMessage-\u003eHermitM()",
          "package": "hermit",
          "partial": "Debug Message",
          "signature": "DebugMessage-\u003eHermitM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Monad.html#v:sendDebugMessage"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "Optimize",
          "package": "hermit",
          "source": "src/HERMIT-Optimize.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "Optimize",
          "package": "hermit",
          "partial": "Optimize",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "OM",
          "package": "hermit",
          "source": "src/HERMIT-Optimize.html#OM",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "OM",
          "package": "hermit",
          "partial": "OM",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#t:OM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "after",
          "package": "hermit",
          "signature": "CorePass -\u003e OM () -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#after",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "after",
          "normalized": "CorePass-\u003eOM()-\u003eOM()",
          "package": "hermit",
          "signature": "CorePass-\u003eOM()-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:after"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "allPhases",
          "package": "hermit",
          "signature": "OM () -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#allPhases",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "allPhases",
          "normalized": "OM()-\u003eOM()",
          "package": "hermit",
          "partial": "Phases",
          "signature": "OM()-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:allPhases"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "at",
          "package": "hermit",
          "signature": "TranslateH CoreTC LocalPathH -\u003e OM a -\u003e OM a",
          "source": "src/HERMIT-Optimize.html#at",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "at",
          "normalized": "TranslateH CoreTC LocalPathH-\u003eOM a-\u003eOM a",
          "package": "hermit",
          "signature": "TranslateH CoreTC LocalPathH-\u003eOM a-\u003eOM a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:at"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "before",
          "package": "hermit",
          "signature": "CorePass -\u003e OM () -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#before",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "before",
          "normalized": "CorePass-\u003eOM()-\u003eOM()",
          "package": "hermit",
          "signature": "CorePass-\u003eOM()-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:before"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "display",
          "package": "hermit",
          "signature": "OM ()",
          "source": "src/HERMIT-Optimize.html#display",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "display",
          "normalized": "OM()",
          "package": "hermit",
          "signature": "OM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:display"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "firstPhase",
          "package": "hermit",
          "signature": "OM () -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#firstPhase",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "firstPhase",
          "normalized": "OM()-\u003eOM()",
          "package": "hermit",
          "partial": "Phase",
          "signature": "OM()-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:firstPhase"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "getPhaseInfo",
          "package": "hermit",
          "signature": "OM PhaseInfo",
          "source": "src/HERMIT-Optimize.html#getPhaseInfo",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "getPhaseInfo",
          "package": "hermit",
          "partial": "Phase Info",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:getPhaseInfo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "interactive",
          "package": "hermit",
          "signature": "[External] -\u003e [CommandLineOption] -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#interactive",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "interactive",
          "normalized": "[External]-\u003e[CommandLineOption]-\u003eOM()",
          "package": "hermit",
          "signature": "[External]-\u003e[CommandLineOption]-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:interactive"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "lastPhase",
          "package": "hermit",
          "signature": "OM () -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#lastPhase",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "lastPhase",
          "normalized": "OM()-\u003eOM()",
          "package": "hermit",
          "partial": "Phase",
          "signature": "OM()-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:lastPhase"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "modifyCLS",
          "package": "hermit",
          "signature": "(CommandLineState -\u003e CommandLineState) -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#modifyCLS",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "modifyCLS",
          "normalized": "(CommandLineState-\u003eCommandLineState)-\u003eOM()",
          "package": "hermit",
          "partial": "CLS",
          "signature": "(CommandLineState-\u003eCommandLineState)-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:modifyCLS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "omToIO",
          "package": "hermit",
          "signature": "CommandLineState -\u003e PhaseInfo -\u003e OM a -\u003e IO (Either CLException a, CommandLineState)",
          "source": "src/HERMIT-Optimize.html#omToIO",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "omToIO",
          "normalized": "CommandLineState-\u003ePhaseInfo-\u003eOM a-\u003eIO(Either CLException a,CommandLineState)",
          "package": "hermit",
          "partial": "To IO",
          "signature": "CommandLineState-\u003ePhaseInfo-\u003eOM a-\u003eIO(Either CLException a,CommandLineState)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:omToIO"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "optimize",
          "package": "hermit",
          "signature": "([CommandLineOption] -\u003e OM ()) -\u003e Plugin",
          "source": "src/HERMIT-Optimize.html#optimize",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "optimize",
          "normalized": "([CommandLineOption]-\u003eOM())-\u003ePlugin",
          "package": "hermit",
          "signature": "([CommandLineOption]-\u003eOM())-\u003ePlugin",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:optimize"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "phase",
          "package": "hermit",
          "signature": "Int -\u003e OM () -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#phase",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "phase",
          "normalized": "Int-\u003eOM()-\u003eOM()",
          "package": "hermit",
          "signature": "Int-\u003eOM()-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:phase"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "query",
          "package": "hermit",
          "signature": "TranslateH g a -\u003e OM a",
          "source": "src/HERMIT-Optimize.html#query",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "query",
          "normalized": "TranslateH a b-\u003eOM b",
          "package": "hermit",
          "signature": "TranslateH g a-\u003eOM a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:query"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "run",
          "package": "hermit",
          "signature": "RewriteH CoreTC -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#run",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "run",
          "normalized": "RewriteH CoreTC-\u003eOM()",
          "package": "hermit",
          "signature": "RewriteH CoreTC-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:run"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "setPretty",
          "package": "hermit",
          "signature": "PrettyH CoreTC -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#setPretty",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "setPretty",
          "normalized": "PrettyH CoreTC-\u003eOM()",
          "package": "hermit",
          "partial": "Pretty",
          "signature": "PrettyH CoreTC-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:setPretty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "setPrettyOptions",
          "package": "hermit",
          "signature": "PrettyOptions -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#setPrettyOptions",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "setPrettyOptions",
          "normalized": "PrettyOptions-\u003eOM()",
          "package": "hermit",
          "partial": "Pretty Options",
          "signature": "PrettyOptions-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:setPrettyOptions"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Optimize",
          "name": "until",
          "package": "hermit",
          "signature": "CorePass -\u003e OM () -\u003e OM ()",
          "source": "src/HERMIT-Optimize.html#until",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Optimize",
          "module": "HERMIT.Optimize",
          "name": "until",
          "normalized": "CorePass-\u003eOM()-\u003eOM()",
          "package": "hermit",
          "signature": "CorePass-\u003eOM()-\u003eOM()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Optimize.html#v:until"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Parser",
          "name": "Parser",
          "package": "hermit",
          "source": "src/HERMIT-Parser.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "Parser",
          "package": "hermit",
          "partial": "Parser",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA simple expression language AST, for things parsed from \u003ccode\u003e\u003ca\u003eString\u003c/a\u003e\u003c/code\u003e or JSON structures.\n\u003c/p\u003e",
          "module": "HERMIT.Parser",
          "name": "ExprH",
          "package": "hermit",
          "source": "src/HERMIT-Parser.html#ExprH",
          "type": "data"
        },
        "index": {
          "description": "simple expression language AST for things parsed from String or JSON structures",
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "ExprH",
          "package": "hermit",
          "partial": "Expr",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#t:ExprH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Parser",
          "name": "Script",
          "package": "hermit",
          "source": "src/HERMIT-Parser.html#Script",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "Script",
          "package": "hermit",
          "partial": "Script",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#t:Script"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApplication.\n\u003c/p\u003e",
          "module": "HERMIT.Parser",
          "name": "AppH",
          "package": "hermit",
          "signature": "AppH ExprH ExprH",
          "source": "src/HERMIT-Parser.html#ExprH",
          "type": "function"
        },
        "index": {
          "description": "Application",
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "AppH",
          "package": "hermit",
          "partial": "App",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#v:AppH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommands (to be looked up in \u003ccode\u003e\u003ca\u003eDictionary\u003c/a\u003e\u003c/code\u003e).\n\u003c/p\u003e",
          "module": "HERMIT.Parser",
          "name": "CmdName",
          "package": "hermit",
          "signature": "CmdName String",
          "source": "src/HERMIT-Parser.html#ExprH",
          "type": "function"
        },
        "index": {
          "description": "Commands to be looked up in Dictionary",
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "CmdName",
          "package": "hermit",
          "partial": "Cmd Name",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#v:CmdName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCore Fragment\n\u003c/p\u003e",
          "module": "HERMIT.Parser",
          "name": "CoreH",
          "package": "hermit",
          "signature": "CoreH String",
          "source": "src/HERMIT-Parser.html#ExprH",
          "type": "function"
        },
        "index": {
          "description": "Core Fragment",
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "CoreH",
          "package": "hermit",
          "partial": "Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#v:CoreH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eList of expressions\n\u003c/p\u003e",
          "module": "HERMIT.Parser",
          "name": "ListH",
          "package": "hermit",
          "signature": "ListH [ExprH]",
          "source": "src/HERMIT-Parser.html#ExprH",
          "type": "function"
        },
        "index": {
          "description": "List of expressions",
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "ListH",
          "normalized": "ListH[ExprH]",
          "package": "hermit",
          "partial": "List",
          "signature": "ListH[ExprH]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#v:ListH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eVariable names (refers to source code).\n\u003c/p\u003e",
          "module": "HERMIT.Parser",
          "name": "SrcName",
          "package": "hermit",
          "signature": "SrcName String",
          "source": "src/HERMIT-Parser.html#ExprH",
          "type": "function"
        },
        "index": {
          "description": "Variable names refers to source code",
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "SrcName",
          "package": "hermit",
          "partial": "Src Name",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#v:SrcName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Parser",
          "name": "parseScript",
          "package": "hermit",
          "signature": "String -\u003e Either String Script",
          "source": "src/HERMIT-Parser.html#parseScript",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "parseScript",
          "normalized": "String-\u003eEither String Script",
          "package": "hermit",
          "partial": "Script",
          "signature": "String-\u003eEither String Script",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#v:parseScript"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Parser",
          "name": "unparseExprH",
          "package": "hermit",
          "signature": "ExprH -\u003e String",
          "source": "src/HERMIT-Parser.html#unparseExprH",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "unparseExprH",
          "normalized": "ExprH-\u003eString",
          "package": "hermit",
          "partial": "Expr",
          "signature": "ExprH-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#v:unparseExprH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Parser",
          "name": "unparseScript",
          "package": "hermit",
          "signature": "Script -\u003e String",
          "source": "src/HERMIT-Parser.html#unparseScript",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Parser",
          "module": "HERMIT.Parser",
          "name": "unparseScript",
          "normalized": "Script-\u003eString",
          "package": "hermit",
          "partial": "Script",
          "signature": "Script-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Parser.html#v:unparseScript"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.ParserCore",
          "name": "ParserCore",
          "package": "hermit",
          "source": "src/HERMIT-ParserCore.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT ParserCore",
          "module": "HERMIT.ParserCore",
          "name": "ParserCore",
          "package": "hermit",
          "partial": "Parser Core",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-ParserCore.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.ParserCore",
          "name": "parse2beforeBiR",
          "package": "hermit",
          "signature": "(CoreExpr -\u003e CoreExpr -\u003e BiRewriteH a) -\u003e CoreString -\u003e CoreString -\u003e BiRewriteH a",
          "source": "src/HERMIT-ParserCore.html#parse2beforeBiR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT ParserCore",
          "module": "HERMIT.ParserCore",
          "name": "parse2beforeBiR",
          "normalized": "(CoreExpr-\u003eCoreExpr-\u003eBiRewriteH a)-\u003eCoreString-\u003eCoreString-\u003eBiRewriteH a",
          "package": "hermit",
          "partial": "Bi",
          "signature": "(CoreExpr-\u003eCoreExpr-\u003eBiRewriteH a)-\u003eCoreString-\u003eCoreString-\u003eBiRewriteH a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-ParserCore.html#v:parse2beforeBiR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.ParserCore",
          "name": "parse3beforeBiR",
          "package": "hermit",
          "signature": "(CoreExpr -\u003e CoreExpr -\u003e CoreExpr -\u003e BiRewriteH a) -\u003e CoreString -\u003e CoreString -\u003e CoreString -\u003e BiRewriteH a",
          "source": "src/HERMIT-ParserCore.html#parse3beforeBiR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT ParserCore",
          "module": "HERMIT.ParserCore",
          "name": "parse3beforeBiR",
          "normalized": "(CoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH a)-\u003eCoreString-\u003eCoreString-\u003eCoreString-\u003eBiRewriteH a",
          "package": "hermit",
          "partial": "Bi",
          "signature": "(CoreExpr-\u003eCoreExpr-\u003eCoreExpr-\u003eBiRewriteH a)-\u003eCoreString-\u003eCoreString-\u003eCoreString-\u003eBiRewriteH a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-ParserCore.html#v:parse3beforeBiR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.ParserCore",
          "name": "parseCore",
          "package": "hermit",
          "signature": "CoreString -\u003e HermitC -\u003e HermitM CoreExpr",
          "source": "src/HERMIT-ParserCore.html#parseCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT ParserCore",
          "module": "HERMIT.ParserCore",
          "name": "parseCore",
          "normalized": "CoreString-\u003eHermitC-\u003eHermitM CoreExpr",
          "package": "hermit",
          "partial": "Core",
          "signature": "CoreString-\u003eHermitC-\u003eHermitM CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-ParserCore.html#v:parseCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a \u003ccode\u003e\u003ca\u003eCoreString\u003c/a\u003e\u003c/code\u003e to a \u003ccode\u003e\u003ca\u003eCoreExpr\u003c/a\u003e\u003c/code\u003e, using the current context.\n\u003c/p\u003e",
          "module": "HERMIT.ParserCore",
          "name": "parseCoreExprT",
          "package": "hermit",
          "signature": "CoreString -\u003e TranslateH a CoreExpr",
          "source": "src/HERMIT-ParserCore.html#parseCoreExprT",
          "type": "function"
        },
        "index": {
          "description": "Parse CoreString to CoreExpr using the current context",
          "hierarchy": "HERMIT ParserCore",
          "module": "HERMIT.ParserCore",
          "name": "parseCoreExprT",
          "normalized": "CoreString-\u003eTranslateH a CoreExpr",
          "package": "hermit",
          "partial": "Core Expr",
          "signature": "CoreString-\u003eTranslateH a CoreExpr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-ParserCore.html#v:parseCoreExprT"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Plugin",
          "package": "hermit",
          "source": "src/HERMIT-Plugin.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Plugin",
          "package": "hermit",
          "partial": "Plugin",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "CorePass",
          "package": "hermit",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "CorePass",
          "package": "hermit",
          "partial": "Core Pass",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#t:CorePass"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven a list of \u003ccode\u003e\u003ca\u003eCommandLineOption\u003c/a\u003e\u003c/code\u003es, produce the \u003ccode\u003e\u003ca\u003eModGuts\u003c/a\u003e\u003c/code\u003e to \u003ccode\u003e\u003ca\u003eModGuts\u003c/a\u003e\u003c/code\u003e function required to build a plugin.\n\u003c/p\u003e",
          "module": "HERMIT.Plugin",
          "name": "HermitPass",
          "package": "hermit",
          "source": "src/HERMIT-Plugin.html#HermitPass",
          "type": "type"
        },
        "index": {
          "description": "Given list of CommandLineOption produce the ModGuts to ModGuts function required to build plugin",
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "HermitPass",
          "package": "hermit",
          "partial": "Hermit Pass",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#t:HermitPass"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "PhaseInfo",
          "package": "hermit",
          "source": "src/HERMIT-Plugin.html#PhaseInfo",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "PhaseInfo",
          "package": "hermit",
          "partial": "Phase Info",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#t:PhaseInfo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "CSE",
          "package": "hermit",
          "signature": "CSE",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "CSE",
          "package": "hermit",
          "partial": "CSE",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:CSE"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Desugar",
          "package": "hermit",
          "signature": "Desugar",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Desugar",
          "package": "hermit",
          "partial": "Desugar",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Desugar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "DesugarOpt",
          "package": "hermit",
          "signature": "DesugarOpt",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "DesugarOpt",
          "package": "hermit",
          "partial": "Desugar Opt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:DesugarOpt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "FloatInwards",
          "package": "hermit",
          "signature": "FloatInwards",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "FloatInwards",
          "package": "hermit",
          "partial": "Float Inwards",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:FloatInwards"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "FloatOutwards",
          "package": "hermit",
          "signature": "FloatOutwards",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "FloatOutwards",
          "package": "hermit",
          "partial": "Float Outwards",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:FloatOutwards"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "LiberateCase",
          "package": "hermit",
          "signature": "LiberateCase",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "LiberateCase",
          "package": "hermit",
          "partial": "Liberate Case",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:LiberateCase"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "NoOp",
          "package": "hermit",
          "signature": "NoOp",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "NoOp",
          "package": "hermit",
          "partial": "No Op",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:NoOp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Passes",
          "package": "hermit",
          "signature": "Passes",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Passes",
          "package": "hermit",
          "partial": "Passes",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Passes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "PhaseInfo",
          "package": "hermit",
          "signature": "PhaseInfo",
          "source": "src/HERMIT-Plugin.html#PhaseInfo",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "PhaseInfo",
          "package": "hermit",
          "partial": "Phase Info",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:PhaseInfo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "PluginPass",
          "package": "hermit",
          "signature": "PluginPass String",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "PluginPass",
          "package": "hermit",
          "partial": "Plugin Pass",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:PluginPass"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Prep",
          "package": "hermit",
          "signature": "Prep",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Prep",
          "package": "hermit",
          "partial": "Prep",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Prep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "PrintCore",
          "package": "hermit",
          "signature": "PrintCore",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "PrintCore",
          "package": "hermit",
          "partial": "Print Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:PrintCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "RuleCheck",
          "package": "hermit",
          "signature": "RuleCheck",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "RuleCheck",
          "package": "hermit",
          "partial": "Rule Check",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:RuleCheck"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Simplify",
          "package": "hermit",
          "signature": "Simplify",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Simplify",
          "package": "hermit",
          "partial": "Simplify",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Simplify"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "SpecConstr",
          "package": "hermit",
          "signature": "SpecConstr",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "SpecConstr",
          "package": "hermit",
          "partial": "Spec Constr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:SpecConstr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Specialising",
          "package": "hermit",
          "signature": "Specialising",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Specialising",
          "package": "hermit",
          "partial": "Specialising",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Specialising"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "StaticArgs",
          "package": "hermit",
          "signature": "StaticArgs",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "StaticArgs",
          "package": "hermit",
          "partial": "Static Args",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:StaticArgs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Strictness",
          "package": "hermit",
          "signature": "Strictness",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Strictness",
          "package": "hermit",
          "partial": "Strictness",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Strictness"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Tidy",
          "package": "hermit",
          "signature": "Tidy",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Tidy",
          "package": "hermit",
          "partial": "Tidy",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Tidy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Unknown",
          "package": "hermit",
          "signature": "Unknown",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Unknown",
          "package": "hermit",
          "partial": "Unknown",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Unknown"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "Vectorisation",
          "package": "hermit",
          "signature": "Vectorisation",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "Vectorisation",
          "package": "hermit",
          "partial": "Vectorisation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:Vectorisation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "WorkerWrapper",
          "package": "hermit",
          "signature": "WorkerWrapper",
          "source": "src/HERMIT-Plugin.html#CorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "WorkerWrapper",
          "package": "hermit",
          "partial": "Worker Wrapper",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:WorkerWrapper"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "getCorePass",
          "package": "hermit",
          "signature": "CoreToDo -\u003e CorePass",
          "source": "src/HERMIT-Plugin.html#getCorePass",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "getCorePass",
          "normalized": "CoreToDo-\u003eCorePass",
          "package": "hermit",
          "partial": "Core Pass",
          "signature": "CoreToDo-\u003eCorePass",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:getCorePass"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf HERMIT user specifies the -pN flag, get the N\n TODO: as written will discard other flags that start with -p\n\u003c/p\u003e",
          "module": "HERMIT.Plugin",
          "name": "getPhaseFlag",
          "package": "hermit",
          "signature": "[CommandLineOption] -\u003e Maybe (Int, [CommandLineOption])",
          "source": "src/HERMIT-Plugin.html#getPhaseFlag",
          "type": "function"
        },
        "index": {
          "description": "If HERMIT user specifies the pN flag get the TODO as written will discard other flags that start with",
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "getPhaseFlag",
          "normalized": "[CommandLineOption]-\u003eMaybe(Int,[CommandLineOption])",
          "package": "hermit",
          "partial": "Phase Flag",
          "signature": "[CommandLineOption]-\u003eMaybe(Int,[CommandLineOption])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:getPhaseFlag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "ghcPasses",
          "package": "hermit",
          "signature": "[(CorePass, CoreToDo)]",
          "source": "src/HERMIT-Plugin.html#ghcPasses",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "ghcPasses",
          "normalized": "[(CorePass,CoreToDo)]",
          "package": "hermit",
          "partial": "Passes",
          "signature": "[(CorePass,CoreToDo)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:ghcPasses"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eBuild a hermit plugin. This mainly handles the per-module options.\n\u003c/p\u003e",
          "module": "HERMIT.Plugin",
          "name": "hermitPlugin",
          "package": "hermit",
          "signature": "HermitPass -\u003e Plugin",
          "source": "src/HERMIT-Plugin.html#hermitPlugin",
          "type": "function"
        },
        "index": {
          "description": "Build hermit plugin This mainly handles the per-module options",
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "hermitPlugin",
          "normalized": "HermitPass-\u003ePlugin",
          "package": "hermit",
          "partial": "Plugin",
          "signature": "HermitPass-\u003ePlugin",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:hermitPlugin"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "phaseNum",
          "package": "hermit",
          "signature": "Int",
          "source": "src/HERMIT-Plugin.html#PhaseInfo",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "phaseNum",
          "package": "hermit",
          "partial": "Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:phaseNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "phasesDone",
          "package": "hermit",
          "signature": "[CorePass]",
          "source": "src/HERMIT-Plugin.html#PhaseInfo",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "phasesDone",
          "normalized": "[CorePass]",
          "package": "hermit",
          "partial": "Done",
          "signature": "[CorePass]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:phasesDone"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Plugin",
          "name": "phasesLeft",
          "package": "hermit",
          "signature": "[CorePass]",
          "source": "src/HERMIT-Plugin.html#PhaseInfo",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Plugin",
          "module": "HERMIT.Plugin",
          "name": "phasesLeft",
          "normalized": "[CorePass]",
          "package": "hermit",
          "partial": "Left",
          "signature": "[CorePass]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Plugin.html#v:phasesLeft"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eOutput the raw Expr constructors. Helpful for writing pattern matching rewrites.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "AST",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-AST.html",
          "type": "module"
        },
        "index": {
          "description": "Output the raw Expr constructors Helpful for writing pattern matching rewrites",
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "AST",
          "package": "hermit",
          "partial": "AST",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoercion",
          "package": "hermit",
          "signature": "PrettyH Coercion",
          "source": "src/HERMIT-PrettyPrinter-AST.html#ppCoercion",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoercion",
          "package": "hermit",
          "partial": "Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#v:ppCoercion"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreAlt",
          "package": "hermit",
          "signature": "PrettyH CoreAlt",
          "source": "src/HERMIT-PrettyPrinter-AST.html#ppCoreAlt",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreAlt",
          "package": "hermit",
          "partial": "Core Alt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#v:ppCoreAlt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreBind",
          "package": "hermit",
          "signature": "PrettyH CoreBind",
          "source": "src/HERMIT-PrettyPrinter-AST.html#ppCoreBind",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreBind",
          "package": "hermit",
          "partial": "Core Bind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#v:ppCoreBind"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreExpr",
          "package": "hermit",
          "signature": "PrettyH CoreExpr",
          "source": "src/HERMIT-PrettyPrinter-AST.html#ppCoreExpr",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreExpr",
          "package": "hermit",
          "partial": "Core Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#v:ppCoreExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreProg",
          "package": "hermit",
          "signature": "PrettyH CoreProg",
          "source": "src/HERMIT-PrettyPrinter-AST.html#ppCoreProg",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreProg",
          "package": "hermit",
          "partial": "Core Prog",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#v:ppCoreProg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePretty print a fragment of GHC Core using HERMIT's \"AST\" pretty printer.\n   This displays the tree of constructors using nested indentation.\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreTC",
          "package": "hermit",
          "signature": "PrettyH CoreTC",
          "source": "src/HERMIT-PrettyPrinter-AST.html#ppCoreTC",
          "type": "function"
        },
        "index": {
          "description": "Pretty print fragment of GHC Core using HERMIT AST pretty printer This displays the tree of constructors using nested indentation",
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppCoreTC",
          "package": "hermit",
          "partial": "Core TC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#v:ppCoreTC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppKindOrType",
          "package": "hermit",
          "signature": "PrettyH Type",
          "source": "src/HERMIT-PrettyPrinter-AST.html#ppKindOrType",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppKindOrType",
          "package": "hermit",
          "partial": "Kind Or Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#v:ppKindOrType"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppModGuts",
          "package": "hermit",
          "signature": "PrettyH ModGuts",
          "source": "src/HERMIT-PrettyPrinter-AST.html#ppModGuts",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter AST",
          "module": "HERMIT.PrettyPrinter.AST",
          "name": "ppModGuts",
          "package": "hermit",
          "partial": "Mod Guts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-AST.html#v:ppModGuts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "Clean",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Clean.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "Clean",
          "package": "hermit",
          "partial": "Clean",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoercion",
          "package": "hermit",
          "signature": "PrettyH Coercion",
          "source": "src/HERMIT-PrettyPrinter-Clean.html#ppCoercion",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoercion",
          "package": "hermit",
          "partial": "Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#v:ppCoercion"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreAlt",
          "package": "hermit",
          "signature": "PrettyH CoreAlt",
          "source": "src/HERMIT-PrettyPrinter-Clean.html#ppCoreAlt",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreAlt",
          "package": "hermit",
          "partial": "Core Alt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#v:ppCoreAlt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreBind",
          "package": "hermit",
          "signature": "PrettyH CoreBind",
          "source": "src/HERMIT-PrettyPrinter-Clean.html#ppCoreBind",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreBind",
          "package": "hermit",
          "partial": "Core Bind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#v:ppCoreBind"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreExpr",
          "package": "hermit",
          "signature": "PrettyH CoreExpr",
          "source": "src/HERMIT-PrettyPrinter-Clean.html#ppCoreExpr",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreExpr",
          "package": "hermit",
          "partial": "Core Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#v:ppCoreExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreProg",
          "package": "hermit",
          "signature": "PrettyH CoreProg",
          "source": "src/HERMIT-PrettyPrinter-Clean.html#ppCoreProg",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreProg",
          "package": "hermit",
          "partial": "Core Prog",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#v:ppCoreProg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePretty print a fragment of GHC Core using HERMIT's \"Clean\" pretty printer.\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreTC",
          "package": "hermit",
          "signature": "PrettyH CoreTC",
          "source": "src/HERMIT-PrettyPrinter-Clean.html#ppCoreTC",
          "type": "function"
        },
        "index": {
          "description": "Pretty print fragment of GHC Core using HERMIT Clean pretty printer",
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppCoreTC",
          "package": "hermit",
          "partial": "Core TC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#v:ppCoreTC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppKindOrType",
          "package": "hermit",
          "signature": "PrettyH KindOrType",
          "source": "src/HERMIT-PrettyPrinter-Clean.html#ppKindOrType",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppKindOrType",
          "package": "hermit",
          "partial": "Kind Or Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#v:ppKindOrType"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppModGuts",
          "package": "hermit",
          "signature": "PrettyH ModGuts",
          "source": "src/HERMIT-PrettyPrinter-Clean.html#ppModGuts",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Clean",
          "module": "HERMIT.PrettyPrinter.Clean",
          "name": "ppModGuts",
          "package": "hermit",
          "partial": "Mod Guts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Clean.html#v:ppModGuts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Common",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Common",
          "package": "hermit",
          "partial": "Common",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Attr",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#Attr",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Attr",
          "package": "hermit",
          "partial": "Attr",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:Attr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "DocH",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#DocH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "DocH",
          "package": "hermit",
          "partial": "Doc",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:DocH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "HTML",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#HTML",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "HTML",
          "package": "hermit",
          "partial": "HTML",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:HTML"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eContext for PrettyH translations.\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyC",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyC",
          "type": "data"
        },
        "index": {
          "description": "Context for PrettyH translations",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyC",
          "package": "hermit",
          "partial": "Pretty",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:PrettyC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyH",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyH",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyH",
          "package": "hermit",
          "partial": "Pretty",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:PrettyH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyOptions",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyOptions",
          "package": "hermit",
          "partial": "Pretty Options",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:PrettyOptions"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "RenderCode",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#RenderCode",
          "type": "class"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "RenderCode",
          "package": "hermit",
          "partial": "Render Code",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:RenderCode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "RenderSpecial",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#RenderSpecial",
          "type": "class"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "RenderSpecial",
          "package": "hermit",
          "partial": "Render Special",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:RenderSpecial"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "ShowOption",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#ShowOption",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "ShowOption",
          "package": "hermit",
          "partial": "Show Option",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:ShowOption"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "SpecialSymbol",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "SpecialSymbol",
          "package": "hermit",
          "partial": "Special Symbol",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:SpecialSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "SyntaxForColor",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SyntaxForColor",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "SyntaxForColor",
          "package": "hermit",
          "partial": "Syntax For Color",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:SyntaxForColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TranslateCoreTCDocHBox",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#TranslateCoreTCDocHBox",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TranslateCoreTCDocHBox",
          "package": "hermit",
          "partial": "Translate Core TCDoc HBox",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:TranslateCoreTCDocHBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TranslateDocH",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#TranslateDocH",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TranslateDocH",
          "package": "hermit",
          "partial": "Translate Doc",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:TranslateDocH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Unicode",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#Unicode",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Unicode",
          "package": "hermit",
          "partial": "Unicode",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#t:Unicode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Abstract",
          "package": "hermit",
          "signature": "Abstract",
          "source": "src/HERMIT-PrettyPrinter-Common.html#ShowOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Abstract",
          "package": "hermit",
          "partial": "Abstract",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:Abstract"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "BndrAttr",
          "package": "hermit",
          "signature": "BndrAttr AbsolutePathH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#Attr",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "BndrAttr",
          "package": "hermit",
          "partial": "Bndr Attr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:BndrAttr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "CastSymbol",
          "package": "hermit",
          "signature": "CastSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "CastSymbol",
          "package": "hermit",
          "partial": "Cast Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:CastSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "CoercionBindSymbol",
          "package": "hermit",
          "signature": "CoercionBindSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "CoercionBindSymbol",
          "package": "hermit",
          "partial": "Coercion Bind Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:CoercionBindSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "CoercionColor",
          "package": "hermit",
          "signature": "CoercionColor",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SyntaxForColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "CoercionColor",
          "package": "hermit",
          "partial": "Coercion Color",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:CoercionColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "CoercionSymbol",
          "package": "hermit",
          "signature": "CoercionSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "CoercionSymbol",
          "package": "hermit",
          "partial": "Coercion Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:CoercionSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Color",
          "package": "hermit",
          "signature": "Color SyntaxForColor",
          "source": "src/HERMIT-PrettyPrinter-Common.html#Attr",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Color",
          "package": "hermit",
          "partial": "Color",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:Color"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "ForallSymbol",
          "package": "hermit",
          "signature": "ForallSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "ForallSymbol",
          "package": "hermit",
          "partial": "Forall Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:ForallSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "HTML",
          "package": "hermit",
          "signature": "HTML String",
          "source": "src/HERMIT-PrettyPrinter-Common.html#HTML",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "HTML",
          "package": "hermit",
          "partial": "HTML",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:HTML"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "IdColor",
          "package": "hermit",
          "signature": "IdColor",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SyntaxForColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "IdColor",
          "package": "hermit",
          "partial": "Id Color",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:IdColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "KeywordColor",
          "package": "hermit",
          "signature": "KeywordColor",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SyntaxForColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "KeywordColor",
          "package": "hermit",
          "partial": "Keyword Color",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:KeywordColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Kind",
          "package": "hermit",
          "signature": "Kind",
          "source": "src/HERMIT-PrettyPrinter-Common.html#ShowOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Kind",
          "package": "hermit",
          "partial": "Kind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:Kind"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "LambdaSymbol",
          "package": "hermit",
          "signature": "LambdaSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "LambdaSymbol",
          "package": "hermit",
          "partial": "Lambda Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:LambdaSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "LitColor",
          "package": "hermit",
          "signature": "LitColor",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SyntaxForColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "LitColor",
          "package": "hermit",
          "partial": "Lit Color",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:LitColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Omit",
          "package": "hermit",
          "signature": "Omit",
          "source": "src/HERMIT-PrettyPrinter-Common.html#ShowOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Omit",
          "package": "hermit",
          "partial": "Omit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:Omit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PathAttr",
          "package": "hermit",
          "signature": "PathAttr AbsolutePathH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#Attr",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PathAttr",
          "package": "hermit",
          "partial": "Path Attr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:PathAttr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyC",
          "package": "hermit",
          "signature": "PrettyC",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyC",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyC",
          "package": "hermit",
          "partial": "Pretty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:PrettyC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyOptions",
          "package": "hermit",
          "signature": "PrettyOptions",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "PrettyOptions",
          "package": "hermit",
          "partial": "Pretty Options",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:PrettyOptions"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "RightArrowSymbol",
          "package": "hermit",
          "signature": "RightArrowSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "RightArrowSymbol",
          "package": "hermit",
          "partial": "Right Arrow Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:RightArrowSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Show",
          "package": "hermit",
          "signature": "Show",
          "source": "src/HERMIT-PrettyPrinter-Common.html#ShowOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Show",
          "package": "hermit",
          "partial": "Show",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:Show"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "SpecialFont",
          "package": "hermit",
          "signature": "SpecialFont",
          "source": "src/HERMIT-PrettyPrinter-Common.html#Attr",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "SpecialFont",
          "package": "hermit",
          "partial": "Special Font",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:SpecialFont"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "SyntaxColor",
          "package": "hermit",
          "signature": "SyntaxColor",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SyntaxForColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "SyntaxColor",
          "package": "hermit",
          "partial": "Syntax Color",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:SyntaxColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TranslateCoreTCDocHBox",
          "package": "hermit",
          "signature": "TranslateCoreTCDocHBox (TranslateDocH CoreTC)",
          "source": "src/HERMIT-PrettyPrinter-Common.html#TranslateCoreTCDocHBox",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TranslateCoreTCDocHBox",
          "package": "hermit",
          "partial": "Translate Core TCDoc HBox",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:TranslateCoreTCDocHBox"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TranslateDocH",
          "package": "hermit",
          "signature": "TranslateDocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#TranslateDocH",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TranslateDocH",
          "package": "hermit",
          "partial": "Translate Doc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:TranslateDocH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TypeBindSymbol",
          "package": "hermit",
          "signature": "TypeBindSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TypeBindSymbol",
          "package": "hermit",
          "partial": "Type Bind Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:TypeBindSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TypeColor",
          "package": "hermit",
          "signature": "TypeColor",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SyntaxForColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TypeColor",
          "package": "hermit",
          "partial": "Type Color",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:TypeColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TypeOfSymbol",
          "package": "hermit",
          "signature": "TypeOfSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TypeOfSymbol",
          "package": "hermit",
          "partial": "Type Of Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:TypeOfSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TypeSymbol",
          "package": "hermit",
          "signature": "TypeSymbol",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SpecialSymbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "TypeSymbol",
          "package": "hermit",
          "partial": "Type Symbol",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:TypeSymbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Unicode",
          "package": "hermit",
          "signature": "Unicode Char",
          "source": "src/HERMIT-PrettyPrinter-Common.html#Unicode",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "Unicode",
          "package": "hermit",
          "partial": "Unicode",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:Unicode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "WarningColor",
          "package": "hermit",
          "signature": "WarningColor",
          "source": "src/HERMIT-PrettyPrinter-Common.html#SyntaxForColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "WarningColor",
          "package": "hermit",
          "partial": "Warning Color",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:WarningColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "attrP",
          "package": "hermit",
          "signature": "AbsolutePathH -\u003e DocH -\u003e DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#attrP",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "attrP",
          "normalized": "AbsolutePathH-\u003eDocH-\u003eDocH",
          "package": "hermit",
          "signature": "AbsolutePathH-\u003eDocH-\u003eDocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:attrP"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "coercionColor",
          "package": "hermit",
          "signature": "DocH -\u003e DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#coercionColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "coercionColor",
          "normalized": "DocH-\u003eDocH",
          "package": "hermit",
          "partial": "Color",
          "signature": "DocH-\u003eDocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:coercionColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "coreRenders",
          "package": "hermit",
          "signature": "[(String, PrettyOptions -\u003e DocH -\u003e String)]",
          "source": "src/HERMIT-PrettyPrinter-Common.html#coreRenders",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "coreRenders",
          "normalized": "[(String,PrettyOptions-\u003eDocH-\u003eString)]",
          "package": "hermit",
          "partial": "Renders",
          "signature": "[(String,PrettyOptions-\u003eDocH-\u003eString)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:coreRenders"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003elike vcat and hcat, only make the list syntax explicit\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "hlist",
          "package": "hermit",
          "signature": "[MDoc a] -\u003e MDoc a",
          "source": "src/HERMIT-PrettyPrinter-Common.html#hlist",
          "type": "function"
        },
        "index": {
          "description": "like vcat and hcat only make the list syntax explicit",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "hlist",
          "normalized": "[MDoc a]-\u003eMDoc a",
          "package": "hermit",
          "signature": "[MDoc a]-\u003eMDoc a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:hlist"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "idColor",
          "package": "hermit",
          "signature": "DocH -\u003e DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#idColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "idColor",
          "normalized": "DocH-\u003eDocH",
          "package": "hermit",
          "partial": "Color",
          "signature": "DocH-\u003eDocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:idColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "initPrettyC",
          "package": "hermit",
          "signature": "PrettyOptions -\u003e PrettyC",
          "source": "src/HERMIT-PrettyPrinter-Common.html#initPrettyC",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "initPrettyC",
          "normalized": "PrettyOptions-\u003ePrettyC",
          "package": "hermit",
          "partial": "Pretty",
          "signature": "PrettyOptions-\u003ePrettyC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:initPrettyC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "keywordColor",
          "package": "hermit",
          "signature": "DocH -\u003e DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#keywordColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "keywordColor",
          "normalized": "DocH-\u003eDocH",
          "package": "hermit",
          "partial": "Color",
          "signature": "DocH-\u003eDocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:keywordColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "liftPrettyC",
          "package": "hermit",
          "signature": "PrettyOptions -\u003e c -\u003e PrettyC",
          "source": "src/HERMIT-PrettyPrinter-Common.html#liftPrettyC",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "liftPrettyC",
          "normalized": "PrettyOptions-\u003ea-\u003ePrettyC",
          "package": "hermit",
          "partial": "Pretty",
          "signature": "PrettyOptions-\u003ec-\u003ePrettyC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:liftPrettyC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "liftPrettyH",
          "package": "hermit",
          "signature": "PrettyOptions -\u003e PrettyH a -\u003e Translate c HermitM a DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#liftPrettyH",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "liftPrettyH",
          "normalized": "PrettyOptions-\u003ePrettyH a-\u003eTranslate b HermitM a DocH",
          "package": "hermit",
          "partial": "Pretty",
          "signature": "PrettyOptions-\u003ePrettyH a-\u003eTranslate c HermitM a DocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:liftPrettyH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "markBindingSite",
          "package": "hermit",
          "signature": "Var -\u003e PrettyC -\u003e DocH -\u003e DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#markBindingSite",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "markBindingSite",
          "normalized": "Var-\u003ePrettyC-\u003eDocH-\u003eDocH",
          "package": "hermit",
          "partial": "Binding Site",
          "signature": "Var-\u003ePrettyC-\u003eDocH-\u003eDocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:markBindingSite"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "markColor",
          "package": "hermit",
          "signature": "SyntaxForColor -\u003e DocH -\u003e DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#markColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "markColor",
          "normalized": "SyntaxForColor-\u003eDocH-\u003eDocH",
          "package": "hermit",
          "partial": "Color",
          "signature": "SyntaxForColor-\u003eDocH-\u003eDocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:markColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDo you hide coercions?\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_coercions",
          "package": "hermit",
          "signature": "ShowOption",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "description": "Do you hide coercions",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_coercions",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_coercions"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ebelow this depth are ..., Nothing =\u003e infinite\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_depth",
          "package": "hermit",
          "signature": "Maybe Int",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "description": "below this depth are Nothing infinite",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_depth",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_depth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDo you hide types, and type arguments, as \u003ca/\u003e?\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_exprTypes",
          "package": "hermit",
          "signature": "ShowOption",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "description": "Do you hide types and type arguments as",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_exprTypes",
          "package": "hermit",
          "partial": "Types",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_exprTypes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis region should be highlighted (is the current focus)\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_focus",
          "package": "hermit",
          "signature": "Maybe PathH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "description": "This region should be highlighted is the current focus",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_focus",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_focus"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDo you show fully qualified names?\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_fullyQualified",
          "package": "hermit",
          "signature": "Bool",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "description": "Do you show fully qualified names",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_fullyQualified",
          "package": "hermit",
          "partial": "Qualified",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_fullyQualified"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003enotes might be added to output\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_notes",
          "package": "hermit",
          "signature": "Bool",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "description": "notes might be added to output",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_notes",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_notes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_ribbon",
          "package": "hermit",
          "signature": "Float",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_ribbon",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_ribbon"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDo you give the types for all bindings?\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_typesForBinders",
          "package": "hermit",
          "signature": "ShowOption",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "description": "Do you give the types for all bindings",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_typesForBinders",
          "package": "hermit",
          "partial": "For Binders",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_typesForBinders"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_width",
          "package": "hermit",
          "signature": "Int",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyOptions",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "po_width",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:po_width"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "prettyC_options",
          "package": "hermit",
          "signature": "PrettyOptions",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyC",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "prettyC_options",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:prettyC_options"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "prettyC_path",
          "package": "hermit",
          "signature": "AbsolutePathH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyC",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "prettyC_path",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:prettyC_path"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "prettyC_vars",
          "package": "hermit",
          "signature": "Map Var AbsolutePathH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#PrettyC",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "prettyC_vars",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:prettyC_vars"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "rDoHighlight",
          "package": "hermit",
          "signature": "rDoHighlight",
          "source": "src/HERMIT-PrettyPrinter-Common.html#rDoHighlight",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "rDoHighlight",
          "package": "hermit",
          "partial": "Do Highlight",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:rDoHighlight"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "rEnd",
          "package": "hermit",
          "signature": "a",
          "source": "src/HERMIT-PrettyPrinter-Common.html#rEnd",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "rEnd",
          "package": "hermit",
          "partial": "End",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:rEnd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "rPutStr",
          "package": "hermit",
          "signature": "String -\u003e a",
          "source": "src/HERMIT-PrettyPrinter-Common.html#rPutStr",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "rPutStr",
          "normalized": "String-\u003ea",
          "package": "hermit",
          "partial": "Put Str",
          "signature": "String-\u003ea",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:rPutStr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "rStart",
          "package": "hermit",
          "signature": "a",
          "source": "src/HERMIT-PrettyPrinter-Common.html#rStart",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "rStart",
          "package": "hermit",
          "partial": "Start",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:rStart"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "renderCode",
          "package": "hermit",
          "signature": "PrettyOptions -\u003e DocH -\u003e a",
          "source": "src/HERMIT-PrettyPrinter-Common.html#renderCode",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "renderCode",
          "normalized": "PrettyOptions-\u003eDocH-\u003ea",
          "package": "hermit",
          "partial": "Code",
          "signature": "PrettyOptions-\u003eDocH-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:renderCode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "renderSpecial",
          "package": "hermit",
          "signature": "SpecialSymbol -\u003e a",
          "source": "src/HERMIT-PrettyPrinter-Common.html#renderSpecial",
          "type": "method"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "renderSpecial",
          "normalized": "SpecialSymbol-\u003ea",
          "package": "hermit",
          "partial": "Special",
          "signature": "SpecialSymbol-\u003ea",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:renderSpecial"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "specialFont",
          "package": "hermit",
          "signature": "DocH -\u003e DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#specialFont",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "specialFont",
          "normalized": "DocH-\u003eDocH",
          "package": "hermit",
          "partial": "Font",
          "signature": "DocH-\u003eDocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:specialFont"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "typeColor",
          "package": "hermit",
          "signature": "DocH -\u003e DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#typeColor",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "typeColor",
          "normalized": "DocH-\u003eDocH",
          "package": "hermit",
          "partial": "Color",
          "signature": "DocH-\u003eDocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:typeColor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "unTranslateDocH",
          "package": "hermit",
          "signature": "PrettyC -\u003e PrettyH a -\u003e TranslateH a DocH",
          "source": "src/HERMIT-PrettyPrinter-Common.html#TranslateDocH",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "unTranslateDocH",
          "normalized": "PrettyC-\u003ePrettyH a-\u003eTranslateH a DocH",
          "package": "hermit",
          "partial": "Translate Doc",
          "signature": "PrettyC-\u003ePrettyH a-\u003eTranslateH a DocH",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:unTranslateDocH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "updateCoShowOption",
          "package": "hermit",
          "signature": "ShowOption -\u003e PrettyOptions -\u003e PrettyOptions",
          "source": "src/HERMIT-PrettyPrinter-Common.html#updateCoShowOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "updateCoShowOption",
          "normalized": "ShowOption-\u003ePrettyOptions-\u003ePrettyOptions",
          "package": "hermit",
          "partial": "Co Show Option",
          "signature": "ShowOption-\u003ePrettyOptions-\u003ePrettyOptions",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:updateCoShowOption"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "updateTypeShowOption",
          "package": "hermit",
          "signature": "ShowOption -\u003e PrettyOptions -\u003e PrettyOptions",
          "source": "src/HERMIT-PrettyPrinter-Common.html#updateTypeShowOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "updateTypeShowOption",
          "normalized": "ShowOption-\u003ePrettyOptions-\u003ePrettyOptions",
          "package": "hermit",
          "partial": "Type Show Option",
          "signature": "ShowOption-\u003ePrettyOptions-\u003ePrettyOptions",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:updateTypeShowOption"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "updateWidthOption",
          "package": "hermit",
          "signature": "Int -\u003e PrettyOptions -\u003e PrettyOptions",
          "source": "src/HERMIT-PrettyPrinter-Common.html#updateWidthOption",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "updateWidthOption",
          "normalized": "Int-\u003ePrettyOptions-\u003ePrettyOptions",
          "package": "hermit",
          "partial": "Width Option",
          "signature": "Int-\u003ePrettyOptions-\u003ePrettyOptions",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:updateWidthOption"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003elike vcat and hcat, only make the list syntax explicit\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "vlist",
          "package": "hermit",
          "signature": "[MDoc a] -\u003e MDoc a",
          "source": "src/HERMIT-PrettyPrinter-Common.html#vlist",
          "type": "function"
        },
        "index": {
          "description": "like vcat and hcat only make the list syntax explicit",
          "hierarchy": "HERMIT PrettyPrinter Common",
          "module": "HERMIT.PrettyPrinter.Common",
          "name": "vlist",
          "normalized": "[MDoc a]-\u003eMDoc a",
          "package": "hermit",
          "signature": "[MDoc a]-\u003eMDoc a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-Common.html#v:vlist"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eOutput the raw Expr constructors. Helpful for writing pattern matching rewrites.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "GHC",
          "package": "hermit",
          "source": "src/HERMIT-PrettyPrinter-GHC.html",
          "type": "module"
        },
        "index": {
          "description": "Output the raw Expr constructors Helpful for writing pattern matching rewrites",
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "GHC",
          "package": "hermit",
          "partial": "GHC",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoercion",
          "package": "hermit",
          "signature": "PrettyH Coercion",
          "source": "src/HERMIT-PrettyPrinter-GHC.html#ppCoercion",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoercion",
          "package": "hermit",
          "partial": "Coercion",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#v:ppCoercion"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreAlt",
          "package": "hermit",
          "signature": "PrettyH CoreAlt",
          "source": "src/HERMIT-PrettyPrinter-GHC.html#ppCoreAlt",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreAlt",
          "package": "hermit",
          "partial": "Core Alt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#v:ppCoreAlt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreBind",
          "package": "hermit",
          "signature": "PrettyH CoreBind",
          "source": "src/HERMIT-PrettyPrinter-GHC.html#ppCoreBind",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreBind",
          "package": "hermit",
          "partial": "Core Bind",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#v:ppCoreBind"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreExpr",
          "package": "hermit",
          "signature": "PrettyH CoreExpr",
          "source": "src/HERMIT-PrettyPrinter-GHC.html#ppCoreExpr",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreExpr",
          "package": "hermit",
          "partial": "Core Expr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#v:ppCoreExpr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreProg",
          "package": "hermit",
          "signature": "PrettyH CoreProg",
          "source": "src/HERMIT-PrettyPrinter-GHC.html#ppCoreProg",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreProg",
          "package": "hermit",
          "partial": "Core Prog",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#v:ppCoreProg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis pretty printer is just a reflection of GHC's standard pretty printer.\n\u003c/p\u003e",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreTC",
          "package": "hermit",
          "signature": "PrettyH CoreTC",
          "source": "src/HERMIT-PrettyPrinter-GHC.html#ppCoreTC",
          "type": "function"
        },
        "index": {
          "description": "This pretty printer is just reflection of GHC standard pretty printer",
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppCoreTC",
          "package": "hermit",
          "partial": "Core TC",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#v:ppCoreTC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppKindOrType",
          "package": "hermit",
          "signature": "PrettyH Type",
          "source": "src/HERMIT-PrettyPrinter-GHC.html#ppKindOrType",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppKindOrType",
          "package": "hermit",
          "partial": "Kind Or Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#v:ppKindOrType"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppModGuts",
          "package": "hermit",
          "signature": "PrettyH ModGuts",
          "source": "src/HERMIT-PrettyPrinter-GHC.html#ppModGuts",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT PrettyPrinter GHC",
          "module": "HERMIT.PrettyPrinter.GHC",
          "name": "ppModGuts",
          "package": "hermit",
          "partial": "Mod Guts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-PrettyPrinter-GHC.html#v:ppModGuts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "Command",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Command.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "Command",
          "package": "hermit",
          "partial": "Command",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "cl_kernel_env",
          "package": "hermit",
          "signature": "CommandLineState -\u003e HermitMEnv",
          "source": "src/HERMIT-Shell-Command.html#cl_kernel_env",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "cl_kernel_env",
          "normalized": "CommandLineState-\u003eHermitMEnv",
          "package": "hermit",
          "signature": "CommandLineState-\u003eHermitMEnv",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:cl_kernel_env"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe first argument includes a list of files to load.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Command",
          "name": "commandLine",
          "package": "hermit",
          "signature": "[CommandLineOption] -\u003e Behavior -\u003e [External] -\u003e CLM m ()",
          "source": "src/HERMIT-Shell-Command.html#commandLine",
          "type": "function"
        },
        "index": {
          "description": "The first argument includes list of files to load",
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "commandLine",
          "normalized": "[CommandLineOption]-\u003eBehavior-\u003e[External]-\u003eCLM a()",
          "package": "hermit",
          "partial": "Line",
          "signature": "[CommandLineOption]-\u003eBehavior-\u003e[External]-\u003eCLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:commandLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "diffDocH",
          "package": "hermit",
          "signature": "PrettyOptions -\u003e DocH -\u003e DocH -\u003e m String",
          "source": "src/HERMIT-Shell-Command.html#diffDocH",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "diffDocH",
          "normalized": "PrettyOptions-\u003eDocH-\u003eDocH-\u003ea String",
          "package": "hermit",
          "partial": "Doc",
          "signature": "PrettyOptions-\u003eDocH-\u003eDocH-\u003em String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:diffDocH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "diffR",
          "package": "hermit",
          "signature": "PrettyOptions -\u003e String -\u003e RewriteH a -\u003e RewriteH a",
          "source": "src/HERMIT-Shell-Command.html#diffR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "diffR",
          "normalized": "PrettyOptions-\u003eString-\u003eRewriteH a-\u003eRewriteH a",
          "package": "hermit",
          "signature": "PrettyOptions-\u003eString-\u003eRewriteH a-\u003eRewriteH a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:diffR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "evalScript",
          "package": "hermit",
          "signature": "String -\u003e CLM m ()",
          "source": "src/HERMIT-Shell-Command.html#evalScript",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "evalScript",
          "normalized": "String-\u003eCLM a()",
          "package": "hermit",
          "partial": "Script",
          "signature": "String-\u003eCLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:evalScript"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "getFocusPath",
          "package": "hermit",
          "signature": "CLM m PathH",
          "source": "src/HERMIT-Shell-Command.html#getFocusPath",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "getFocusPath",
          "package": "hermit",
          "partial": "Focus Path",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:getFocusPath"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "performKernelEffect",
          "package": "hermit",
          "signature": "KernelEffect -\u003e ExprH -\u003e CLM m ()",
          "source": "src/HERMIT-Shell-Command.html#performKernelEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "performKernelEffect",
          "normalized": "KernelEffect-\u003eExprH-\u003eCLM a()",
          "package": "hermit",
          "partial": "Kernel Effect",
          "signature": "KernelEffect-\u003eExprH-\u003eCLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:performKernelEffect"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "performMetaCommand",
          "package": "hermit",
          "signature": "MetaCommand -\u003e CLM m ()",
          "source": "src/HERMIT-Shell-Command.html#performMetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "performMetaCommand",
          "normalized": "MetaCommand-\u003eCLM a()",
          "package": "hermit",
          "partial": "Meta Command",
          "signature": "MetaCommand-\u003eCLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:performMetaCommand"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "performQuery",
          "package": "hermit",
          "signature": "QueryFun -\u003e CLM m ()",
          "source": "src/HERMIT-Shell-Command.html#performQuery",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "performQuery",
          "normalized": "QueryFun-\u003eCLM a()",
          "package": "hermit",
          "partial": "Query",
          "signature": "QueryFun-\u003eCLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:performQuery"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "performShellEffect",
          "package": "hermit",
          "signature": "ShellEffect -\u003e CLM m ()",
          "source": "src/HERMIT-Shell-Command.html#performShellEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "performShellEffect",
          "normalized": "ShellEffect-\u003eCLM a()",
          "package": "hermit",
          "partial": "Shell Effect",
          "signature": "ShellEffect-\u003eCLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:performShellEffect"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Command",
          "name": "shellComplete",
          "package": "hermit",
          "signature": "MVar CommandLineState -\u003e String -\u003e String -\u003e IO [Completion]",
          "source": "src/HERMIT-Shell-Command.html#shellComplete",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "shellComplete",
          "normalized": "MVar CommandLineState-\u003eString-\u003eString-\u003eIO[Completion]",
          "package": "hermit",
          "partial": "Complete",
          "signature": "MVar CommandLineState-\u003eString-\u003eString-\u003eIO[Completion]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:shellComplete"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"HERMIT.Shell.Command\",\"HERMIT.Shell.Renderer\"]",
          "name": "unicodeConsole",
          "package": "hermit",
          "signature": "Handle -\u003e PrettyOptions -\u003e Either String DocH -\u003e IO ()",
          "source": "src/HERMIT-Shell-Renderer.html#unicodeConsole",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:unicodeConsole\",\"http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#v:unicodeConsole\"]"
        },
        "index": {
          "hierarchy": "HERMIT Shell Command",
          "module": "HERMIT.Shell.Command",
          "name": "unicodeConsole",
          "normalized": "Handle-\u003ePrettyOptions-\u003eEither String DocH-\u003eIO()",
          "package": "hermit",
          "partial": "Console",
          "signature": "Handle-\u003ePrettyOptions-\u003eEither String DocH-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Command.html#v:unicodeConsole"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Dictionary",
          "name": "Dictionary",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Dictionary.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Shell Dictionary",
          "module": "HERMIT.Shell.Dictionary",
          "name": "Dictionary",
          "package": "hermit",
          "partial": "Dictionary",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Dictionary.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCreate a dictionary from a list of \u003ccode\u003e\u003ca\u003eExternal\u003c/a\u003e\u003c/code\u003es.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Dictionary",
          "name": "mkDict",
          "package": "hermit",
          "signature": "[External] -\u003e Dictionary",
          "source": "src/HERMIT-Shell-Dictionary.html#mkDict",
          "type": "function"
        },
        "index": {
          "description": "Create dictionary from list of External",
          "hierarchy": "HERMIT Shell Dictionary",
          "module": "HERMIT.Shell.Dictionary",
          "name": "mkDict",
          "normalized": "[External]-\u003eDictionary",
          "package": "hermit",
          "partial": "Dict",
          "signature": "[External]-\u003eDictionary",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Dictionary.html#v:mkDict"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe pretty-printing dictionaries.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Dictionary",
          "name": "pp_dictionary",
          "package": "hermit",
          "signature": "Map String (PrettyH CoreTC)",
          "source": "src/HERMIT-Shell-Dictionary.html#pp_dictionary",
          "type": "function"
        },
        "index": {
          "description": "The pretty-printing dictionaries",
          "hierarchy": "HERMIT Shell Dictionary",
          "module": "HERMIT.Shell.Dictionary",
          "name": "pp_dictionary",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Dictionary.html#v:pp_dictionary"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "Externals",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Externals.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "Externals",
          "package": "hermit",
          "partial": "Externals",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "displayScripts",
          "package": "hermit",
          "signature": "QueryFun",
          "source": "src/HERMIT-Shell-Externals.html#displayScripts",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "displayScripts",
          "package": "hermit",
          "partial": "Scripts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:displayScripts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "gc",
          "package": "hermit",
          "signature": "CommandLineState -\u003e IO CommandLineState",
          "source": "src/HERMIT-Shell-Externals.html#gc",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "gc",
          "normalized": "CommandLineState-\u003eIO CommandLineState",
          "package": "hermit",
          "signature": "CommandLineState-\u003eIO CommandLineState",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:gc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInterpret a boxed thing as one of the four possible shell command types.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Externals",
          "name": "interpShellCommand",
          "package": "hermit",
          "signature": "[Interp ShellCommand]",
          "source": "src/HERMIT-Shell-Externals.html#interpShellCommand",
          "type": "function"
        },
        "index": {
          "description": "Interpret boxed thing as one of the four possible shell command types",
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "interpShellCommand",
          "normalized": "[Interp ShellCommand]",
          "package": "hermit",
          "partial": "Shell Command",
          "signature": "[Interp ShellCommand]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:interpShellCommand"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "setWindow",
          "package": "hermit",
          "signature": "CommandLineState -\u003e IO CommandLineState",
          "source": "src/HERMIT-Shell-Externals.html#setWindow",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "setWindow",
          "normalized": "CommandLineState-\u003eIO CommandLineState",
          "package": "hermit",
          "partial": "Window",
          "signature": "CommandLineState-\u003eIO CommandLineState",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:setWindow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "shell_externals",
          "package": "hermit",
          "signature": "[External]",
          "source": "src/HERMIT-Shell-Externals.html#shell_externals",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "shell_externals",
          "normalized": "[External]",
          "package": "hermit",
          "signature": "[External]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:shell_externals"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "showDerivationTree",
          "package": "hermit",
          "signature": "CommandLineState -\u003e IO String",
          "source": "src/HERMIT-Shell-Externals.html#showDerivationTree",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "showDerivationTree",
          "normalized": "CommandLineState-\u003eIO String",
          "package": "hermit",
          "partial": "Derivation Tree",
          "signature": "CommandLineState-\u003eIO String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:showDerivationTree"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "showGraph",
          "package": "hermit",
          "signature": "[(SAST, ExprH, SAST)] -\u003e [(String, SAST)] -\u003e SAST -\u003e String",
          "source": "src/HERMIT-Shell-Externals.html#showGraph",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "showGraph",
          "normalized": "[(SAST,ExprH,SAST)]-\u003e[(String,SAST)]-\u003eSAST-\u003eString",
          "package": "hermit",
          "partial": "Graph",
          "signature": "[(SAST,ExprH,SAST)]-\u003e[(String,SAST)]-\u003eSAST-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:showGraph"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "showRefactorTrail",
          "package": "hermit",
          "signature": "[(a, [String], a)] -\u003e [(a, String)] -\u003e a -\u003e a -\u003e [String]",
          "source": "src/HERMIT-Shell-Externals.html#showRefactorTrail",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "showRefactorTrail",
          "normalized": "[(a,[String],a)]-\u003e[(a,String)]-\u003ea-\u003ea-\u003e[String]",
          "package": "hermit",
          "partial": "Refactor Trail",
          "signature": "[(a,[String],a)]-\u003e[(a,String)]-\u003ea-\u003ea-\u003e[String]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:showRefactorTrail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "showScripts",
          "package": "hermit",
          "signature": "[(ScriptName, Script)] -\u003e String",
          "source": "src/HERMIT-Shell-Externals.html#showScripts",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "showScripts",
          "normalized": "[(ScriptName,Script)]-\u003eString",
          "package": "hermit",
          "partial": "Scripts",
          "signature": "[(ScriptName,Script)]-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:showScripts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Externals",
          "name": "versionCmd",
          "package": "hermit",
          "signature": "VersionCmd -\u003e CommandLineState -\u003e IO CommandLineState",
          "source": "src/HERMIT-Shell-Externals.html#versionCmd",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Externals",
          "module": "HERMIT.Shell.Externals",
          "name": "versionCmd",
          "normalized": "VersionCmd-\u003eCommandLineState-\u003eIO CommandLineState",
          "package": "hermit",
          "partial": "Cmd",
          "signature": "VersionCmd-\u003eCommandLineState-\u003eIO CommandLineState",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Externals.html#v:versionCmd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "Renderer",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Renderer.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "Renderer",
          "package": "hermit",
          "partial": "Renderer",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "UnicodeTerminal",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Renderer.html#UnicodeTerminal",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "UnicodeTerminal",
          "package": "hermit",
          "partial": "Unicode Terminal",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#t:UnicodeTerminal"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "UnicodeTerminal",
          "package": "hermit",
          "signature": "UnicodeTerminal (Handle -\u003e Maybe PathH -\u003e IO ())",
          "source": "src/HERMIT-Shell-Renderer.html#UnicodeTerminal",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "UnicodeTerminal",
          "normalized": "UnicodeTerminal(Handle-\u003eMaybe PathH-\u003eIO())",
          "package": "hermit",
          "partial": "Unicode Terminal",
          "signature": "UnicodeTerminal(Handle-\u003eMaybe PathH-\u003eIO())",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#v:UnicodeTerminal"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "changeRenderer",
          "package": "hermit",
          "signature": "String -\u003e ShellEffect",
          "source": "src/HERMIT-Shell-Renderer.html#changeRenderer",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "changeRenderer",
          "normalized": "String-\u003eShellEffect",
          "package": "hermit",
          "partial": "Renderer",
          "signature": "String-\u003eShellEffect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#v:changeRenderer"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "doSGR",
          "package": "hermit",
          "signature": "[SGR] -\u003e UnicodeTerminal",
          "source": "src/HERMIT-Shell-Renderer.html#doSGR",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "doSGR",
          "normalized": "[SGR]-\u003eUnicodeTerminal",
          "package": "hermit",
          "partial": "SGR",
          "signature": "[SGR]-\u003eUnicodeTerminal",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#v:doSGR"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "setHighlight",
          "package": "hermit",
          "signature": "PathH -\u003e Handle -\u003e Maybe PathH -\u003e IO ()",
          "source": "src/HERMIT-Shell-Renderer.html#setHighlight",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "setHighlight",
          "normalized": "PathH-\u003eHandle-\u003eMaybe PathH-\u003eIO()",
          "package": "hermit",
          "partial": "Highlight",
          "signature": "PathH-\u003eHandle-\u003eMaybe PathH-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#v:setHighlight"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "shellRenderers",
          "package": "hermit",
          "signature": "[(String, Handle -\u003e PrettyOptions -\u003e Either String DocH -\u003e IO ())]",
          "source": "src/HERMIT-Shell-Renderer.html#shellRenderers",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "shellRenderers",
          "normalized": "[(String,Handle-\u003ePrettyOptions-\u003eEither String DocH-\u003eIO())]",
          "package": "hermit",
          "partial": "Renderers",
          "signature": "[(String,Handle-\u003ePrettyOptions-\u003eEither String DocH-\u003eIO())]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#v:shellRenderers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "showRenderers",
          "package": "hermit",
          "signature": "QueryFun",
          "source": "src/HERMIT-Shell-Renderer.html#showRenderers",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "showRenderers",
          "package": "hermit",
          "partial": "Renderers",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#v:showRenderers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Renderer",
          "name": "undoSGRWith",
          "package": "hermit",
          "signature": "[SGR] -\u003e [Attr] -\u003e UnicodeTerminal",
          "source": "src/HERMIT-Shell-Renderer.html#undoSGRWith",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Renderer",
          "module": "HERMIT.Shell.Renderer",
          "name": "undoSGRWith",
          "normalized": "[SGR]-\u003e[Attr]-\u003eUnicodeTerminal",
          "package": "hermit",
          "partial": "SGRWith",
          "signature": "[SGR]-\u003e[Attr]-\u003eUnicodeTerminal",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Renderer.html#v:undoSGRWith"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.ScriptToRewrite",
          "name": "ScriptToRewrite",
          "package": "hermit",
          "source": "src/HERMIT-Shell-ScriptToRewrite.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Shell ScriptToRewrite",
          "module": "HERMIT.Shell.ScriptToRewrite",
          "name": "ScriptToRewrite",
          "package": "hermit",
          "partial": "Script To Rewrite",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-ScriptToRewrite.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInsert a script into the \u003ccode\u003e\u003ca\u003eDictionary\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.ScriptToRewrite",
          "name": "addScriptToDict",
          "package": "hermit",
          "signature": "ScriptName -\u003e Script -\u003e Dictionary -\u003e m Dictionary",
          "source": "src/HERMIT-Shell-ScriptToRewrite.html#addScriptToDict",
          "type": "function"
        },
        "index": {
          "description": "Insert script into the Dictionary",
          "hierarchy": "HERMIT Shell ScriptToRewrite",
          "module": "HERMIT.Shell.ScriptToRewrite",
          "name": "addScriptToDict",
          "normalized": "ScriptName-\u003eScript-\u003eDictionary-\u003ea Dictionary",
          "package": "hermit",
          "partial": "Script To Dict",
          "signature": "ScriptName-\u003eScript-\u003eDictionary-\u003em Dictionary",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-ScriptToRewrite.html#v:addScriptToDict"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Types",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Types",
          "package": "hermit",
          "partial": "Types",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CLException",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#CLException",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CLException",
          "package": "hermit",
          "partial": "CLException",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:CLException"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CLM",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#CLM",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CLM",
          "package": "hermit",
          "partial": "CLM",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:CLM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CommandLineState",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CommandLineState",
          "package": "hermit",
          "partial": "Command Line State",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:CommandLineState"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eKernelEffects are things that affect the state of the Kernel\n   - Apply a rewrite (giving a whole new lower-level AST).\n   - Change the current location using a computed path.\n   - Change the currect location using directions.\n   - Begin or end a scope.\n   - Delete an AST\n   - Run a precondition or other predicate that must not fail.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "KernelEffect",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#KernelEffect",
          "type": "data"
        },
        "index": {
          "description": "KernelEffects are things that affect the state of the Kernel Apply rewrite giving whole new lower-level AST Change the current location using computed path Change the currect location using directions Begin or end scope Delete an AST Run precondition or other predicate that must not fail",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "KernelEffect",
          "package": "hermit",
          "partial": "Kernel Effect",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:KernelEffect"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "MetaCommand",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "MetaCommand",
          "package": "hermit",
          "partial": "Meta Command",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:MetaCommand"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "QueryFun",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#QueryFun",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "QueryFun",
          "package": "hermit",
          "partial": "Query Fun",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:QueryFun"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "RewriteName",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#RewriteName",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "RewriteName",
          "package": "hermit",
          "partial": "Rewrite Name",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:RewriteName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "ScriptName",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#ScriptName",
          "type": "type"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "ScriptName",
          "package": "hermit",
          "partial": "Script Name",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:ScriptName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThere are four types of commands.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "ShellCommand",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#ShellCommand",
          "type": "data"
        },
        "index": {
          "description": "There are four types of commands",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "ShellCommand",
          "package": "hermit",
          "partial": "Shell Command",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:ShellCommand"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "ShellEffect",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#ShellEffect",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "ShellEffect",
          "package": "hermit",
          "partial": "Shell Effect",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:ShellEffect"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "VersionCmd",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#VersionCmd",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "VersionCmd",
          "package": "hermit",
          "partial": "Version Cmd",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:VersionCmd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "VersionStore",
          "package": "hermit",
          "source": "src/HERMIT-Shell-Types.html#VersionStore",
          "type": "data"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "VersionStore",
          "package": "hermit",
          "partial": "Version Store",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#t:VersionStore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Abort",
          "package": "hermit",
          "signature": "Abort",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Abort",
          "package": "hermit",
          "partial": "Abort",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Abort"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "AddTag",
          "package": "hermit",
          "signature": "AddTag String",
          "source": "src/HERMIT-Shell-Types.html#VersionCmd",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "AddTag",
          "package": "hermit",
          "partial": "Add Tag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:AddTag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Apply",
          "package": "hermit",
          "signature": "RewriteH g -\u003e KernelEffect",
          "source": "src/HERMIT-Shell-Types.html#KernelEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Apply",
          "normalized": "RewriteH a-\u003eKernelEffect",
          "package": "hermit",
          "partial": "Apply",
          "signature": "RewriteH g-\u003eKernelEffect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Apply"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Back",
          "package": "hermit",
          "signature": "Back",
          "source": "src/HERMIT-Shell-Types.html#VersionCmd",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Back",
          "package": "hermit",
          "partial": "Back",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Back"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "BeginScope",
          "package": "hermit",
          "signature": "KernelEffect",
          "source": "src/HERMIT-Shell-Types.html#KernelEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "BeginScope",
          "package": "hermit",
          "partial": "Begin Scope",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:BeginScope"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CLAbort",
          "package": "hermit",
          "signature": "CLAbort",
          "source": "src/HERMIT-Shell-Types.html#CLException",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CLAbort",
          "package": "hermit",
          "partial": "CLAbort",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:CLAbort"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CLContinue",
          "package": "hermit",
          "signature": "CLContinue CommandLineState",
          "source": "src/HERMIT-Shell-Types.html#CLException",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CLContinue",
          "package": "hermit",
          "partial": "CLContinue",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:CLContinue"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CLError",
          "package": "hermit",
          "signature": "CLError String",
          "source": "src/HERMIT-Shell-Types.html#CLException",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CLError",
          "package": "hermit",
          "partial": "CLError",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:CLError"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CLM",
          "package": "hermit",
          "signature": "CLM",
          "source": "src/HERMIT-Shell-Types.html#CLM",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CLM",
          "package": "hermit",
          "partial": "CLM",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:CLM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CLResume",
          "package": "hermit",
          "signature": "CLResume SAST",
          "source": "src/HERMIT-Shell-Types.html#CLException",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CLResume",
          "package": "hermit",
          "partial": "CLResume",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:CLResume"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CLSModify",
          "package": "hermit",
          "signature": "(CommandLineState -\u003e IO CommandLineState) -\u003e ShellEffect",
          "source": "src/HERMIT-Shell-Types.html#ShellEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CLSModify",
          "normalized": "(CommandLineState-\u003eIO CommandLineState)-\u003eShellEffect",
          "package": "hermit",
          "partial": "CLSModify",
          "signature": "(CommandLineState-\u003eIO CommandLineState)-\u003eShellEffect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:CLSModify"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CommandLineState",
          "package": "hermit",
          "signature": "CommandLineState",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CommandLineState",
          "package": "hermit",
          "partial": "Command Line State",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:CommandLineState"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Continue",
          "package": "hermit",
          "signature": "Continue",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Continue",
          "package": "hermit",
          "partial": "Continue",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Continue"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "CorrectnessCritera",
          "package": "hermit",
          "signature": "TranslateH g () -\u003e KernelEffect",
          "source": "src/HERMIT-Shell-Types.html#KernelEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "CorrectnessCritera",
          "normalized": "TranslateH a()-\u003eKernelEffect",
          "package": "hermit",
          "partial": "Correctness Critera",
          "signature": "TranslateH g()-\u003eKernelEffect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:CorrectnessCritera"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "DefineScript",
          "package": "hermit",
          "signature": "DefineScript ScriptName String",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "DefineScript",
          "package": "hermit",
          "partial": "Define Script",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:DefineScript"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Delete",
          "package": "hermit",
          "signature": "SAST -\u003e KernelEffect",
          "source": "src/HERMIT-Shell-Types.html#KernelEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Delete",
          "normalized": "SAST-\u003eKernelEffect",
          "package": "hermit",
          "partial": "Delete",
          "signature": "SAST-\u003eKernelEffect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Delete"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Diff",
          "package": "hermit",
          "signature": "Diff SAST SAST",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Diff",
          "package": "hermit",
          "partial": "Diff",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Diff"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Direction",
          "package": "hermit",
          "signature": "Direction -\u003e KernelEffect",
          "source": "src/HERMIT-Shell-Types.html#KernelEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Direction",
          "normalized": "Direction-\u003eKernelEffect",
          "package": "hermit",
          "partial": "Direction",
          "signature": "Direction-\u003eKernelEffect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Direction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Display",
          "package": "hermit",
          "signature": "QueryFun",
          "source": "src/HERMIT-Shell-Types.html#QueryFun",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Display",
          "package": "hermit",
          "partial": "Display",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Display"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Dump",
          "package": "hermit",
          "signature": "Dump String String Int",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Dump",
          "package": "hermit",
          "partial": "Dump",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Dump"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "EndScope",
          "package": "hermit",
          "signature": "KernelEffect",
          "source": "src/HERMIT-Shell-Types.html#KernelEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "EndScope",
          "package": "hermit",
          "partial": "End Scope",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:EndScope"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Goto",
          "package": "hermit",
          "signature": "Goto Int",
          "source": "src/HERMIT-Shell-Types.html#VersionCmd",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Goto",
          "package": "hermit",
          "partial": "Goto",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Goto"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "GotoTag",
          "package": "hermit",
          "signature": "GotoTag String",
          "source": "src/HERMIT-Shell-Types.html#VersionCmd",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "GotoTag",
          "package": "hermit",
          "partial": "Goto Tag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:GotoTag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Inquiry",
          "package": "hermit",
          "signature": "(CommandLineState -\u003e IO String) -\u003e QueryFun",
          "source": "src/HERMIT-Shell-Types.html#QueryFun",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Inquiry",
          "normalized": "(CommandLineState-\u003eIO String)-\u003eQueryFun",
          "package": "hermit",
          "partial": "Inquiry",
          "signature": "(CommandLineState-\u003eIO String)-\u003eQueryFun",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Inquiry"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommand that modifies the state of the (scoped) kernel.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "KernelEffect",
          "package": "hermit",
          "signature": "KernelEffect KernelEffect",
          "source": "src/HERMIT-Shell-Types.html#ShellCommand",
          "type": "function"
        },
        "index": {
          "description": "Command that modifies the state of the scoped kernel",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "KernelEffect",
          "package": "hermit",
          "partial": "Kernel Effect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:KernelEffect"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "LoadFile",
          "package": "hermit",
          "signature": "LoadFile ScriptName FilePath",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "LoadFile",
          "package": "hermit",
          "partial": "Load File",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:LoadFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommand that otherwise controls HERMIT (abort, resume, save, etc).\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "MetaCommand",
          "package": "hermit",
          "signature": "MetaCommand MetaCommand",
          "source": "src/HERMIT-Shell-Types.html#ShellCommand",
          "type": "function"
        },
        "index": {
          "description": "Command that otherwise controls HERMIT abort resume save etc",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "MetaCommand",
          "package": "hermit",
          "partial": "Meta Command",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:MetaCommand"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Pathfinder",
          "package": "hermit",
          "signature": "TranslateH g LocalPathH -\u003e KernelEffect",
          "source": "src/HERMIT-Shell-Types.html#KernelEffect",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Pathfinder",
          "normalized": "TranslateH a LocalPathH-\u003eKernelEffect",
          "package": "hermit",
          "partial": "Pathfinder",
          "signature": "TranslateH g LocalPathH-\u003eKernelEffect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Pathfinder"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "QueryDocH",
          "package": "hermit",
          "signature": "(PrettyC -\u003e PrettyH CoreTC -\u003e TranslateH CoreTC DocH) -\u003e QueryFun",
          "source": "src/HERMIT-Shell-Types.html#QueryFun",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "QueryDocH",
          "normalized": "(PrettyC-\u003ePrettyH CoreTC-\u003eTranslateH CoreTC DocH)-\u003eQueryFun",
          "package": "hermit",
          "partial": "Query Doc",
          "signature": "(PrettyC-\u003ePrettyH CoreTC-\u003eTranslateH CoreTC DocH)-\u003eQueryFun",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:QueryDocH"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommand that queries the AST with a Translate (read only).\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "QueryFun",
          "package": "hermit",
          "signature": "QueryFun QueryFun",
          "source": "src/HERMIT-Shell-Types.html#ShellCommand",
          "type": "function"
        },
        "index": {
          "description": "Command that queries the AST with Translate read only",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "QueryFun",
          "package": "hermit",
          "partial": "Query Fun",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:QueryFun"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "QueryString",
          "package": "hermit",
          "signature": "TranslateH g String -\u003e QueryFun",
          "source": "src/HERMIT-Shell-Types.html#QueryFun",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "QueryString",
          "normalized": "TranslateH a String-\u003eQueryFun",
          "package": "hermit",
          "partial": "Query String",
          "signature": "TranslateH g String-\u003eQueryFun",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:QueryString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Resume",
          "package": "hermit",
          "signature": "Resume",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Resume",
          "package": "hermit",
          "partial": "Resume",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Resume"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "RunScript",
          "package": "hermit",
          "signature": "RunScript ScriptName",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "RunScript",
          "package": "hermit",
          "partial": "Run Script",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:RunScript"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "SaveFile",
          "package": "hermit",
          "signature": "SaveFile FilePath",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "SaveFile",
          "package": "hermit",
          "partial": "Save File",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:SaveFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "SaveScript",
          "package": "hermit",
          "signature": "SaveScript FilePath ScriptName",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "SaveScript",
          "package": "hermit",
          "partial": "Save Script",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:SaveScript"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "ScriptToRewrite",
          "package": "hermit",
          "signature": "ScriptToRewrite RewriteName ScriptName",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "ScriptToRewrite",
          "package": "hermit",
          "partial": "Script To Rewrite",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:ScriptToRewrite"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "SeqMeta",
          "package": "hermit",
          "signature": "SeqMeta [MetaCommand]",
          "source": "src/HERMIT-Shell-Types.html#MetaCommand",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "SeqMeta",
          "normalized": "SeqMeta[MetaCommand]",
          "package": "hermit",
          "partial": "Seq Meta",
          "signature": "SeqMeta[MetaCommand]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:SeqMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommand that modifies the state of the shell.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "ShellEffect",
          "package": "hermit",
          "signature": "ShellEffect ShellEffect",
          "source": "src/HERMIT-Shell-Types.html#ShellCommand",
          "type": "function"
        },
        "index": {
          "description": "Command that modifies the state of the shell",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "ShellEffect",
          "package": "hermit",
          "partial": "Shell Effect",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:ShellEffect"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "Step",
          "package": "hermit",
          "signature": "Step",
          "source": "src/HERMIT-Shell-Types.html#VersionCmd",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "Step",
          "package": "hermit",
          "partial": "Step",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:Step"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "VersionStore",
          "package": "hermit",
          "signature": "VersionStore",
          "source": "src/HERMIT-Shell-Types.html#VersionStore",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "VersionStore",
          "package": "hermit",
          "partial": "Version Store",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:VersionStore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "abort",
          "package": "hermit",
          "signature": "CLM m ()",
          "source": "src/HERMIT-Shell-Types.html#abort",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "abort",
          "normalized": "CLM a()",
          "package": "hermit",
          "signature": "CLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:abort"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eif true, run Core Lint on module after each rewrite\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_corelint",
          "package": "hermit",
          "signature": "Bool",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "if true run Core Lint on module after each rewrite",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_corelint",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_corelint"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ethe current AST\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_cursor",
          "package": "hermit",
          "signature": "SAST",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "the current AST",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_cursor",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_cursor"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "cl_dict",
          "package": "hermit",
          "signature": "Dictionary",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_dict",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_dict"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eif true, show diffs rather than pp full code\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_diffonly",
          "package": "hermit",
          "signature": "Bool",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "if true show diffs rather than pp full code",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_diffonly",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_diffonly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eif true, abort on *any* failure\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_failhard",
          "package": "hermit",
          "signature": "Bool",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "if true abort on any failure",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_failhard",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_failhard"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003econsole height, in lines\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_height",
          "package": "hermit",
          "signature": "Int",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "console height in lines",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_height",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_height"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "cl_initSAST",
          "package": "hermit",
          "signature": "SAST",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_initSAST",
          "package": "hermit",
          "partial": "SAST",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_initSAST"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "cl_kernel",
          "package": "hermit",
          "signature": "ScopedKernel",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_kernel",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_kernel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ekeyboard input the nav panel\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_nav",
          "package": "hermit",
          "signature": "Bool",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "keyboard input the nav panel",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_nav",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_nav"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ewhich pretty printer to use\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_pretty",
          "package": "hermit",
          "signature": "PrettyH CoreTC",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "which pretty printer to use",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_pretty",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_pretty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ethe options for the pretty printer\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_pretty_opts",
          "package": "hermit",
          "signature": "PrettyOptions",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "the options for the pretty printer",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_pretty_opts",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_pretty_opts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ethe way of outputing to the screen\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_render",
          "package": "hermit",
          "signature": "Handle -\u003e PrettyOptions -\u003e Either String DocH -\u003e IO ()",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "the way of outputing to the screen",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_render",
          "normalized": "Handle-\u003ePrettyOptions-\u003eEither String DocH-\u003eIO()",
          "package": "hermit",
          "signature": "Handle-\u003ePrettyOptions-\u003eEither String DocH-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_render"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eif running a script\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_running_script",
          "package": "hermit",
          "signature": "Bool",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "if running script",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_running_script",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_running_script"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "cl_scripts",
          "package": "hermit",
          "signature": "[(ScriptName, Script)]",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_scripts",
          "normalized": "[(ScriptName,Script)]",
          "package": "hermit",
          "signature": "[(ScriptName,Script)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_scripts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ethe list of ticked messages\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_tick",
          "package": "hermit",
          "signature": "TVar (Map String Int)",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "the list of ticked messages",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_tick",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_tick"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "cl_version",
          "package": "hermit",
          "signature": "VersionStore",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_version",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_version"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003epath to beginning of window, always a prefix of focus path in kernel\n these four should be in a reader\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "cl_window",
          "package": "hermit",
          "signature": "PathH",
          "source": "src/HERMIT-Shell-Types.html#CommandLineState",
          "type": "function"
        },
        "index": {
          "description": "path to beginning of window always prefix of focus path in kernel these four should be in reader",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "cl_window",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:cl_window"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "continue",
          "package": "hermit",
          "signature": "CommandLineState -\u003e CLM m ()",
          "source": "src/HERMIT-Shell-Types.html#continue",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "continue",
          "normalized": "CommandLineState-\u003eCLM a()",
          "package": "hermit",
          "signature": "CommandLineState-\u003eCLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:continue"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "iokm2clm",
          "package": "hermit",
          "signature": "String -\u003e IO (KureM a) -\u003e CLM m a",
          "source": "src/HERMIT-Shell-Types.html#iokm2clm",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "iokm2clm",
          "normalized": "String-\u003eIO(KureM a)-\u003eCLM b a",
          "package": "hermit",
          "signature": "String-\u003eIO(KureM a)-\u003eCLM m a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:iokm2clm"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "iokm2clm'",
          "package": "hermit",
          "signature": "String -\u003e (a -\u003e CLM m b) -\u003e IO (KureM a) -\u003e CLM m b",
          "source": "src/HERMIT-Shell-Types.html#iokm2clm%27",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "iokm2clm'",
          "normalized": "String-\u003e(a-\u003eCLM b c)-\u003eIO(KureM a)-\u003eCLM b c",
          "package": "hermit",
          "signature": "String-\u003e(a-\u003eCLM m b)-\u003eIO(KureM a)-\u003eCLM m b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:iokm2clm-39-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "iokm2clm''",
          "package": "hermit",
          "signature": "IO (KureM a) -\u003e CLM m a",
          "source": "src/HERMIT-Shell-Types.html#iokm2clm%27%27",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "iokm2clm''",
          "normalized": "IO(KureM a)-\u003eCLM b a",
          "package": "hermit",
          "signature": "IO(KureM a)-\u003eCLM m a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:iokm2clm-39--39-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA composite meta-command for running a loaded script immediately.\n   The script is given the same name as the filepath.\n\u003c/p\u003e",
          "module": "HERMIT.Shell.Types",
          "name": "loadAndRun",
          "package": "hermit",
          "signature": "FilePath -\u003e MetaCommand",
          "source": "src/HERMIT-Shell-Types.html#loadAndRun",
          "type": "function"
        },
        "index": {
          "description": "composite meta-command for running loaded script immediately The script is given the same name as the filepath",
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "loadAndRun",
          "normalized": "FilePath-\u003eMetaCommand",
          "package": "hermit",
          "partial": "And Run",
          "signature": "FilePath-\u003eMetaCommand",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:loadAndRun"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "message",
          "package": "hermit",
          "signature": "String -\u003e QueryFun",
          "source": "src/HERMIT-Shell-Types.html#message",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "message",
          "normalized": "String-\u003eQueryFun",
          "package": "hermit",
          "signature": "String-\u003eQueryFun",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:message"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "newSAST",
          "package": "hermit",
          "signature": "ExprH -\u003e SAST -\u003e CommandLineState -\u003e CommandLineState",
          "source": "src/HERMIT-Shell-Types.html#newSAST",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "newSAST",
          "normalized": "ExprH-\u003eSAST-\u003eCommandLineState-\u003eCommandLineState",
          "package": "hermit",
          "partial": "SAST",
          "signature": "ExprH-\u003eSAST-\u003eCommandLineState-\u003eCommandLineState",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:newSAST"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "resume",
          "package": "hermit",
          "signature": "SAST -\u003e CLM m ()",
          "source": "src/HERMIT-Shell-Types.html#resume",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "resume",
          "normalized": "SAST-\u003eCLM a()",
          "package": "hermit",
          "signature": "SAST-\u003eCLM m()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:resume"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "runCLM",
          "package": "hermit",
          "signature": "CommandLineState -\u003e CLM m a -\u003e m (Either CLException a, CommandLineState)",
          "source": "src/HERMIT-Shell-Types.html#runCLM",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "runCLM",
          "normalized": "CommandLineState-\u003eCLM a b-\u003ea(Either CLException b,CommandLineState)",
          "package": "hermit",
          "partial": "CLM",
          "signature": "CommandLineState-\u003eCLM m a-\u003em(Either CLException a,CommandLineState)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:runCLM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "unCLM",
          "package": "hermit",
          "signature": "ErrorT CLException (StateT CommandLineState m) a",
          "source": "src/HERMIT-Shell-Types.html#CLM",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "unCLM",
          "package": "hermit",
          "partial": "CLM",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:unCLM"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "vs_graph",
          "package": "hermit",
          "signature": "[(SAST, ExprH, SAST)]",
          "source": "src/HERMIT-Shell-Types.html#VersionStore",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "vs_graph",
          "normalized": "[(SAST,ExprH,SAST)]",
          "package": "hermit",
          "signature": "[(SAST,ExprH,SAST)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:vs_graph"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT.Shell.Types",
          "name": "vs_tags",
          "package": "hermit",
          "signature": "[(String, SAST)]",
          "source": "src/HERMIT-Shell-Types.html#VersionStore",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT Shell Types",
          "module": "HERMIT.Shell.Types",
          "name": "vs_tags",
          "normalized": "[(String,SAST)]",
          "package": "hermit",
          "signature": "[(String,SAST)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT-Shell-Types.html#v:vs_tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT",
          "name": "HERMIT",
          "package": "hermit",
          "source": "src/HERMIT.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "HERMIT",
          "module": "HERMIT",
          "name": "HERMIT",
          "package": "hermit",
          "partial": "HERMIT",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "HERMIT",
          "name": "plugin",
          "package": "hermit",
          "signature": "Plugin",
          "source": "src/HERMIT.html#plugin",
          "type": "function"
        },
        "index": {
          "hierarchy": "HERMIT",
          "module": "HERMIT",
          "name": "plugin",
          "package": "hermit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/hermit/docs/HERMIT.html#v:plugin"
      }
    }
  ]
]