[
  {
    "cmd": "delete-by-query",
    "query": {
      "contexts": [
        "package"
      ],
      "query": {
        "op": "case",
        "type": "word",
        "word": "penny"
      },
      "type": "context"
    }
  },
  [
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Clear",
          "name": "Clear",
          "package": "penny",
          "source": "src/Penny-Brenner-Clear.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Brenner Clear",
          "module": "Penny.Brenner.Clear",
          "name": "Clear",
          "package": "penny",
          "partial": "Clear",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Clear.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Clear",
          "name": "mode",
          "package": "penny",
          "signature": "Mode",
          "source": "src/Penny-Brenner-Clear.html#mode",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Clear",
          "module": "Penny.Brenner.Clear",
          "name": "mode",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Clear.html#v:mode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Database",
          "name": "Database",
          "package": "penny",
          "source": "src/Penny-Brenner-Database.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Brenner Database",
          "module": "Penny.Brenner.Database",
          "name": "Database",
          "package": "penny",
          "partial": "Database",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Database.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Database",
          "name": "mode",
          "package": "penny",
          "signature": "Mode",
          "source": "src/Penny-Brenner-Database.html#mode",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Database",
          "module": "Penny.Brenner.Database",
          "name": "mode",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Database.html#v:mode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Import",
          "name": "Import",
          "package": "penny",
          "source": "src/Penny-Brenner-Import.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Brenner Import",
          "module": "Penny.Brenner.Import",
          "name": "Import",
          "package": "penny",
          "partial": "Import",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Import.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Import",
          "name": "mode",
          "package": "penny",
          "signature": "Mode",
          "source": "src/Penny-Brenner-Import.html#mode",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Import",
          "module": "Penny.Brenner.Import",
          "name": "mode",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Import.html#v:mode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Info",
          "name": "Info",
          "package": "penny",
          "source": "src/Penny-Brenner-Info.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Brenner Info",
          "module": "Penny.Brenner.Info",
          "name": "Info",
          "package": "penny",
          "partial": "Info",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Info.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Info",
          "name": "mode",
          "package": "penny",
          "signature": "Config -\u003e Mode (ProgName -\u003e String) (IO ())",
          "source": "src/Penny-Brenner-Info.html#mode",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Info",
          "module": "Penny.Brenner.Info",
          "name": "mode",
          "normalized": "Config-\u003eMode(ProgName-\u003eString)(IO())",
          "package": "penny",
          "signature": "Config-\u003eMode(ProgName-\u003eString)(IO())",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Info.html#v:mode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Merge",
          "name": "Merge",
          "package": "penny",
          "source": "src/Penny-Brenner-Merge.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Brenner Merge",
          "module": "Penny.Brenner.Merge",
          "name": "Merge",
          "package": "penny",
          "partial": "Merge",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Merge.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Merge",
          "name": "mode",
          "package": "penny",
          "signature": "Mode",
          "source": "src/Penny-Brenner-Merge.html#mode",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Merge",
          "module": "Penny.Brenner.Merge",
          "name": "mode",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Merge.html#v:mode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eParses any OFX 1.0-series file. Uses the parser from the ofx\n package.\n\u003c/p\u003e\u003cp\u003eThe Postings that this module returns \u003cem\u003ealways\u003c/em\u003e have an empty\n Description field. Information from the OFX Payee field is placed\n into the Payee field of the Posting record.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Brenner.OFX",
          "name": "OFX",
          "package": "penny",
          "source": "src/Penny-Brenner-OFX.html",
          "type": "module"
        },
        "index": {
          "description": "Parses any OFX series file Uses the parser from the ofx package The Postings that this module returns always have an empty Description field Information from the OFX Payee field is placed into the Payee field of the Posting record",
          "hierarchy": "Penny Brenner OFX",
          "module": "Penny.Brenner.OFX",
          "name": "OFX",
          "package": "penny",
          "partial": "OFX",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-OFX.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParser for OFX files.\n\u003c/p\u003e",
          "module": "Penny.Brenner.OFX",
          "name": "parser",
          "package": "penny",
          "signature": "(ParserDesc, ParserFn)",
          "source": "src/Penny-Brenner-OFX.html#parser",
          "type": "function"
        },
        "index": {
          "description": "Parser for OFX files",
          "hierarchy": "Penny Brenner OFX",
          "module": "Penny.Brenner.OFX",
          "name": "parser",
          "normalized": "(ParserDesc,ParserFn)",
          "package": "penny",
          "signature": "(ParserDesc,ParserFn)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-OFX.html#v:parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParser for OFX files.  Any incoming data is first filtered\n through the given function.  This allows you to correct broken\n OFX statements.  For example, Bank of America issues OFX files that\n do not properly escape ampersands.  Using this function you can\n change every ampersand to something properly escaped (or just\n change it to the word \"and\".)\n\u003c/p\u003e",
          "module": "Penny.Brenner.OFX",
          "name": "prepassParser",
          "package": "penny",
          "signature": "(String -\u003e String) -\u003e (ParserDesc, ParserFn)",
          "source": "src/Penny-Brenner-OFX.html#prepassParser",
          "type": "function"
        },
        "index": {
          "description": "Parser for OFX files Any incoming data is first filtered through the given function This allows you to correct broken OFX statements For example Bank of America issues OFX files that do not properly escape ampersands Using this function you can change every ampersand to something properly escaped or just change it to the word and",
          "hierarchy": "Penny Brenner OFX",
          "module": "Penny.Brenner.OFX",
          "name": "prepassParser",
          "normalized": "(String-\u003eString)-\u003e(ParserDesc,ParserFn)",
          "package": "penny",
          "partial": "Parser",
          "signature": "(String-\u003eString)-\u003e(ParserDesc,ParserFn)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-OFX.html#v:prepassParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003ePrints parsed transactions.\n\u003c/p\u003e\u003cp\u003eTODO add support to this and other Brenner components for reading\n from stdin.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Brenner.Print",
          "name": "Print",
          "package": "penny",
          "source": "src/Penny-Brenner-Print.html",
          "type": "module"
        },
        "index": {
          "description": "Prints parsed transactions TODO add support to this and other Brenner components for reading from stdin",
          "hierarchy": "Penny Brenner Print",
          "module": "Penny.Brenner.Print",
          "name": "Print",
          "package": "penny",
          "partial": "Print",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Print.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Print",
          "name": "mode",
          "package": "penny",
          "signature": "Mode",
          "source": "src/Penny-Brenner-Print.html#mode",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Print",
          "module": "Penny.Brenner.Print",
          "name": "mode",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Print.html#v:mode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "Types",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Types",
          "package": "penny",
          "partial": "Types",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "AllowNew",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#AllowNew",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "AllowNew",
          "package": "penny",
          "partial": "Allow New",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:AllowNew"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe amount of the transaction. Do not include any leading plus or\n minus signs; this should be only digits and a decimal point.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Amount",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Amount",
          "type": "data"
        },
        "index": {
          "description": "The amount of the transaction Do not include any leading plus or minus signs this should be only digits and decimal point",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Amount",
          "package": "penny",
          "partial": "Amount",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConfiguration for the Brenner program. You can optionally have\n a default FitAcct, which is used if you do not specify any FitAcct on the\n command line. You can also name any number of additional FitAccts. If\n you do not specify a default FitAcct, you must specify a FitAcct on the\n command line.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Config",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Config",
          "type": "data"
        },
        "index": {
          "description": "Configuration for the Brenner program You can optionally have default FitAcct which is used if you do not specify any FitAcct on the command line You can also name any number of additional FitAccts If you do not specify default FitAcct you must specify FitAcct on the command line",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Config",
          "package": "penny",
          "partial": "Config",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Config"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe currency for all transactions, e.g. \u003ccode\u003e$\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Currency",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Currency",
          "type": "newtype"
        },
        "index": {
          "description": "The currency for all transactions e.g",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Currency",
          "package": "penny",
          "partial": "Currency",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Currency"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe date reported by the financial institution.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Date",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Date",
          "type": "newtype"
        },
        "index": {
          "description": "The date reported by the financial institution",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Date",
          "package": "penny",
          "partial": "Date",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "DbList",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#DbList",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "DbList",
          "package": "penny",
          "partial": "Db List",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:DbList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhere is the database of postings?\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "DbLocation",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#DbLocation",
          "type": "newtype"
        },
        "index": {
          "description": "Where is the database of postings",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "DbLocation",
          "package": "penny",
          "partial": "Db Location",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:DbLocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "DbMap",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#DbMap",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "DbMap",
          "package": "penny",
          "partial": "Db Map",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:DbMap"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe default account to place unclassified postings in. For\n instance \u003ccode\u003eExpenses:Unclassified\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "DefaultAcct",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#DefaultAcct",
          "type": "newtype"
        },
        "index": {
          "description": "The default account to place unclassified postings in For instance Expenses Unclassified",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "DefaultAcct",
          "package": "penny",
          "partial": "Default Acct",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:DefaultAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe transaction description. Some institutions assign only a\n description (sometimes muddling a payee with long codes, some\n dates, etc). Brenner prefers the Payee if there is one, and uses a\n Desc otherwise.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Desc",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Desc",
          "type": "newtype"
        },
        "index": {
          "description": "The transaction description Some institutions assign only description sometimes muddling payee with long codes some dates etc Brenner prefers the Payee if there is one and uses Desc otherwise",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Desc",
          "package": "penny",
          "partial": "Desc",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Desc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA batch of settings representing a single financial institution\n account.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "FitAcct",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "data"
        },
        "index": {
          "description": "batch of settings representing single financial institution account",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitAcct",
          "package": "penny",
          "partial": "Fit Acct",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:FitAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eText description of the financial institution account.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "FitAcctDesc",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#FitAcctDesc",
          "type": "newtype"
        },
        "index": {
          "description": "Text description of the financial institution account",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitAcctDesc",
          "package": "penny",
          "partial": "Fit Acct Desc",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:FitAcctDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA name used to refer to a batch of settings.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "FitAcctName",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#FitAcctName",
          "type": "newtype"
        },
        "index": {
          "description": "name used to refer to batch of settings",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitAcctName",
          "package": "penny",
          "partial": "Fit Acct Name",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:FitAcctName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "FitFileLocation",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#FitFileLocation",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitFileLocation",
          "package": "penny",
          "partial": "Fit File Location",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:FitFileLocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFor Brenner to work, the bank has to assign unique identifiers to\n each transaction that it gives you for download. This is the\n easiest reliable way to ensure duplicates are not processed\n multiple times. (There are other ways to accomplish this, but they\n are much harder and less reliable.) If the bank does not do this,\n you can't use Brenner.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "FitId",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#FitId",
          "type": "newtype"
        },
        "index": {
          "description": "For Brenner to work the bank has to assign unique identifiers to each transaction that it gives you for download This is the easiest reliable way to ensure duplicates are not processed multiple times There are other ways to accomplish this but they are much harder and less reliable If the bank does not do this you can use Brenner",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitId",
          "package": "penny",
          "partial": "Fit Id",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:FitId"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReports changes in account balances. Avoids using \u003cem\u003edebit\u003c/em\u003e and\n \u003cem\u003ecredit\u003c/em\u003e as these terms are used differently by the bank than in\n your ledger (that is, the bank reports it from their perspective,\n not yours) so instead the terms \u003cem\u003eincrease\u003c/em\u003e and \u003cem\u003edecrease\u003c/em\u003e are\n used. IncDec is used to record the bank's transactions so\n \u003cem\u003eincrease\u003c/em\u003e and \u003cem\u003edecrease\u003c/em\u003e are used in the same way you would see\n them on a bank statement, whether it's a credit card, loan,\n checking account, etc.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "IncDec",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#IncDec",
          "type": "data"
        },
        "index": {
          "description": "Reports changes in account balances Avoids using debit and credit as these terms are used differently by the bank than in your ledger that is the bank reports it from their perspective not yours so instead the terms increase and decrease are used IncDec is used to record the bank transactions so increase and decrease are used in the same way you would see them on bank statement whether it credit card loan checking account etc",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "IncDec",
          "package": "penny",
          "partial": "Inc Dec",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:IncDec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe type of all Brenner MultiArg modes.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Mode",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Mode",
          "type": "type"
        },
        "index": {
          "description": "The type of all Brenner MultiArg modes",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Mode",
          "package": "penny",
          "partial": "Mode",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Mode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eText description of the parser itself.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "ParserDesc",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#ParserDesc",
          "type": "newtype"
        },
        "index": {
          "description": "Text description of the parser itself",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "ParserDesc",
          "package": "penny",
          "partial": "Parser Desc",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:ParserDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll parsers must be of this type.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "ParserFn",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#ParserFn",
          "type": "type"
        },
        "index": {
          "description": "All parsers must be of this type",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "ParserFn",
          "package": "penny",
          "partial": "Parser Fn",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:ParserFn"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSome financial institutions assign a separate Payee in addition\n to a description. Others just have a single Description field. If\n this institution uses both, put something here. Brenner will prefer\n the Payee if it is not zero length; then it will use the Desc.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Payee",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Payee",
          "type": "newtype"
        },
        "index": {
          "description": "Some financial institutions assign separate Payee in addition to description Others just have single Description field If this institution uses both put something here Brenner will prefer the Payee if it is not zero length then it will use the Desc",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Payee",
          "package": "penny",
          "partial": "Payee",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe Penny account holding postings for this financial\n institution. For instance it might be \u003ccode\u003eAssets:Checking\u003c/code\u003e if this is\n your checking account, \u003ccode\u003eLiabilities:Credit Card\u003c/code\u003e, or whatever.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "PennyAcct",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#PennyAcct",
          "type": "newtype"
        },
        "index": {
          "description": "The Penny account holding postings for this financial institution For instance it might be Assets Checking if this is your checking account Liabilities Credit Card or whatever",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "PennyAcct",
          "package": "penny",
          "partial": "Penny Acct",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:PennyAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "Posting",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Posting",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Posting",
          "package": "penny",
          "partial": "Posting",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Posting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhat the financial institution shows as an increase or decrease\n has to be recorded as a debit or credit in the PennyAcct.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Translator",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Translator",
          "type": "data"
        },
        "index": {
          "description": "What the financial institution shows as an increase or decrease has to be recorded as debit or credit in the PennyAcct",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Translator",
          "package": "penny",
          "partial": "Translator",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:Translator"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA unique number assigned by Brenner to identify each\n posting. This is unique within a particular financial institution\n account only.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "UNumber",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#UNumber",
          "type": "newtype"
        },
        "index": {
          "description": "unique number assigned by Brenner to identify each posting This is unique within particular financial institution account only",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "UNumber",
          "package": "penny",
          "partial": "UNumber",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#t:UNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "AllowNew",
          "package": "penny",
          "signature": "AllowNew",
          "source": "src/Penny-Brenner-Types.html#AllowNew",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "AllowNew",
          "package": "penny",
          "partial": "Allow New",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:AllowNew"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "Config",
          "package": "penny",
          "signature": "Config",
          "source": "src/Penny-Brenner-Types.html#Config",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Config",
          "package": "penny",
          "partial": "Config",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:Config"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "Currency",
          "package": "penny",
          "signature": "Currency",
          "source": "src/Penny-Brenner-Types.html#Currency",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Currency",
          "package": "penny",
          "partial": "Currency",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:Currency"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "Date",
          "package": "penny",
          "signature": "Date",
          "source": "src/Penny-Brenner-Types.html#Date",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Date",
          "package": "penny",
          "partial": "Date",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:Date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "DbLocation",
          "package": "penny",
          "signature": "DbLocation",
          "source": "src/Penny-Brenner-Types.html#DbLocation",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "DbLocation",
          "package": "penny",
          "partial": "Db Location",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:DbLocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDecreases the account balance. On a credit card, this is a\n payment. On a checking account, this is a withdrawal.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Decrease",
          "package": "penny",
          "signature": "Decrease",
          "source": "src/Penny-Brenner-Types.html#IncDec",
          "type": "function"
        },
        "index": {
          "description": "Decreases the account balance On credit card this is payment On checking account this is withdrawal",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Decrease",
          "package": "penny",
          "partial": "Decrease",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:Decrease"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "DefaultAcct",
          "package": "penny",
          "signature": "DefaultAcct",
          "source": "src/Penny-Brenner-Types.html#DefaultAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "DefaultAcct",
          "package": "penny",
          "partial": "Default Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:DefaultAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "Desc",
          "package": "penny",
          "signature": "Desc",
          "source": "src/Penny-Brenner-Types.html#Desc",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Desc",
          "package": "penny",
          "partial": "Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:Desc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "FitAcct",
          "package": "penny",
          "signature": "FitAcct",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitAcct",
          "package": "penny",
          "partial": "Fit Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:FitAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "FitAcctDesc",
          "package": "penny",
          "signature": "FitAcctDesc",
          "source": "src/Penny-Brenner-Types.html#FitAcctDesc",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitAcctDesc",
          "package": "penny",
          "partial": "Fit Acct Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:FitAcctDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "FitAcctName",
          "package": "penny",
          "signature": "FitAcctName",
          "source": "src/Penny-Brenner-Types.html#FitAcctName",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitAcctName",
          "package": "penny",
          "partial": "Fit Acct Name",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:FitAcctName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "FitFileLocation",
          "package": "penny",
          "signature": "FitFileLocation",
          "source": "src/Penny-Brenner-Types.html#FitFileLocation",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitFileLocation",
          "package": "penny",
          "partial": "Fit File Location",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:FitFileLocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "FitId",
          "package": "penny",
          "signature": "FitId",
          "source": "src/Penny-Brenner-Types.html#FitId",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "FitId",
          "package": "penny",
          "partial": "Fit Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:FitId"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIncreases the account balance. For a checking or savings\n account, this is a deposit. For a credit card, this is a purchase.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "Increase",
          "package": "penny",
          "signature": "Increase",
          "source": "src/Penny-Brenner-Types.html#IncDec",
          "type": "function"
        },
        "index": {
          "description": "Increases the account balance For checking or savings account this is deposit For credit card this is purchase",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Increase",
          "package": "penny",
          "partial": "Increase",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:Increase"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThat is, when the financial institution shows a posting that\n increases your account balance, you record a credit. You will\n probably use this for liabilities, such as credit cards and other\n loans.\n\u003c/p\u003e",
          "module": "[\"Penny.Brenner.Types\",\"Penny.Brenner\"]",
          "name": "IncreaseIsCredit",
          "package": "penny",
          "signature": "IncreaseIsCredit",
          "source": "src/Penny-Brenner-Types.html#Translator",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:IncreaseIsCredit\",\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:IncreaseIsCredit\"]"
        },
        "index": {
          "description": "That is when the financial institution shows posting that increases your account balance you record credit You will probably use this for liabilities such as credit cards and other loans",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "IncreaseIsCredit",
          "package": "penny",
          "partial": "Increase Is Credit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:IncreaseIsCredit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThat is, when the financial institution shows a posting that\n increases your account balance, you record a debit. You will\n probably use this for deposit accounts, like checking and\n savings. These are asset accounts so if the balance goes up you\n record a debit in your ledger.\n\u003c/p\u003e",
          "module": "[\"Penny.Brenner.Types\",\"Penny.Brenner\"]",
          "name": "IncreaseIsDebit",
          "package": "penny",
          "signature": "IncreaseIsDebit",
          "source": "src/Penny-Brenner-Types.html#Translator",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:IncreaseIsDebit\",\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:IncreaseIsDebit\"]"
        },
        "index": {
          "description": "That is when the financial institution shows posting that increases your account balance you record debit You will probably use this for deposit accounts like checking and savings These are asset accounts so if the balance goes up you record debit in your ledger",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "IncreaseIsDebit",
          "package": "penny",
          "partial": "Increase Is Debit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:IncreaseIsDebit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "ParserDesc",
          "package": "penny",
          "signature": "ParserDesc",
          "source": "src/Penny-Brenner-Types.html#ParserDesc",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "ParserDesc",
          "package": "penny",
          "partial": "Parser Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:ParserDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "Payee",
          "package": "penny",
          "signature": "Payee",
          "source": "src/Penny-Brenner-Types.html#Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Payee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "PennyAcct",
          "package": "penny",
          "signature": "PennyAcct",
          "source": "src/Penny-Brenner-Types.html#PennyAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "PennyAcct",
          "package": "penny",
          "partial": "Penny Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:PennyAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "Posting",
          "package": "penny",
          "signature": "Posting",
          "source": "src/Penny-Brenner-Types.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "Posting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:Posting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "UNumber",
          "package": "penny",
          "signature": "UNumber",
          "source": "src/Penny-Brenner-Types.html#UNumber",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "UNumber",
          "package": "penny",
          "partial": "UNumber",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:UNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "amount",
          "package": "penny",
          "signature": "Amount",
          "source": "src/Penny-Brenner-Types.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "amount",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "currency",
          "package": "penny",
          "signature": "Currency",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "currency",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:currency"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "date",
          "package": "penny",
          "signature": "Date",
          "source": "src/Penny-Brenner-Types.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "date",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "dbLocation",
          "package": "penny",
          "signature": "DbLocation",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "dbLocation",
          "package": "penny",
          "partial": "Location",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:dbLocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "defaultAcct",
          "package": "penny",
          "signature": "DefaultAcct",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "defaultAcct",
          "package": "penny",
          "partial": "Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:defaultAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "defaultFitAcct",
          "package": "penny",
          "signature": "Maybe FitAcct",
          "source": "src/Penny-Brenner-Types.html#Config",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "defaultFitAcct",
          "package": "penny",
          "partial": "Fit Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:defaultFitAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "desc",
          "package": "penny",
          "signature": "Desc",
          "source": "src/Penny-Brenner-Types.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "desc",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:desc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "fitAcctDesc",
          "package": "penny",
          "signature": "FitAcctDesc",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "fitAcctDesc",
          "package": "penny",
          "partial": "Acct Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:fitAcctDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "fitAcctName",
          "package": "penny",
          "signature": "FitAcctName",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "fitAcctName",
          "package": "penny",
          "partial": "Acct Name",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:fitAcctName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "fitId",
          "package": "penny",
          "signature": "FitId",
          "source": "src/Penny-Brenner-Types.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "fitId",
          "package": "penny",
          "partial": "Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:fitId"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "incDec",
          "package": "penny",
          "signature": "IncDec",
          "source": "src/Penny-Brenner-Types.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "incDec",
          "package": "penny",
          "partial": "Dec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:incDec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEnsures that incoming Amounts have only digits and (up to) one\n decimal point.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "mkAmount",
          "package": "penny",
          "signature": "String -\u003e Maybe Amount",
          "source": "src/Penny-Brenner-Types.html#mkAmount",
          "type": "function"
        },
        "index": {
          "description": "Ensures that incoming Amounts have only digits and up to one decimal point",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "mkAmount",
          "normalized": "String-\u003eMaybe Amount",
          "package": "penny",
          "partial": "Amount",
          "signature": "String-\u003eMaybe Amount",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:mkAmount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "moreFitAccts",
          "package": "penny",
          "signature": "[FitAcct]",
          "source": "src/Penny-Brenner-Types.html#Config",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "moreFitAccts",
          "normalized": "[FitAcct]",
          "package": "penny",
          "partial": "Fit Accts",
          "signature": "[FitAcct]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:moreFitAccts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses a file of transactions from the financial\n institution. The function must open the file and parse it. This\n is in the IO monad not only because the function must open the\n file itself, but also so the function can perform arbitrary IO\n (run pdftotext, maybe?) If there is failure, the function can\n return an Exceptional String, which is the error\n message. Alternatively the function can raise an exception in the\n IO monad (currently Brenner makes no attempt to catch these) so\n if any of the IO functions throw you can simply not handle the\n exceptions.\n\u003c/p\u003e\u003cp\u003eThe first element of the pair gives information about the parser.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "parser",
          "package": "penny",
          "signature": "(ParserDesc, FitFileLocation -\u003e IO (Either String [Posting]))",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "Parses file of transactions from the financial institution The function must open the file and parse it This is in the IO monad not only because the function must open the file itself but also so the function can perform arbitrary IO run pdftotext maybe If there is failure the function can return an Exceptional String which is the error message Alternatively the function can raise an exception in the IO monad currently Brenner makes no attempt to catch these so if any of the IO functions throw you can simply not handle the exceptions The first element of the pair gives information about the parser",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "parser",
          "normalized": "(ParserDesc,FitFileLocation-\u003eIO(Either String[Posting]))",
          "package": "penny",
          "signature": "(ParserDesc,FitFileLocation-\u003eIO(Either String[Posting]))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "payee",
          "package": "penny",
          "signature": "Payee",
          "source": "src/Penny-Brenner-Types.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "payee",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "pennyAcct",
          "package": "penny",
          "signature": "PennyAcct",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "pennyAcct",
          "package": "penny",
          "partial": "Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:pennyAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow to turn Qty into QtyRep.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "qtySpec",
          "package": "penny",
          "signature": "S3 Radix PeriodGrp CommaGrp",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "How to turn Qty into QtyRep",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "qtySpec",
          "package": "penny",
          "partial": "Spec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:qtySpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhen creating new transactions, the commodity will be on this\n side\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "side",
          "package": "penny",
          "signature": "Side",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "When creating new transactions the commodity will be on this side",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "side",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:side"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhen creating new transactions, is there a space between the\n commodity and the quantity\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "spaceBetween",
          "package": "penny",
          "signature": "SpaceBetween",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "When creating new transactions is there space between the commodity and the quantity",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "spaceBetween",
          "package": "penny",
          "partial": "Between",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:spaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSometimes the financial institution provides Payee information,\n sometimes it does not. Sometimes the Desc might have additional\n information that you might want to remove. This function can be\n used to do that. The resulting Lincoln Payee is used for any\n transactions that are created by the merge command. The resulting\n payee is also used when comparing new financial institution\n postings to already existing ledger transactions in order to\n guess at which payee and accounts to create in the transactions\n created by the merge command.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Types",
          "name": "toLincolnPayee",
          "package": "penny",
          "signature": "Desc -\u003e Payee -\u003e Payee",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "Sometimes the financial institution provides Payee information sometimes it does not Sometimes the Desc might have additional information that you might want to remove This function can be used to do that The resulting Lincoln Payee is used for any transactions that are created by the merge command The resulting payee is also used when comparing new financial institution postings to already existing ledger transactions in order to guess at which payee and accounts to create in the transactions created by the merge command",
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "toLincolnPayee",
          "normalized": "Desc-\u003ePayee-\u003ePayee",
          "package": "penny",
          "partial": "Lincoln Payee",
          "signature": "Desc-\u003ePayee-\u003ePayee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:toLincolnPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "translate",
          "package": "penny",
          "signature": "IncDec -\u003e Translator -\u003e DrCr",
          "source": "src/Penny-Brenner-Types.html#translate",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "translate",
          "normalized": "IncDec-\u003eTranslator-\u003eDrCr",
          "package": "penny",
          "signature": "IncDec-\u003eTranslator-\u003eDrCr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:translate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "translator",
          "package": "penny",
          "signature": "Translator",
          "source": "src/Penny-Brenner-Types.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "translator",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:translator"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unAllowNew",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny-Brenner-Types.html#AllowNew",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unAllowNew",
          "package": "penny",
          "partial": "Allow New",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unAllowNew"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unCurrency",
          "package": "penny",
          "signature": "Commodity",
          "source": "src/Penny-Brenner-Types.html#Currency",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unCurrency",
          "package": "penny",
          "partial": "Currency",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unCurrency"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unDate",
          "package": "penny",
          "signature": "Day",
          "source": "src/Penny-Brenner-Types.html#Date",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unDate",
          "package": "penny",
          "partial": "Date",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unDate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unDbLocation",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Brenner-Types.html#DbLocation",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unDbLocation",
          "package": "penny",
          "partial": "Db Location",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unDbLocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unDefaultAcct",
          "package": "penny",
          "signature": "Account",
          "source": "src/Penny-Brenner-Types.html#DefaultAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unDefaultAcct",
          "package": "penny",
          "partial": "Default Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unDefaultAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unDesc",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Brenner-Types.html#Desc",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unDesc",
          "package": "penny",
          "partial": "Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unFitAcctDesc",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Brenner-Types.html#FitAcctDesc",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unFitAcctDesc",
          "package": "penny",
          "partial": "Fit Acct Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unFitAcctDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unFitAcctName",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Brenner-Types.html#FitAcctName",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unFitAcctName",
          "package": "penny",
          "partial": "Fit Acct Name",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unFitAcctName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unFitFileLocation",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Brenner-Types.html#FitFileLocation",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unFitFileLocation",
          "package": "penny",
          "partial": "Fit File Location",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unFitFileLocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unFitId",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Brenner-Types.html#FitId",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unFitId",
          "package": "penny",
          "partial": "Fit Id",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unFitId"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unParserDesc",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Brenner-Types.html#ParserDesc",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unParserDesc",
          "package": "penny",
          "partial": "Parser Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unParserDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unPayee",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Brenner-Types.html#Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unPayee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unPennyAcct",
          "package": "penny",
          "signature": "Account",
          "source": "src/Penny-Brenner-Types.html#PennyAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unPennyAcct",
          "package": "penny",
          "partial": "Penny Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unPennyAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Types",
          "name": "unUNumber",
          "package": "penny",
          "signature": "Integer",
          "source": "src/Penny-Brenner-Types.html#UNumber",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Types",
          "module": "Penny.Brenner.Types",
          "name": "unUNumber",
          "package": "penny",
          "partial": "UNumber",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Types.html#v:unUNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Util",
          "name": "Util",
          "package": "penny",
          "source": "src/Penny-Brenner-Util.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "Util",
          "package": "penny",
          "partial": "Util",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Util",
          "name": "brenner",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Brenner-Util.html#brenner",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "brenner",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:brenner"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePrint an error message and exit.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Util",
          "name": "errExit",
          "package": "penny",
          "signature": "String -\u003e IO a",
          "source": "src/Penny-Brenner-Util.html#errExit",
          "type": "function"
        },
        "index": {
          "description": "Print an error message and exit",
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "errExit",
          "normalized": "String-\u003eIO a",
          "package": "penny",
          "partial": "Exit",
          "signature": "String-\u003eIO a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:errExit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGets the FitAcct, if it was provided. If it was not provided,\n exit with an error message.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Util",
          "name": "getFitAcct",
          "package": "penny",
          "signature": "Maybe FitAcct -\u003e IO FitAcct",
          "source": "src/Penny-Brenner-Util.html#getFitAcct",
          "type": "function"
        },
        "index": {
          "description": "Gets the FitAcct if it was provided If it was not provided exit with an error message",
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "getFitAcct",
          "normalized": "Maybe FitAcct-\u003eIO FitAcct",
          "package": "penny",
          "partial": "Fit Acct",
          "signature": "Maybe FitAcct-\u003eIO FitAcct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:getFitAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Util",
          "name": "label",
          "package": "penny",
          "signature": "String -\u003e Text -\u003e String",
          "source": "src/Penny-Brenner-Util.html#label",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "label",
          "normalized": "String-\u003eText-\u003eString",
          "package": "penny",
          "signature": "String-\u003eText-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:label"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLoads the database from disk. If allowNew is True, then does not\n fail if the file was not found.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Util",
          "name": "loadDb",
          "package": "penny",
          "signature": "AllowNew-\u003e DbLocation-\u003e IO DbList",
          "type": "function"
        },
        "index": {
          "description": "Loads the database from disk If allowNew is True then does not fail if the file was not found",
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "loadDb",
          "normalized": "AllowNew-\u003eDbLocation-\u003eIO DbList",
          "package": "penny",
          "partial": "Db",
          "signature": "AllowNew-\u003eDbLocation-\u003eIO DbList",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:loadDb"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses quantities from amounts. All amounts should be verified as\n having only digits, optionally followed by a point and then more\n digits. All these values should parse. So if there is a problem it\n is a programmer error. Apply error.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Util",
          "name": "parseQty",
          "package": "penny",
          "signature": "Amount -\u003e Qty",
          "source": "src/Penny-Brenner-Util.html#parseQty",
          "type": "function"
        },
        "index": {
          "description": "Parses quantities from amounts All amounts should be verified as having only digits optionally followed by point and then more digits All these values should parse So if there is problem it is programmer error Apply error",
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "parseQty",
          "normalized": "Amount-\u003eQty",
          "package": "penny",
          "partial": "Qty",
          "signature": "Amount-\u003eQty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:parseQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Util",
          "name": "readDbTuple",
          "package": "penny",
          "signature": "ByteString -\u003e Either String DbList",
          "source": "src/Penny-Brenner-Util.html#readDbTuple",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "readDbTuple",
          "normalized": "ByteString-\u003eEither String DbList",
          "package": "penny",
          "partial": "Db Tuple",
          "signature": "ByteString-\u003eEither String DbList",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:readDbTuple"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWrites a new database to disk.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Util",
          "name": "saveDb",
          "package": "penny",
          "signature": "DbLocation -\u003e DbList -\u003e IO ()",
          "source": "src/Penny-Brenner-Util.html#saveDb",
          "type": "function"
        },
        "index": {
          "description": "Writes new database to disk",
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "saveDb",
          "normalized": "DbLocation-\u003eDbList-\u003eIO()",
          "package": "penny",
          "partial": "Db",
          "signature": "DbLocation-\u003eDbList-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:saveDb"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Util",
          "name": "saveDbTuple",
          "package": "penny",
          "signature": "DbList -\u003e ByteString",
          "source": "src/Penny-Brenner-Util.html#saveDbTuple",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "saveDbTuple",
          "normalized": "DbList-\u003eByteString",
          "package": "penny",
          "partial": "Db Tuple",
          "signature": "DbList-\u003eByteString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:saveDbTuple"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner.Util",
          "name": "showDbPair",
          "package": "penny",
          "signature": "(UNumber, Posting) -\u003e String",
          "source": "src/Penny-Brenner-Util.html#showDbPair",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "showDbPair",
          "normalized": "(UNumber,Posting)-\u003eString",
          "package": "penny",
          "partial": "Db Pair",
          "signature": "(UNumber,Posting)-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:showDbPair"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShows a Posting in human readable format.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Util",
          "name": "showPosting",
          "package": "penny",
          "signature": "Posting -\u003e String",
          "source": "src/Penny-Brenner-Util.html#showPosting",
          "type": "function"
        },
        "index": {
          "description": "Shows Posting in human readable format",
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "showPosting",
          "normalized": "Posting-\u003eString",
          "package": "penny",
          "partial": "Posting",
          "signature": "Posting-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:showPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFile version. Increment this when anything in the file format\n changes.\n\u003c/p\u003e",
          "module": "Penny.Brenner.Util",
          "name": "version",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Brenner-Util.html#version",
          "type": "function"
        },
        "index": {
          "description": "File version Increment this when anything in the file format changes",
          "hierarchy": "Penny Brenner Util",
          "module": "Penny.Brenner.Util",
          "name": "version",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner-Util.html#v:version"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eBrenner - Penny financial institution interfaces\n\u003c/p\u003e\u003cp\u003eBrenner provides a uniform way to interact with downloaded data\n from financial Given a parser, Brenner will import the transactions\n and store them in a database. From there it is easy to merge the\n transactions (without duplicates) into a ledger file, and then to\n clear transactions from statements in an automated fashion.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Brenner",
          "name": "Brenner",
          "package": "penny",
          "source": "src/Penny-Brenner.html",
          "type": "module"
        },
        "index": {
          "description": "Brenner Penny financial institution interfaces Brenner provides uniform way to interact with downloaded data from financial Given parser Brenner will import the transactions and store them in database From there it is easy to merge the transactions without duplicates into ledger file and then to clear transactions from statements in an automated fashion",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "Brenner",
          "package": "penny",
          "partial": "Brenner",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe digit grouping character when the radix is a comma.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "CommaGrp",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#CommaGrp",
          "type": "data"
        },
        "index": {
          "description": "The digit grouping character when the radix is comma",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "CommaGrp",
          "package": "penny",
          "partial": "Comma Grp",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:CommaGrp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner",
          "name": "Config",
          "package": "penny",
          "source": "src/Penny-Brenner.html#Config",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "Config",
          "package": "penny",
          "partial": "Config",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:Config"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInformation to configure a single financial institution account.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "FitAcct",
          "package": "penny",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "data"
        },
        "index": {
          "description": "Information to configure single financial institution account",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "FitAcct",
          "package": "penny",
          "partial": "Fit Acct",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:FitAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe digit grouping character when the radix is a period.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "PeriodGrp",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#PeriodGrp",
          "type": "data"
        },
        "index": {
          "description": "The digit grouping character when the radix is period",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "PeriodGrp",
          "package": "penny",
          "partial": "Period Grp",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:PeriodGrp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner",
          "name": "Radix",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Radix",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "Radix",
          "package": "penny",
          "partial": "Radix",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:Radix"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner",
          "name": "S3",
          "package": "penny",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "S3",
          "package": "penny",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:S3"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe commodity and and the quantity may appear with the commodity\n on the left (e.g. USD 2.14) or with the commodity on the right\n (e.g. 2.14 USD).\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "Side",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Side",
          "type": "data"
        },
        "index": {
          "description": "The commodity and and the quantity may appear with the commodity on the left e.g USD or with the commodity on the right e.g USD",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "Side",
          "package": "penny",
          "partial": "Side",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:Side"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThere may or may not be a space in between the commodity and the\n quantity.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "SpaceBetween",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#SpaceBetween",
          "type": "data"
        },
        "index": {
          "description": "There may or may not be space in between the commodity and the quantity",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "SpaceBetween",
          "package": "penny",
          "partial": "Space Between",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:SpaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhat the financial institution shows as an increase or decrease\n has to be recorded as a debit or credit in the PennyAcct.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "Translator",
          "package": "penny",
          "source": "src/Penny-Brenner-Types.html#Translator",
          "type": "data"
        },
        "index": {
          "description": "What the financial institution shows as an increase or decrease has to be recorded as debit or credit in the PennyAcct",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "Translator",
          "package": "penny",
          "partial": "Translator",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#t:Translator"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePeriod\n\u003c/p\u003e",
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Qty\",\"Penny\"]",
          "name": "CGPeriod",
          "package": "penny",
          "signature": "CGPeriod",
          "source": "src/Penny-Lincoln-Bits-Qty.html#CommaGrp",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CGPeriod\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:CGPeriod\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:CGPeriod\"]"
        },
        "index": {
          "description": "Period",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "CGPeriod",
          "package": "penny",
          "partial": "CGPeriod",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CGPeriod"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eASCII space\n\u003c/p\u003e",
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Qty\",\"Penny\"]",
          "name": "CGSpace",
          "package": "penny",
          "signature": "CGSpace",
          "source": "src/Penny-Lincoln-Bits-Qty.html#CommaGrp",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CGSpace\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:CGSpace\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:CGSpace\"]"
        },
        "index": {
          "description": "ASCII space",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "CGSpace",
          "package": "penny",
          "partial": "CGSpace",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CGSpace"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUnicode code point 0x2009\n\u003c/p\u003e",
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Qty\",\"Penny\"]",
          "name": "CGThinSpace",
          "package": "penny",
          "signature": "CGThinSpace",
          "source": "src/Penny-Lincoln-Bits-Qty.html#CommaGrp",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CGThinSpace\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:CGThinSpace\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:CGThinSpace\"]"
        },
        "index": {
          "description": "Unicode code point x2009",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "CGThinSpace",
          "package": "penny",
          "partial": "CGThin Space",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CGThinSpace"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Qty\",\"Penny\"]",
          "name": "Comma",
          "package": "penny",
          "signature": "Comma",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Radix",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:Comma\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:Comma\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Comma\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "Comma",
          "package": "penny",
          "partial": "Comma",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:Comma"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Open\"]",
          "name": "CommodityOnLeft",
          "package": "penny",
          "signature": "CommodityOnLeft",
          "source": "src/Penny-Lincoln-Bits-Open.html#Side",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CommodityOnLeft\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:CommodityOnLeft\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "CommodityOnLeft",
          "package": "penny",
          "partial": "Commodity On Left",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CommodityOnLeft"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Open\"]",
          "name": "CommodityOnRight",
          "package": "penny",
          "signature": "CommodityOnRight",
          "source": "src/Penny-Lincoln-Bits-Open.html#Side",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CommodityOnRight\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:CommodityOnRight\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "CommodityOnRight",
          "package": "penny",
          "partial": "Commodity On Right",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:CommodityOnRight"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner",
          "name": "Config",
          "package": "penny",
          "signature": "Config",
          "source": "src/Penny-Brenner.html#Config",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "Config",
          "package": "penny",
          "partial": "Config",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:Config"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner",
          "name": "FitAcct",
          "package": "penny",
          "signature": "FitAcct",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "FitAcct",
          "package": "penny",
          "partial": "Fit Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:FitAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Open\"]",
          "name": "NoSpaceBetween",
          "package": "penny",
          "signature": "NoSpaceBetween",
          "source": "src/Penny-Lincoln-Bits-Open.html#SpaceBetween",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:NoSpaceBetween\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:NoSpaceBetween\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "NoSpaceBetween",
          "package": "penny",
          "partial": "No Space Between",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:NoSpaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eComma\n\u003c/p\u003e",
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Qty\",\"Penny\"]",
          "name": "PGComma",
          "package": "penny",
          "signature": "PGComma",
          "source": "src/Penny-Lincoln-Bits-Qty.html#PeriodGrp",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:PGComma\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:PGComma\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:PGComma\"]"
        },
        "index": {
          "description": "Comma",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "PGComma",
          "package": "penny",
          "partial": "PGComma",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:PGComma"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eASCII space\n\u003c/p\u003e",
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Qty\",\"Penny\"]",
          "name": "PGSpace",
          "package": "penny",
          "signature": "PGSpace",
          "source": "src/Penny-Lincoln-Bits-Qty.html#PeriodGrp",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:PGSpace\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:PGSpace\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:PGSpace\"]"
        },
        "index": {
          "description": "ASCII space",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "PGSpace",
          "package": "penny",
          "partial": "PGSpace",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:PGSpace"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUnicode code point 0x2009\n\u003c/p\u003e",
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Qty\",\"Penny\"]",
          "name": "PGThinSpace",
          "package": "penny",
          "signature": "PGThinSpace",
          "source": "src/Penny-Lincoln-Bits-Qty.html#PeriodGrp",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:PGThinSpace\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:PGThinSpace\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:PGThinSpace\"]"
        },
        "index": {
          "description": "Unicode code point x2009",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "PGThinSpace",
          "package": "penny",
          "partial": "PGThin Space",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:PGThinSpace"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Qty\",\"Penny\"]",
          "name": "Period",
          "package": "penny",
          "signature": "Period",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Radix",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:Period\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:Period\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Period\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "Period",
          "package": "penny",
          "partial": "Period",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:Period"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny\"]",
          "name": "S3a",
          "package": "penny",
          "signature": "S3a a",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:S3a\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:S3a\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "S3a",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:S3a"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny\"]",
          "name": "S3b",
          "package": "penny",
          "signature": "S3b b",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:S3b\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:S3b\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "S3b",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:S3b"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny\"]",
          "name": "S3c",
          "package": "penny",
          "signature": "S3c c",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:S3c\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:S3c\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "S3c",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:S3c"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Brenner\",\"Penny.Lincoln.Bits.Open\"]",
          "name": "SpaceBetween",
          "package": "penny",
          "signature": "SpaceBetween",
          "source": "src/Penny-Lincoln-Bits-Open.html#SpaceBetween",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:SpaceBetween\",\"http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:SpaceBetween\"]"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "SpaceBetween",
          "package": "penny",
          "partial": "Space Between",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:SpaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eBrenner, with a pre-compiled configuration.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "brennerMain",
          "package": "penny",
          "signature": "Version-\u003e Config-\u003e IO ()",
          "type": "function"
        },
        "index": {
          "description": "Brenner with pre-compiled configuration",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "brennerMain",
          "normalized": "Version-\u003eConfig-\u003eIO()",
          "package": "penny",
          "partial": "Main",
          "signature": "Version-\u003eConfig-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:brennerMain"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe commodity for the currency of your card (e.g. \u003ccode\u003e$\u003c/code\u003e).\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "currency",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "The commodity for the currency of your card e.g",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "currency",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:currency"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePath and filename to where the database is kept. You can use\n an absolute or relative path (if it is relative, it will be\n resolved relative to the current directory at runtime.)\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "dbLocation",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "Path and filename to where the database is kept You can use an absolute or relative path if it is relative it will be resolved relative to the current directory at runtime",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "dbLocation",
          "package": "penny",
          "partial": "Location",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:dbLocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhen new transactions are created, one of the postings will\n be in the amexAcct given above. The other posting will be in\n this account.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "defaultAcct",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "When new transactions are created one of the postings will be in the amexAcct given above The other posting will be in this account",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "defaultAcct",
          "package": "penny",
          "partial": "Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:defaultAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner",
          "name": "defaultFitAcct",
          "package": "penny",
          "signature": "Maybe FitAcct",
          "source": "src/Penny-Brenner.html#Config",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "defaultFitAcct",
          "package": "penny",
          "partial": "Fit Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:defaultFitAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdditional information about this financial institution\n account. Here I put information on where to find the statments\n for download on the website.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "fitAcctDesc",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "Additional information about this financial institution account Here put information on where to find the statments for download on the website",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "fitAcctDesc",
          "package": "penny",
          "partial": "Acct Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:fitAcctDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eName for this financial institution account, e.g. \u003ccode\u003eHouse\n Checking\u003c/code\u003e or \u003ccode\u003eMegabank\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "fitAcctName",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "Name for this financial institution account e.g House Checking or Megabank",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "fitAcctName",
          "package": "penny",
          "partial": "Acct Name",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:fitAcctName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Brenner",
          "name": "moreFitAccts",
          "package": "penny",
          "signature": "[FitAcct]",
          "source": "src/Penny-Brenner.html#Config",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "moreFitAccts",
          "normalized": "[FitAcct]",
          "package": "penny",
          "partial": "Fit Accts",
          "signature": "[FitAcct]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:moreFitAccts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParser for OFX data.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "ofxParser",
          "package": "penny",
          "signature": "(ParserDesc, ParserFn)",
          "source": "src/Penny-Brenner.html#ofxParser",
          "type": "function"
        },
        "index": {
          "description": "Parser for OFX data",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "ofxParser",
          "normalized": "(ParserDesc,ParserFn)",
          "package": "penny",
          "partial": "Parser",
          "signature": "(ParserDesc,ParserFn)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:ofxParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParser for OFX data, with a prepass phase.  Any incoming data is\n first filtered through the given function.  This allows you to\n correct broken OFX statements.  For example, Bank of America issues\n OFX files that do not properly escape ampersands.  Using this\n function you can change every ampersand to something properly\n escaped (or just change it to the word \"and\".)\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "ofxPrepassParser",
          "package": "penny",
          "signature": "(String -\u003e String) -\u003e (ParserDesc, ParserFn)",
          "source": "src/Penny-Brenner.html#ofxPrepassParser",
          "type": "function"
        },
        "index": {
          "description": "Parser for OFX data with prepass phase Any incoming data is first filtered through the given function This allows you to correct broken OFX statements For example Bank of America issues OFX files that do not properly escape ampersands Using this function you can change every ampersand to something properly escaped or just change it to the word and",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "ofxPrepassParser",
          "normalized": "(String-\u003eString)-\u003e(ParserDesc,ParserFn)",
          "package": "penny",
          "partial": "Prepass Parser",
          "signature": "(String-\u003eString)-\u003e(ParserDesc,ParserFn)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:ofxPrepassParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses a file of transactions from the financial\n institution. The function must open the file and parse it. This\n is in the IO monad not only because the function must open the\n file itself, but also so the function can perform arbitrary IO\n (run pdftotext, maybe?) If there is failure, the function can\n return an Exceptional String, which is the error\n message. Alternatively the function can raise an exception in the\n IO monad (currently Brenner makes no attempt to catch these) so\n if any of the IO functions throw you can simply not handle the\n exceptions.\n\u003c/p\u003e\u003cp\u003eThe first element of the pair is a help string which should\n indicate how to download the data, as a helpful reminder.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "parser",
          "package": "penny",
          "signature": "(ParserDesc, FitFileLocation -\u003e IO (Either String [Posting]))",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "Parses file of transactions from the financial institution The function must open the file and parse it This is in the IO monad not only because the function must open the file itself but also so the function can perform arbitrary IO run pdftotext maybe If there is failure the function can return an Exceptional String which is the error message Alternatively the function can raise an exception in the IO monad currently Brenner makes no attempt to catch these so if any of the IO functions throw you can simply not handle the exceptions The first element of the pair is help string which should indicate how to download the data as helpful reminder",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "parser",
          "normalized": "(ParserDesc,FitFileLocation-\u003eIO(Either String[Posting]))",
          "package": "penny",
          "signature": "(ParserDesc,FitFileLocation-\u003eIO(Either String[Posting]))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe account that you use in your Penny file to hold\n transactions for this card. Separate each sub-account with\n colons (as you do in the Penny file.)\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "pennyAcct",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "The account that you use in your Penny file to hold transactions for this card Separate each sub-account with colons as you do in the Penny file",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "pennyAcct",
          "package": "penny",
          "partial": "Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:pennyAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow to group digits when printing the resulting ledger.\n\u003c/p\u003e\u003cp\u003ePenny remembers the formatting of quantities entered in your\n ledger.  However, quantities imported from your bank statement\n do not have formatting to remember, so you have to tell Penny\n how to format them.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "qtySpec",
          "package": "penny",
          "signature": "S3 Radix PeriodGrp CommaGrp",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "How to group digits when printing the resulting ledger Penny remembers the formatting of quantities entered in your ledger However quantities imported from your bank statement do not have formatting to remember so you have to tell Penny how to format them",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "qtySpec",
          "package": "penny",
          "partial": "Spec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:qtySpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhen creating new transactions, the commodity will be on this\n side\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "side",
          "package": "penny",
          "signature": "Side",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "When creating new transactions the commodity will be on this side",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "side",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:side"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhen creating new transactions, is there a space between the\n commodity and the quantity\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "spaceBetween",
          "package": "penny",
          "signature": "SpaceBetween",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "When creating new transactions is there space between the commodity and the quantity",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "spaceBetween",
          "package": "penny",
          "partial": "Between",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:spaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSometimes the financial institution provides Payee information,\n sometimes it does not. Sometimes the Desc might have additional\n information that you might want to remove. This function can be\n used to do that. The resulting Lincoln Payee is used for any\n transactions that are created by the merge command. The resulting\n payee is also used when comparing new financial institution\n postings to already existing ledger transactions in order to\n guess at which payee and accounts to create in the transactions\n created by the merge command.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "toLincolnPayee",
          "package": "penny",
          "signature": "Desc -\u003e Payee -\u003e Payee",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "Sometimes the financial institution provides Payee information sometimes it does not Sometimes the Desc might have additional information that you might want to remove This function can be used to do that The resulting Lincoln Payee is used for any transactions that are created by the merge command The resulting payee is also used when comparing new financial institution postings to already existing ledger transactions in order to guess at which payee and accounts to create in the transactions created by the merge command",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "toLincolnPayee",
          "normalized": "Desc-\u003ePayee-\u003ePayee",
          "package": "penny",
          "partial": "Lincoln Payee",
          "signature": "Desc-\u003ePayee-\u003ePayee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:toLincolnPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSee the documentation under the \u003ccode\u003eTranslator\u003c/code\u003e type for\n details.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "translator",
          "package": "penny",
          "signature": "Translator",
          "source": "src/Penny-Brenner.html#FitAcct",
          "type": "function"
        },
        "index": {
          "description": "See the documentation under the Translator type for details",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "translator",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:translator"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA simple function to use for \u003ccode\u003e\u003ca\u003etoLincolnPayee\u003c/a\u003e\u003c/code\u003e. Uses the financial\n institution payee if it is available; otherwise, uses the financial\n institution description.\n\u003c/p\u003e",
          "module": "Penny.Brenner",
          "name": "usePayeeOrDesc",
          "package": "penny",
          "signature": "Desc -\u003e Payee -\u003e Payee",
          "source": "src/Penny-Brenner.html#usePayeeOrDesc",
          "type": "function"
        },
        "index": {
          "description": "simple function to use for toLincolnPayee Uses the financial institution payee if it is available otherwise uses the financial institution description",
          "hierarchy": "Penny Brenner",
          "module": "Penny.Brenner",
          "name": "usePayeeOrDesc",
          "normalized": "Desc-\u003ePayee-\u003ePayee",
          "package": "penny",
          "partial": "Payee Or Desc",
          "signature": "Desc-\u003ePayee-\u003ePayee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Brenner.html#v:usePayeeOrDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCreates the output Chunks for the Balance report for\n multi-commodity reports only.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "Chunker",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html",
          "type": "module"
        },
        "index": {
          "description": "Creates the output Chunks for the Balance report for multi-commodity reports only",
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "Chunker",
          "package": "penny",
          "partial": "Chunker",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDisplays a single account in a Balance report. In a\n single-commodity report, this account will only be one screen line\n long. In a multi-commodity report, it might be multiple lines long,\n with one screen line for each commodity.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "MainRow",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#MainRow",
          "type": "data"
        },
        "index": {
          "description": "Displays single account in Balance report In single-commodity report this account will only be one screen line long In multi-commodity report it might be multiple lines long with one screen line for each commodity",
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "MainRow",
          "package": "penny",
          "partial": "Main Row",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#t:MainRow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDisplays a one-column row.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "OneColRow",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#OneColRow",
          "type": "data"
        },
        "index": {
          "description": "Displays one-column row",
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "OneColRow",
          "package": "penny",
          "partial": "One Col Row",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#t:OneColRow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "Row",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#Row",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "Row",
          "package": "penny",
          "partial": "Row",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#t:Row"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "MainRow",
          "package": "penny",
          "signature": "MainRow",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#MainRow",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "MainRow",
          "package": "penny",
          "partial": "Main Row",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:MainRow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "OneColRow",
          "package": "penny",
          "signature": "OneColRow",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#OneColRow",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "OneColRow",
          "package": "penny",
          "partial": "One Col Row",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:OneColRow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "RMain",
          "package": "penny",
          "signature": "RMain MainRow",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#Row",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "RMain",
          "package": "penny",
          "partial": "RMain",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:RMain"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "ROneCol",
          "package": "penny",
          "signature": "ROneCol OneColRow",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#Row",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "ROneCol",
          "package": "penny",
          "partial": "ROne Col",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:ROneCol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommodity balances. If this list is empty, dashes are\n displayed for the DrCr and Qty.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "mrBottomLine",
          "package": "penny",
          "signature": "BottomLine",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#MainRow",
          "type": "function"
        },
        "index": {
          "description": "Commodity balances If this list is empty dashes are displayed for the DrCr and Qty",
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "mrBottomLine",
          "package": "penny",
          "partial": "Bottom Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:mrBottomLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIndent the account name by this many levels (not by this many\n spaces; this number is multiplied by another number in the\n Chunker source to arrive at the final indentation amount)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "mrIndentation",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#MainRow",
          "type": "function"
        },
        "index": {
          "description": "Indent the account name by this many levels not by this many spaces this number is multiplied by another number in the Chunker source to arrive at the final indentation amount",
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "mrIndentation",
          "package": "penny",
          "partial": "Indentation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:mrIndentation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eText for the name of the account\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "mrText",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#MainRow",
          "type": "function"
        },
        "index": {
          "description": "Text for the name of the account",
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "mrText",
          "package": "penny",
          "partial": "Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:mrText"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIndent the text by this many levels (not by this many\n spaces; this number is multiplied by another number in the\n Chunker source to arrive at the final indentation amount)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "ocIndentation",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#OneColRow",
          "type": "function"
        },
        "index": {
          "description": "Indent the text by this many levels not by this many spaces this number is multiplied by another number in the Chunker source to arrive at the final indentation amount",
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "ocIndentation",
          "package": "penny",
          "partial": "Indentation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:ocIndentation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eText for the left column\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "ocText",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Cabin-Balance-Convert-Chunker.html#OneColRow",
          "type": "function"
        },
        "index": {
          "description": "Text for the left column",
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "ocText",
          "package": "penny",
          "partial": "Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:ocText"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "rowsToChunks",
          "package": "penny",
          "signature": "Changers-\u003e (Qty -\u003e Text)-\u003e [Row]-\u003e [Chunk]",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Chunker",
          "module": "Penny.Cabin.Balance.Convert.Chunker",
          "name": "rowsToChunks",
          "normalized": "Changers-\u003e(Qty-\u003eText)-\u003e[Row]-\u003e[Chunk]",
          "package": "penny",
          "partial": "To Chunks",
          "signature": "Changers-\u003e(Qty-\u003eText)-\u003e[Row]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Chunker.html#v:rowsToChunks"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "ChunkerPct",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "ChunkerPct",
          "package": "penny",
          "partial": "Chunker Pct",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDisplays a single account in a Balance report. In a\n single-commodity report, this account will only be one screen line\n long. In a multi-commodity report, it might be multiple lines long,\n with one screen line for each commodity.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "MainRow",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#MainRow",
          "type": "data"
        },
        "index": {
          "description": "Displays single account in Balance report In single-commodity report this account will only be one screen line long In multi-commodity report it might be multiple lines long with one screen line for each commodity",
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "MainRow",
          "package": "penny",
          "partial": "Main Row",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#t:MainRow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDisplays a one-column row.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "OneColRow",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#OneColRow",
          "type": "data"
        },
        "index": {
          "description": "Displays one-column row",
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "OneColRow",
          "package": "penny",
          "partial": "One Col Row",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#t:OneColRow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "Percent",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#Percent",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "Percent",
          "package": "penny",
          "partial": "Percent",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#t:Percent"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "Row",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#Row",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "Row",
          "package": "penny",
          "partial": "Row",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#t:Row"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "MainRow",
          "package": "penny",
          "signature": "MainRow",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#MainRow",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "MainRow",
          "package": "penny",
          "partial": "Main Row",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:MainRow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "OneColRow",
          "package": "penny",
          "signature": "OneColRow",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#OneColRow",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "OneColRow",
          "package": "penny",
          "partial": "One Col Row",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:OneColRow"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "Percent",
          "package": "penny",
          "signature": "Percent",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#Percent",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "Percent",
          "package": "penny",
          "partial": "Percent",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:Percent"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "RMain",
          "package": "penny",
          "signature": "RMain MainRow",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#Row",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "RMain",
          "package": "penny",
          "partial": "RMain",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:RMain"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "ROneCol",
          "package": "penny",
          "signature": "ROneCol OneColRow",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#Row",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "ROneCol",
          "package": "penny",
          "partial": "ROne Col",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:ROneCol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIndent the account name by this many levels (not by this many\n spaces; this number is multiplied by another number in the\n Chunker source to arrive at the final indentation amount)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "mrIndentation",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#MainRow",
          "type": "function"
        },
        "index": {
          "description": "Indent the account name by this many levels not by this many spaces this number is multiplied by another number in the Chunker source to arrive at the final indentation amount",
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "mrIndentation",
          "package": "penny",
          "partial": "Indentation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:mrIndentation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf Nothing, display dashes for the percent.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "mrPercent",
          "package": "penny",
          "signature": "Maybe Percent",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#MainRow",
          "type": "function"
        },
        "index": {
          "description": "If Nothing display dashes for the percent",
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "mrPercent",
          "package": "penny",
          "partial": "Percent",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:mrPercent"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eText for the name of the account\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "mrText",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#MainRow",
          "type": "function"
        },
        "index": {
          "description": "Text for the name of the account",
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "mrText",
          "package": "penny",
          "partial": "Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:mrText"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIndent the text by this many levels (not by this many\n spaces; this number is multiplied by another number in the\n Chunker source to arrive at the final indentation amount)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "ocIndentation",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#OneColRow",
          "type": "function"
        },
        "index": {
          "description": "Indent the text by this many levels not by this many spaces this number is multiplied by another number in the Chunker source to arrive at the final indentation amount",
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "ocIndentation",
          "package": "penny",
          "partial": "Indentation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:ocIndentation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eText for the left column\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "ocText",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#OneColRow",
          "type": "function"
        },
        "index": {
          "description": "Text for the left column",
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "ocText",
          "package": "penny",
          "partial": "Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:ocText"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "pctAmount",
          "package": "penny",
          "signature": "Double",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#Percent",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "pctAmount",
          "package": "penny",
          "partial": "Amount",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:pctAmount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "pctDrCr",
          "package": "penny",
          "signature": "DrCr",
          "source": "src/Penny-Cabin-Balance-Convert-ChunkerPct.html#Percent",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "pctDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:pctDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "rowsToChunks",
          "package": "penny",
          "signature": "Changers-\u003e RoundTo-\u003e [Row]-\u003e [Chunk]",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert ChunkerPct",
          "module": "Penny.Cabin.Balance.Convert.ChunkerPct",
          "name": "rowsToChunks",
          "normalized": "Changers-\u003eRoundTo-\u003e[Row]-\u003e[Chunk]",
          "package": "penny",
          "partial": "To Chunks",
          "signature": "Changers-\u003eRoundTo-\u003e[Row]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-ChunkerPct.html#v:rowsToChunks"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDefault options for the Convert report when used from the command\n line.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "Options",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html",
          "type": "module"
        },
        "index": {
          "description": "Default options for the Convert report when used from the command line",
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "Options",
          "package": "penny",
          "partial": "Options",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault options for the Convert report. This record is used as\n the starting point when parsing in options from the command\n line. You don't need to use it if you are setting the options for\n the Convert report directly from your own code.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "DefaultOpts",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html#DefaultOpts",
          "type": "data"
        },
        "index": {
          "description": "Default options for the Convert report This record is used as the starting point when parsing in options from the command line You don need to use it if you are setting the options for the Convert report directly from your own code",
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "DefaultOpts",
          "package": "penny",
          "partial": "Default Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#t:DefaultOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "DefaultOpts",
          "package": "penny",
          "signature": "DefaultOpts",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html#DefaultOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "DefaultOpts",
          "package": "penny",
          "partial": "Default Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#v:DefaultOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "defaultOptions",
          "package": "penny",
          "signature": "DefaultOpts",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html#defaultOptions",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "defaultOptions",
          "package": "penny",
          "partial": "Options",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#v:defaultOptions"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "showZeroBalances",
          "package": "penny",
          "signature": "ShowZeroBalances",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html#DefaultOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "showZeroBalances",
          "package": "penny",
          "partial": "Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#v:showZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "sortBy",
          "package": "penny",
          "signature": "SortBy",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html#DefaultOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "sortBy",
          "package": "penny",
          "partial": "By",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#v:sortBy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "sortOrder",
          "package": "penny",
          "signature": "SortOrder",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html#DefaultOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "sortOrder",
          "package": "penny",
          "partial": "Order",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#v:sortOrder"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "target",
          "package": "penny",
          "signature": "Target",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html#DefaultOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "target",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#v:target"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "toParserOpts",
          "package": "penny",
          "signature": "DefaultOpts -\u003e Runtime -\u003e Opts",
          "source": "src/Penny-Cabin-Balance-Convert-Options.html#toParserOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Options",
          "module": "Penny.Cabin.Balance.Convert.Options",
          "name": "toParserOpts",
          "normalized": "DefaultOpts-\u003eRuntime-\u003eOpts",
          "package": "penny",
          "partial": "Parser Opts",
          "signature": "DefaultOpts-\u003eRuntime-\u003eOpts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Options.html#v:toParserOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eParsing options for the Convert report from the command line.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "Parser",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html",
          "type": "module"
        },
        "index": {
          "description": "Parsing options for the Convert report from the command line",
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "Parser",
          "package": "penny",
          "partial": "Parser",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault starting options for the Convert report. After\n considering what is parsed in from the command line and price data,\n a Convert.Opts will be generated.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "Opts",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Opts",
          "type": "data"
        },
        "index": {
          "description": "Default starting options for the Convert report After considering what is parsed in from the command line and price data Convert.Opts will be generated",
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "Opts",
          "package": "penny",
          "partial": "Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#t:Opts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRound to this many decimal places in the Percent report.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "RoundTo",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#RoundTo",
          "type": "newtype"
        },
        "index": {
          "description": "Round to this many decimal places in the Percent report",
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "RoundTo",
          "package": "penny",
          "partial": "Round To",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#t:RoundTo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "SortBy",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#SortBy",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "SortBy",
          "package": "penny",
          "partial": "Sort By",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#t:SortBy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIs the target commodity determined by the user or automatically?\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "Target",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Target",
          "type": "data"
        },
        "index": {
          "description": "Is the target commodity determined by the user or automatically",
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "Target",
          "package": "penny",
          "partial": "Target",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#t:Target"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "AutoTarget",
          "package": "penny",
          "signature": "AutoTarget",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Target",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "AutoTarget",
          "package": "penny",
          "partial": "Auto Target",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:AutoTarget"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "ManualTarget",
          "package": "penny",
          "signature": "ManualTarget To",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Target",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "ManualTarget",
          "package": "penny",
          "partial": "Manual Target",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:ManualTarget"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "Opts",
          "package": "penny",
          "signature": "Opts",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "Opts",
          "package": "penny",
          "partial": "Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:Opts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "RoundTo",
          "package": "penny",
          "signature": "RoundTo",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#RoundTo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "RoundTo",
          "package": "penny",
          "partial": "Round To",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:RoundTo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Balance.Convert.Parser\",\"Penny\"]",
          "name": "SortByName",
          "package": "penny",
          "signature": "SortByName",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#SortBy",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:SortByName\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:SortByName\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "SortByName",
          "package": "penny",
          "partial": "Sort By Name",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:SortByName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Balance.Convert.Parser\",\"Penny\"]",
          "name": "SortByQty",
          "package": "penny",
          "signature": "SortByQty",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#SortBy",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:SortByQty\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:SortByQty\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "SortByQty",
          "package": "penny",
          "partial": "Sort By Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:SortByQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDo not be tempted to change the setup in this module so that the\n individual functions such as parseColor and parseBackground return\n parsers rather than OptSpec. Such an arrangement breaks the correct\n parsing of abbreviated long options.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "allOptSpecs",
          "package": "penny",
          "signature": "[OptSpec (Opts -\u003e Opts)]",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#allOptSpecs",
          "type": "function"
        },
        "index": {
          "description": "Do not be tempted to change the setup in this module so that the individual functions such as parseColor and parseBackground return parsers rather than OptSpec Such an arrangement breaks the correct parsing of abbreviated long options",
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "allOptSpecs",
          "normalized": "[OptSpec(Opts-\u003eOpts)]",
          "package": "penny",
          "partial": "Opt Specs",
          "signature": "[OptSpec(Opts-\u003eOpts)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:allOptSpecs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "dateTime",
          "package": "penny",
          "signature": "DateTime",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "dateTime",
          "package": "penny",
          "partial": "Time",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:dateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf the user wants a percentage report, set this.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "percentRpt",
          "package": "penny",
          "signature": "Maybe RoundTo",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Opts",
          "type": "function"
        },
        "index": {
          "description": "If the user wants percentage report set this",
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "percentRpt",
          "package": "penny",
          "partial": "Rpt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:percentRpt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "showZeroBalances",
          "package": "penny",
          "signature": "ShowZeroBalances",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "showZeroBalances",
          "package": "penny",
          "partial": "Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:showZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "sortBy",
          "package": "penny",
          "signature": "SortBy",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "sortBy",
          "package": "penny",
          "partial": "By",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:sortBy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "sortOrder",
          "package": "penny",
          "signature": "SortOrder",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "sortOrder",
          "package": "penny",
          "partial": "Order",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:sortOrder"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "target",
          "package": "penny",
          "signature": "Target",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "target",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:target"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "unRoundTo",
          "package": "penny",
          "signature": "NonNegative",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#RoundTo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert Parser",
          "module": "Penny.Cabin.Balance.Convert.Parser",
          "name": "unRoundTo",
          "package": "penny",
          "partial": "Round To",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert-Parser.html#v:unRoundTo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThe Convert report. This report converts all account balances to\n a single commodity, which must be specified.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "Convert",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert.html",
          "type": "module"
        },
        "index": {
          "description": "The Convert report This report converts all account balances to single commodity which must be specified",
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "Convert",
          "package": "penny",
          "partial": "Convert",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOptions for the Convert report. These are the only options you\n need to use if you are supplying options programatically (as\n opposed to parsing them in from the command line.)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "Opts",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert.html#Opts",
          "type": "data"
        },
        "index": {
          "description": "Options for the Convert report These are the only options you need to use if you are supplying options programatically as opposed to parsing them in from the command line",
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "Opts",
          "package": "penny",
          "partial": "Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#t:Opts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow to sort each line of the report. Each subaccount has only one\n BottomLine (unlike in the MultiCommodity report, where each\n subaccount may have more than one BottomLine, one for each\n commodity.)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "Sorter",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert.html#Sorter",
          "type": "type"
        },
        "index": {
          "description": "How to sort each line of the report Each subaccount has only one BottomLine unlike in the MultiCommodity report where each subaccount may have more than one BottomLine one for each commodity",
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "Sorter",
          "package": "penny",
          "partial": "Sorter",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#t:Sorter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert",
          "name": "Opts",
          "package": "penny",
          "signature": "Opts",
          "source": "src/Penny-Cabin-Balance-Convert.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "Opts",
          "package": "penny",
          "partial": "Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:Opts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCreates a report respecting the standard interface for reports\n whose options are parsed in from the command line.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "cmdLineReport",
          "package": "penny",
          "signature": "DefaultOpts -\u003e Report",
          "source": "src/Penny-Cabin-Balance-Convert.html#cmdLineReport",
          "type": "function"
        },
        "index": {
          "description": "Creates report respecting the standard interface for reports whose options are parsed in from the command line",
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "cmdLineReport",
          "normalized": "DefaultOpts-\u003eReport",
          "package": "penny",
          "partial": "Line Report",
          "signature": "DefaultOpts-\u003eReport",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:cmdLineReport"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert",
          "name": "dateTime",
          "package": "penny",
          "signature": "DateTime",
          "source": "src/Penny-Cabin-Balance-Convert.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "dateTime",
          "package": "penny",
          "partial": "Time",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:dateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf you want a convert report that shows a single commodity,\n pass a Left showing how to display each amount.  If you want a\n convert report that shows percentages, pass a Right here with how\n many places to round to.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "format",
          "package": "penny",
          "signature": "Either (Amount Qty -\u003e Text) RoundTo",
          "source": "src/Penny-Cabin-Balance-Convert.html#Opts",
          "type": "function"
        },
        "index": {
          "description": "If you want convert report that shows single commodity pass Left showing how to display each amount If you want convert report that shows percentages pass Right here with how many places to round to",
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "format",
          "normalized": "Either(Amount Qty-\u003eText)RoundTo",
          "package": "penny",
          "signature": "Either(Amount Qty-\u003eText)RoundTo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:format"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturns a function usable to sort pairs of SubAccount and\n BottomLine depending on how you want them sorted.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "getSorter",
          "package": "penny",
          "signature": "SortOrder -\u003e SortBy -\u003e Sorter",
          "source": "src/Penny-Cabin-Balance-Convert.html#getSorter",
          "type": "function"
        },
        "index": {
          "description": "Returns function usable to sort pairs of SubAccount and BottomLine depending on how you want them sorted",
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "getSorter",
          "normalized": "SortOrder-\u003eSortBy-\u003eSorter",
          "package": "penny",
          "partial": "Sorter",
          "signature": "SortOrder-\u003eSortBy-\u003eSorter",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:getSorter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe function for the Convert report. Use this function if you are\n setting the options from a program (as opposed to parsing them in\n from the command line.) Will fail if the balance conversions fail.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "report",
          "package": "penny",
          "signature": "Opts -\u003e [PricePoint] -\u003e [(a, Posting)] -\u003e Either Text [Chunk]",
          "source": "src/Penny-Cabin-Balance-Convert.html#report",
          "type": "function"
        },
        "index": {
          "description": "The function for the Convert report Use this function if you are setting the options from program as opposed to parsing them in from the command line Will fail if the balance conversions fail",
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "report",
          "normalized": "Opts-\u003e[PricePoint]-\u003e[(a,Posting)]-\u003eEither Text[Chunk]",
          "package": "penny",
          "signature": "Opts-\u003e[PricePoint]-\u003e[(a,Posting)]-\u003eEither Text[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:report"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert",
          "name": "showZeroBalances",
          "package": "penny",
          "signature": "ShowZeroBalances",
          "source": "src/Penny-Cabin-Balance-Convert.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "showZeroBalances",
          "package": "penny",
          "partial": "Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:showZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert",
          "name": "sorter",
          "package": "penny",
          "signature": "Sorter",
          "source": "src/Penny-Cabin-Balance-Convert.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "sorter",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:sorter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert",
          "name": "target",
          "package": "penny",
          "signature": "To",
          "source": "src/Penny-Cabin-Balance-Convert.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "target",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:target"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Convert",
          "name": "textFormats",
          "package": "penny",
          "signature": "Changers",
          "source": "src/Penny-Cabin-Balance-Convert.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Convert",
          "module": "Penny.Cabin.Balance.Convert",
          "name": "textFormats",
          "package": "penny",
          "partial": "Formats",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Convert.html#v:textFormats"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCreates the output Chunks for the Balance report for both\n multi-commodity reports.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "Chunker",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Chunker.html",
          "type": "module"
        },
        "index": {
          "description": "Creates the output Chunks for the Balance report for both multi-commodity reports",
          "hierarchy": "Penny Cabin Balance MultiCommodity Chunker",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "Chunker",
          "package": "penny",
          "partial": "Chunker",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Chunker.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDisplays a single account in a Balance report. In a\n single-commodity report, this account will only be one screen line\n long. In a multi-commodity report, it might be multiple lines long,\n with one screen line for each commodity.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "Row",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Chunker.html#Row",
          "type": "data"
        },
        "index": {
          "description": "Displays single account in Balance report In single-commodity report this account will only be one screen line long In multi-commodity report it might be multiple lines long with one screen line for each commodity",
          "hierarchy": "Penny Cabin Balance MultiCommodity Chunker",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "Row",
          "package": "penny",
          "partial": "Row",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Chunker.html#t:Row"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "Row",
          "package": "penny",
          "signature": "Row",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Chunker.html#Row",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity Chunker",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "Row",
          "package": "penny",
          "partial": "Row",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Chunker.html#v:Row"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eText for the name of the account\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "accountTxt",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Chunker.html#Row",
          "type": "function"
        },
        "index": {
          "description": "Text for the name of the account",
          "hierarchy": "Penny Cabin Balance MultiCommodity Chunker",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "accountTxt",
          "package": "penny",
          "partial": "Txt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Chunker.html#v:accountTxt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommodity balances. If this list is empty, dashes are\n displayed for the DrCr, Commodity, and Qty.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "balances",
          "package": "penny",
          "signature": "[(Commodity, BottomLine)]",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Chunker.html#Row",
          "type": "function"
        },
        "index": {
          "description": "Commodity balances If this list is empty dashes are displayed for the DrCr Commodity and Qty",
          "hierarchy": "Penny Cabin Balance MultiCommodity Chunker",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "balances",
          "normalized": "[(Commodity,BottomLine)]",
          "package": "penny",
          "signature": "[(Commodity,BottomLine)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Chunker.html#v:balances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIndent the account name by this many levels (not by this many\n spaces; this number is multiplied by another number in the\n Chunker source to arrive at the final indentation amount)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "indentation",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Chunker.html#Row",
          "type": "function"
        },
        "index": {
          "description": "Indent the account name by this many levels not by this many spaces this number is multiplied by another number in the Chunker source to arrive at the final indentation amount",
          "hierarchy": "Penny Cabin Balance MultiCommodity Chunker",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "indentation",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Chunker.html#v:indentation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "rowsToChunks",
          "package": "penny",
          "signature": "Changers-\u003e (Amount Qty -\u003e Text)-\u003e [Row]-\u003e [Chunk]",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity Chunker",
          "module": "Penny.Cabin.Balance.MultiCommodity.Chunker",
          "name": "rowsToChunks",
          "normalized": "Changers-\u003e(Amount Qty-\u003eText)-\u003e[Row]-\u003e[Chunk]",
          "package": "penny",
          "partial": "To Chunks",
          "signature": "Changers-\u003e(Amount Qty-\u003eText)-\u003e[Row]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Chunker.html#v:rowsToChunks"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "Parser",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Parser.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity Parser",
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "Parser",
          "package": "penny",
          "partial": "Parser",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Parser.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOptions for the Balance report that have been parsed from the\n command line.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "ParseOpts",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Parser.html#ParseOpts",
          "type": "data"
        },
        "index": {
          "description": "Options for the Balance report that have been parsed from the command line",
          "hierarchy": "Penny Cabin Balance MultiCommodity Parser",
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "ParseOpts",
          "package": "penny",
          "partial": "Parse Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Parser.html#t:ParseOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "ParseOpts",
          "package": "penny",
          "signature": "ParseOpts",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Parser.html#ParseOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity Parser",
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "ParseOpts",
          "package": "penny",
          "partial": "Parse Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Parser.html#v:ParseOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "allSpecs",
          "package": "penny",
          "signature": "[OptSpec (ParseOpts -\u003e ParseOpts)]",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Parser.html#allSpecs",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity Parser",
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "allSpecs",
          "normalized": "[OptSpec(ParseOpts-\u003eParseOpts)]",
          "package": "penny",
          "partial": "Specs",
          "signature": "[OptSpec(ParseOpts-\u003eParseOpts)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Parser.html#v:allSpecs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "order",
          "package": "penny",
          "signature": "SortOrder",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Parser.html#ParseOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity Parser",
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "order",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Parser.html#v:order"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "showZeroBalances",
          "package": "penny",
          "signature": "ShowZeroBalances",
          "source": "src/Penny-Cabin-Balance-MultiCommodity-Parser.html#ParseOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity Parser",
          "module": "Penny.Cabin.Balance.MultiCommodity.Parser",
          "name": "showZeroBalances",
          "package": "penny",
          "partial": "Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity-Parser.html#v:showZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThe multi-commodity Balance report. This is the simpler balance\n report because it does not allow for commodities to be converted.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "MultiCommodity",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html",
          "type": "module"
        },
        "index": {
          "description": "The multi-commodity Balance report This is the simpler balance report because it does not allow for commodities to be converted",
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "MultiCommodity",
          "package": "penny",
          "partial": "Multi Commodity",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOptions for making the balance report. These are the only options\n needed to make the report if the options are not being parsed in\n from the command line.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "Opts",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#Opts",
          "type": "data"
        },
        "index": {
          "description": "Options for making the balance report These are the only options needed to make the report if the options are not being parsed in from the command line",
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "Opts",
          "package": "penny",
          "partial": "Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#t:Opts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "Opts",
          "package": "penny",
          "signature": "Opts",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "Opts",
          "package": "penny",
          "partial": "Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:Opts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "balanceFormat",
          "package": "penny",
          "signature": "Amount Qty -\u003e Text",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "balanceFormat",
          "normalized": "Amount Qty-\u003eText",
          "package": "penny",
          "partial": "Format",
          "signature": "Amount Qty-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:balanceFormat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "defaultOpts",
          "package": "penny",
          "signature": "(Amount Qty -\u003e Text) -\u003e Opts",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#defaultOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "defaultOpts",
          "normalized": "(Amount Qty-\u003eText)-\u003eOpts",
          "package": "penny",
          "partial": "Opts",
          "signature": "(Amount Qty-\u003eText)-\u003eOpts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:defaultOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "defaultParseOpts",
          "package": "penny",
          "signature": "ParseOpts",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#defaultParseOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "defaultParseOpts",
          "package": "penny",
          "partial": "Parse Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:defaultParseOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe MultiCommodity report, with default options.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "defaultReport",
          "package": "penny",
          "signature": "Report",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#defaultReport",
          "type": "function"
        },
        "index": {
          "description": "The MultiCommodity report with default options",
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "defaultReport",
          "package": "penny",
          "partial": "Report",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:defaultReport"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "order",
          "package": "penny",
          "signature": "SubAccount -\u003e SubAccount -\u003e Ordering",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "order",
          "normalized": "SubAccount-\u003eSubAccount-\u003eOrdering",
          "package": "penny",
          "signature": "SubAccount-\u003eSubAccount-\u003eOrdering",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:order"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe MultiCommodity report with configurable options that have\n been parsed from the command line.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "parseReport",
          "package": "penny",
          "signature": "ParseOpts-\u003e Report",
          "type": "function"
        },
        "index": {
          "description": "The MultiCommodity report with configurable options that have been parsed from the command line",
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "parseReport",
          "normalized": "ParseOpts-\u003eReport",
          "package": "penny",
          "partial": "Report",
          "signature": "ParseOpts-\u003eReport",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:parseReport"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis report is what to use if you already have your options (that\n is, you are not parsing them in from the command line.)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "report",
          "package": "penny",
          "signature": "Opts -\u003e [(a, Posting)] -\u003e [Chunk]",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#report",
          "type": "function"
        },
        "index": {
          "description": "This report is what to use if you already have your options that is you are not parsing them in from the command line",
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "report",
          "normalized": "Opts-\u003e[(a,Posting)]-\u003e[Chunk]",
          "package": "penny",
          "signature": "Opts-\u003e[(a,Posting)]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:report"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "showZeroBalances",
          "package": "penny",
          "signature": "ShowZeroBalances",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "showZeroBalances",
          "package": "penny",
          "partial": "Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:showZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "textFormats",
          "package": "penny",
          "signature": "Changers",
          "source": "src/Penny-Cabin-Balance-MultiCommodity.html#Opts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance MultiCommodity",
          "module": "Penny.Cabin.Balance.MultiCommodity",
          "name": "textFormats",
          "package": "penny",
          "partial": "Formats",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-MultiCommodity.html#v:textFormats"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eGrab bag of utility functions.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "Util",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Util.html",
          "type": "module"
        },
        "index": {
          "description": "Grab bag of utility functions",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "Util",
          "package": "penny",
          "partial": "Util",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePuts all Boxes into a Tree and sums the balances. Removes\n accounts that have empty balances if requested. Does NOT sum\n balances from the bottom up.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "balances",
          "package": "penny",
          "signature": "ShowZeroBalances -\u003e [(a, Posting)] -\u003e (Balance, Forest (SubAccount, Balance))",
          "source": "src/Penny-Cabin-Balance-Util.html#balances",
          "type": "function"
        },
        "index": {
          "description": "Puts all Boxes into Tree and sums the balances Removes accounts that have empty balances if requested Does NOT sum balances from the bottom up",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "balances",
          "normalized": "ShowZeroBalances-\u003e[(a,Posting)]-\u003e(Balance,Forest(SubAccount,Balance))",
          "package": "penny",
          "signature": "ShowZeroBalances-\u003e[(a,Posting)]-\u003e(Balance,Forest(SubAccount,Balance))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:balances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Balance.Util",
          "name": "boxesBalance",
          "package": "penny",
          "signature": "[(a, Posting)] -\u003e Balance",
          "source": "src/Penny-Cabin-Balance-Util.html#boxesBalance",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "boxesBalance",
          "normalized": "[(a,Posting)]-\u003eBalance",
          "package": "penny",
          "partial": "Balance",
          "signature": "[(a,Posting)]-\u003eBalance",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:boxesBalance"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eKeeps only Trees that match a given condition. First examines\n child trees to determine whether they should be retained. If a\n child tree is retained, does not delete the parent tree.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "filterForest",
          "package": "penny",
          "signature": "(a -\u003e Bool) -\u003e Forest a -\u003e Forest a",
          "source": "src/Penny-Cabin-Balance-Util.html#filterForest",
          "type": "function"
        },
        "index": {
          "description": "Keeps only Trees that match given condition First examines child trees to determine whether they should be retained If child tree is retained does not delete the parent tree",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "filterForest",
          "normalized": "(a-\u003eBool)-\u003eForest a-\u003eForest a",
          "package": "penny",
          "partial": "Forest",
          "signature": "(a-\u003eBool)-\u003eForest a-\u003eForest a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:filterForest"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTakes a tree of Balances (like what is produced by the \u003ccode\u003e\u003ca\u003ebalances\u003c/a\u003e\u003c/code\u003e\n function) and produces a flat list of accounts with the balance of\n each account. Also adds in the first balance, which is for Accounts\n that have no sub-accounts.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "flatten",
          "package": "penny",
          "signature": "(Balance, Forest (SubAccount, Balance)) -\u003e [(Account, Balance)]",
          "source": "src/Penny-Cabin-Balance-Util.html#flatten",
          "type": "function"
        },
        "index": {
          "description": "Takes tree of Balances like what is produced by the balances function and produces flat list of accounts with the balance of each account Also adds in the first balance which is for Accounts that have no sub-accounts",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "flatten",
          "normalized": "(Balance,Forest(SubAccount,Balance))-\u003e[(Account,Balance)]",
          "package": "penny",
          "signature": "(Balance,Forest(SubAccount,Balance))-\u003e[(Account,Balance)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:flatten"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTakes a Forest and returns a Forest where each node has\n information about its parent Nodes.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "forestWithParents",
          "package": "penny",
          "signature": "Forest a -\u003e Forest (a, [a])",
          "source": "src/Penny-Cabin-Balance-Util.html#forestWithParents",
          "type": "function"
        },
        "index": {
          "description": "Takes Forest and returns Forest where each node has information about its parent Nodes",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "forestWithParents",
          "normalized": "Forest a-\u003eForest(a,[a])",
          "package": "penny",
          "partial": "With Parents",
          "signature": "Forest a-\u003eForest(a,[a])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:forestWithParents"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLabel each level of a Tree with an integer indicating how deep it\n is. The top node of the tree is level 0.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "labelLevels",
          "package": "penny",
          "signature": "Tree a -\u003e Tree (Int, a)",
          "source": "src/Penny-Cabin-Balance-Util.html#labelLevels",
          "type": "function"
        },
        "index": {
          "description": "Label each level of Tree with an integer indicating how deep it is The top node of the tree is level",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "labelLevels",
          "normalized": "Tree a-\u003eTree(Int,a)",
          "package": "penny",
          "partial": "Levels",
          "signature": "Tree a-\u003eTree(Int,a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:labelLevels"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLike lastModeBy but using Ord.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "lastMode",
          "package": "penny",
          "signature": "[a] -\u003e Maybe a",
          "source": "src/Penny-Cabin-Balance-Util.html#lastMode",
          "type": "function"
        },
        "index": {
          "description": "Like lastModeBy but using Ord",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "lastMode",
          "normalized": "[a]-\u003eMaybe a",
          "package": "penny",
          "partial": "Mode",
          "signature": "[a]-\u003eMaybe a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:lastMode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSorts each level of a Forest.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "sortForest",
          "package": "penny",
          "signature": "(a -\u003e a -\u003e Ordering) -\u003e Forest a -\u003e Forest a",
          "source": "src/Penny-Cabin-Balance-Util.html#sortForest",
          "type": "function"
        },
        "index": {
          "description": "Sorts each level of Forest",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "sortForest",
          "normalized": "(a-\u003ea-\u003eOrdering)-\u003eForest a-\u003eForest a",
          "package": "penny",
          "partial": "Forest",
          "signature": "(a-\u003ea-\u003eOrdering)-\u003eForest a-\u003eForest a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:sortForest"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSorts each level of a Tree.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "sortTree",
          "package": "penny",
          "signature": "(a -\u003e a -\u003e Ordering) -\u003e Tree a -\u003e Tree a",
          "source": "src/Penny-Cabin-Balance-Util.html#sortTree",
          "type": "function"
        },
        "index": {
          "description": "Sorts each level of Tree",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "sortTree",
          "normalized": "(a-\u003ea-\u003eOrdering)-\u003eTree a-\u003eTree a",
          "package": "penny",
          "partial": "Tree",
          "signature": "(a-\u003ea-\u003eOrdering)-\u003eTree a-\u003eTree a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:sortTree"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSums a forest from the bottom up. Returns a pair, where the first\n element is the forest, but with the second element of each node\n replaced with the sum of that node and all its children. The second\n element is the sum of all the second elements in the forest.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "sumForest",
          "package": "penny",
          "signature": "Forest (a, s) -\u003e (Forest (a, s), s)",
          "source": "src/Penny-Cabin-Balance-Util.html#sumForest",
          "type": "function"
        },
        "index": {
          "description": "Sums forest from the bottom up Returns pair where the first element is the forest but with the second element of each node replaced with the sum of that node and all its children The second element is the sum of all the second elements in the forest",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "sumForest",
          "normalized": "Forest(a,b)-\u003e(Forest(a,b),b)",
          "package": "penny",
          "partial": "Forest",
          "signature": "Forest(a,s)-\u003e(Forest(a,s),s)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:sumForest"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSums a tree from the bottom up.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "sumTree",
          "package": "penny",
          "signature": "Tree (a, s) -\u003e Tree (a, s)",
          "source": "src/Penny-Cabin-Balance-Util.html#sumTree",
          "type": "function"
        },
        "index": {
          "description": "Sums tree from the bottom up",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "sumTree",
          "normalized": "Tree(a,b)-\u003eTree(a,b)",
          "package": "penny",
          "partial": "Tree",
          "signature": "Tree(a,s)-\u003eTree(a,s)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:sumTree"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePlaces items into a tiered forest.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "tieredForest",
          "package": "penny",
          "signature": "(a -\u003e [b])-\u003e [a]-\u003e ([a], Forest ([a], b))",
          "type": "function"
        },
        "index": {
          "description": "Places items into tiered forest",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "tieredForest",
          "normalized": "(a-\u003e[b])-\u003e[a]-\u003e([a],Forest([a],b))",
          "package": "penny",
          "partial": "Forest",
          "signature": "(a-\u003e[b])-\u003e[a]-\u003e([a],Forest([a],b))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:tieredForest"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTakes a list of postings and puts them into a Forest. Each level\n of each of the trees corresponds to a sub account. The label of the\n node tells you the sub account name and gives you a list of the\n postings at that level.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "tieredPostings",
          "package": "penny",
          "signature": "[(a, Posting)] -\u003e ([(a, Posting)], Forest (SubAccount, [(a, Posting)]))",
          "source": "src/Penny-Cabin-Balance-Util.html#tieredPostings",
          "type": "function"
        },
        "index": {
          "description": "Takes list of postings and puts them into Forest Each level of each of the trees corresponds to sub account The label of the node tells you the sub account name and gives you list of the postings at that level",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "tieredPostings",
          "normalized": "[(a,Posting)]-\u003e([(a,Posting)],Forest(SubAccount,[(a,Posting)]))",
          "package": "penny",
          "partial": "Postings",
          "signature": "[(a,Posting)]-\u003e([(a,Posting)],Forest(SubAccount,[(a,Posting)]))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:tieredPostings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTakes a Tree and returns a Tree where each node has information\n about its parent Nodes. The list of parent nodes has the most\n immediate parent first and the most distant parent last.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance.Util",
          "name": "treeWithParents",
          "package": "penny",
          "signature": "Tree a -\u003e Tree (a, [a])",
          "source": "src/Penny-Cabin-Balance-Util.html#treeWithParents",
          "type": "function"
        },
        "index": {
          "description": "Takes Tree and returns Tree where each node has information about its parent Nodes The list of parent nodes has the most immediate parent first and the most distant parent last",
          "hierarchy": "Penny Cabin Balance Util",
          "module": "Penny.Cabin.Balance.Util",
          "name": "treeWithParents",
          "normalized": "Tree a-\u003eTree(a,[a])",
          "package": "penny",
          "partial": "With Parents",
          "signature": "Tree a-\u003eTree(a,[a])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance-Util.html#v:treeWithParents"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003ePenny balance reports. Currently there are two balance reports:\n the MultiCommodity report, which cannot convert commodities and\n which therefore might show more than one commodity in a single\n report, and the Convert report, which uses price data in the Penny\n file to convert all commodities to a single commodity. The Convert\n report always displays only one commodity per account and this one\n commodity for the whole report.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Balance",
          "name": "Balance",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance.html",
          "type": "module"
        },
        "index": {
          "description": "Penny balance reports Currently there are two balance reports the MultiCommodity report which cannot convert commodities and which therefore might show more than one commodity in single report and the Convert report which uses price data in the Penny file to convert all commodities to single commodity The Convert report always displays only one commodity per account and this one commodity for the whole report",
          "hierarchy": "Penny Cabin Balance",
          "module": "Penny.Cabin.Balance",
          "name": "Balance",
          "package": "penny",
          "partial": "Balance",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe default converting balance report.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance",
          "name": "convert",
          "package": "penny",
          "signature": "Report",
          "source": "src/Penny-Cabin-Balance.html#convert",
          "type": "function"
        },
        "index": {
          "description": "The default converting balance report",
          "hierarchy": "Penny Cabin Balance",
          "module": "Penny.Cabin.Balance",
          "name": "convert",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance.html#v:convert"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe default multi-commodity balance report.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Balance",
          "name": "multiCommodity",
          "package": "penny",
          "signature": "Report",
          "source": "src/Penny-Cabin-Balance.html#multiCommodity",
          "type": "function"
        },
        "index": {
          "description": "The default multi-commodity balance report",
          "hierarchy": "Penny Cabin Balance",
          "module": "Penny.Cabin.Balance",
          "name": "multiCommodity",
          "package": "penny",
          "partial": "Commodity",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Balance.html#v:multiCommodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eAn interface for other Penny components to use. A report is\n anything that is a \u003ccode\u003e\u003ca\u003eReport\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Interface",
          "name": "Interface",
          "package": "penny",
          "source": "src/Penny-Cabin-Interface.html",
          "type": "module"
        },
        "index": {
          "description": "An interface for other Penny components to use report is anything that is Report",
          "hierarchy": "Penny Cabin Interface",
          "module": "Penny.Cabin.Interface",
          "name": "Interface",
          "package": "penny",
          "partial": "Interface",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Interface.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Interface",
          "name": "ArgsAndReport",
          "package": "penny",
          "source": "src/Penny-Cabin-Interface.html#ArgsAndReport",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Cabin Interface",
          "module": "Penny.Cabin.Interface",
          "name": "ArgsAndReport",
          "package": "penny",
          "partial": "Args And Report",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Interface.html#t:ArgsAndReport"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Interface",
          "name": "HelpStr",
          "package": "penny",
          "source": "src/Penny-Cabin-Interface.html#HelpStr",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Cabin Interface",
          "module": "Penny.Cabin.Interface",
          "name": "HelpStr",
          "package": "penny",
          "partial": "Help Str",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Interface.html#t:HelpStr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Interface",
          "name": "MkReport",
          "package": "penny",
          "source": "src/Penny-Cabin-Interface.html#MkReport",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Cabin Interface",
          "module": "Penny.Cabin.Interface",
          "name": "MkReport",
          "package": "penny",
          "partial": "Mk Report",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Interface.html#t:MkReport"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe result of parsing the arguments to a report. Failures are\n indicated with a Text. The name of the executable and the word\n \u003ccode\u003eerror\u003c/code\u003e will be prepended to this Text; otherwise, it is printed\n as-is, so be sure to include any trailing newline if needed.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Interface",
          "name": "ParseResult",
          "package": "penny",
          "source": "src/Penny-Cabin-Interface.html#ParseResult",
          "type": "type"
        },
        "index": {
          "description": "The result of parsing the arguments to report Failures are indicated with Text The name of the executable and the word error will be prepended to this Text otherwise it is printed as-is so be sure to include any trailing newline if needed",
          "hierarchy": "Penny Cabin Interface",
          "module": "Penny.Cabin.Interface",
          "name": "ParseResult",
          "package": "penny",
          "partial": "Parse Result",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Interface.html#t:ParseResult"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe function that will print the report, and the positional\n arguments. If there was a problem parsing the command line options,\n return an Exception with an error message.\n\u003c/p\u003e\u003cp\u003eParsing the filter options can have one of two results: a help\n string, or a list of positional arguments and a function that\n prints a report. Or, the parse might fail.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Interface",
          "name": "PosArg",
          "package": "penny",
          "source": "src/Penny-Cabin-Interface.html#PosArg",
          "type": "type"
        },
        "index": {
          "description": "The function that will print the report and the positional arguments If there was problem parsing the command line options return an Exception with an error message Parsing the filter options can have one of two results help string or list of positional arguments and function that prints report Or the parse might fail",
          "hierarchy": "Penny Cabin Interface",
          "module": "Penny.Cabin.Interface",
          "name": "PosArg",
          "package": "penny",
          "partial": "Pos Arg",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Interface.html#t:PosArg"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Interface",
          "name": "PrintReport",
          "package": "penny",
          "source": "src/Penny-Cabin-Interface.html#PrintReport",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Cabin Interface",
          "module": "Penny.Cabin.Interface",
          "name": "PrintReport",
          "package": "penny",
          "partial": "Print Report",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Interface.html#t:PrintReport"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Interface",
          "name": "Report",
          "package": "penny",
          "source": "src/Penny-Cabin-Interface.html#Report",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Cabin Interface",
          "module": "Penny.Cabin.Interface",
          "name": "Report",
          "package": "penny",
          "partial": "Report",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Interface.html#t:Report"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eMetadata that is specific to Cabin.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Meta",
          "name": "Meta",
          "package": "penny",
          "source": "src/Penny-Cabin-Meta.html",
          "type": "module"
        },
        "index": {
          "description": "Metadata that is specific to Cabin",
          "hierarchy": "Penny Cabin Meta",
          "module": "Penny.Cabin.Meta",
          "name": "Meta",
          "package": "penny",
          "partial": "Meta",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Meta.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEach row that is visible on screen is assigned a VisibleNum. This\n is used to number the rows in the report for the user's benefit. It\n is also used to determine whether the row is even or odd for the\n purpose of assigning the background color (this way the background\n colors can alternate, like a checkbook register.)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Meta",
          "name": "VisibleNum",
          "package": "penny",
          "source": "src/Penny-Cabin-Meta.html#VisibleNum",
          "type": "newtype"
        },
        "index": {
          "description": "Each row that is visible on screen is assigned VisibleNum This is used to number the rows in the report for the user benefit It is also used to determine whether the row is even or odd for the purpose of assigning the background color this way the background colors can alternate like checkbook register",
          "hierarchy": "Penny Cabin Meta",
          "module": "Penny.Cabin.Meta",
          "name": "VisibleNum",
          "package": "penny",
          "partial": "Visible Num",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Meta.html#t:VisibleNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Meta",
          "name": "VisibleNum",
          "package": "penny",
          "signature": "VisibleNum",
          "source": "src/Penny-Cabin-Meta.html#VisibleNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Meta",
          "module": "Penny.Cabin.Meta",
          "name": "VisibleNum",
          "package": "penny",
          "partial": "Visible Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Meta.html#v:VisibleNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Meta",
          "name": "unVisibleNum",
          "package": "penny",
          "signature": "Serial",
          "source": "src/Penny-Cabin-Meta.html#VisibleNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Meta",
          "module": "Penny.Cabin.Meta",
          "name": "unVisibleNum",
          "package": "penny",
          "partial": "Visible Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Meta.html#v:unVisibleNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eOptions applicable to multiple Cabin reports.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Options",
          "name": "Options",
          "package": "penny",
          "source": "src/Penny-Cabin-Options.html",
          "type": "module"
        },
        "index": {
          "description": "Options applicable to multiple Cabin reports",
          "hierarchy": "Penny Cabin Options",
          "module": "Penny.Cabin.Options",
          "name": "Options",
          "package": "penny",
          "partial": "Options",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Options.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhether to show zero balances in reports.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Options",
          "name": "ShowZeroBalances",
          "package": "penny",
          "source": "src/Penny-Cabin-Options.html#ShowZeroBalances",
          "type": "newtype"
        },
        "index": {
          "description": "Whether to show zero balances in reports",
          "hierarchy": "Penny Cabin Options",
          "module": "Penny.Cabin.Options",
          "name": "ShowZeroBalances",
          "package": "penny",
          "partial": "Show Zero Balances",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Options.html#t:ShowZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Options",
          "name": "ShowZeroBalances",
          "package": "penny",
          "signature": "ShowZeroBalances",
          "source": "src/Penny-Cabin-Options.html#ShowZeroBalances",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Options",
          "module": "Penny.Cabin.Options",
          "name": "ShowZeroBalances",
          "package": "penny",
          "partial": "Show Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Options.html#v:ShowZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConverts an ordering to a descending order.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Options",
          "name": "descending",
          "package": "penny",
          "signature": "(a -\u003e a -\u003e Ordering) -\u003e a -\u003e a -\u003e Ordering",
          "source": "src/Penny-Cabin-Options.html#descending",
          "type": "function"
        },
        "index": {
          "description": "Converts an ordering to descending order",
          "hierarchy": "Penny Cabin Options",
          "module": "Penny.Cabin.Options",
          "name": "descending",
          "normalized": "(a-\u003ea-\u003eOrdering)-\u003ea-\u003ea-\u003eOrdering",
          "package": "penny",
          "signature": "(a-\u003ea-\u003eOrdering)-\u003ea-\u003ea-\u003eOrdering",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Options.html#v:descending"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Options",
          "name": "unShowZeroBalances",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny-Cabin-Options.html#ShowZeroBalances",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Options",
          "module": "Penny.Cabin.Options",
          "name": "unShowZeroBalances",
          "package": "penny",
          "partial": "Show Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Options.html#v:unShowZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCommand line parsers that are common to various Cabin reports.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Parsers",
          "name": "Parsers",
          "package": "penny",
          "source": "src/Penny-Cabin-Parsers.html",
          "type": "module"
        },
        "index": {
          "description": "Command line parsers that are common to various Cabin reports",
          "hierarchy": "Penny Cabin Parsers",
          "module": "Penny.Cabin.Parsers",
          "name": "Parsers",
          "package": "penny",
          "partial": "Parsers",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Parsers",
          "name": "SortOrder",
          "package": "penny",
          "source": "src/Penny-Cabin-Parsers.html#SortOrder",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Parsers",
          "module": "Penny.Cabin.Parsers",
          "name": "SortOrder",
          "package": "penny",
          "partial": "Sort Order",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#t:SortOrder"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Parsers\",\"Penny\"]",
          "name": "Ascending",
          "package": "penny",
          "signature": "Ascending",
          "source": "src/Penny-Cabin-Parsers.html#SortOrder",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#v:Ascending\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Ascending\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Parsers",
          "module": "Penny.Cabin.Parsers",
          "name": "Ascending",
          "package": "penny",
          "partial": "Ascending",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#v:Ascending"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Parsers\",\"Penny\"]",
          "name": "Descending",
          "package": "penny",
          "signature": "Descending",
          "source": "src/Penny-Cabin-Parsers.html#SortOrder",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#v:Descending\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Descending\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Parsers",
          "module": "Penny.Cabin.Parsers",
          "name": "Descending",
          "package": "penny",
          "partial": "Descending",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#v:Descending"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Parsers",
          "name": "help",
          "package": "penny",
          "signature": "OptSpec ()",
          "source": "src/Penny-Cabin-Parsers.html#help",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Parsers",
          "module": "Penny.Cabin.Parsers",
          "name": "help",
          "normalized": "OptSpec()",
          "package": "penny",
          "signature": "OptSpec()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#v:help"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Parsers",
          "name": "order",
          "package": "penny",
          "signature": "OptSpec SortOrder",
          "source": "src/Penny-Cabin-Parsers.html#order",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Parsers",
          "module": "Penny.Cabin.Parsers",
          "name": "order",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#v:order"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Parsers",
          "name": "zeroBalances",
          "package": "penny",
          "signature": "OptSpec ShowZeroBalances",
          "source": "src/Penny-Cabin-Parsers.html#zeroBalances",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Parsers",
          "module": "Penny.Cabin.Parsers",
          "name": "zeroBalances",
          "package": "penny",
          "partial": "Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Parsers.html#v:zeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCalculates the allocated cells -- the Payee cell and the Account\n cell. Here is the logic for this process:\n\u003c/p\u003e\u003col\u003e\u003cli\u003e If neither Payee nor Account appears, do nothing.\n\u003c/li\u003e\u003cli\u003e Obtain the width of the growing cells, including the\n spacers. One of the spacers attached to a field might be omitted:\n\u003c/li\u003e\u003c/ol\u003e\u003cp\u003ea. If the rightmost growing field is TotalQty, include all spacers.\n\u003c/p\u003e\u003cp\u003eb. If the rightmost growing field is to the left of Payee, include\n all spacers.\n\u003c/p\u003e\u003cp\u003ec. If the rightmost growing field is to the right of Account but is\n not TotalQty, omit its spacer.\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Obtain the width of the Payee and Account spacers. Include each\n spacer if its corresponding field appears in the report.\n\u003c/li\u003e\u003cli\u003e Subtract from the total report width the width of the the\n growing cells and the width of the Payee and Account spacers. This\n gives the total width available for the Payee and Account\n fields. If there are not at least two columns available, return\n without including the Payee and Account fields.\n\u003c/li\u003e\u003cli\u003e Determine the total width that the Payee and Account fields\n would obtain if they had all the space they could ever need. This\n is the \u003ca\u003erequested width\u003c/a\u003e.\n\u003c/li\u003e\u003cli\u003e Split up the available width for the Payee and Account fields\n depending on which fields appear:\n\u003c/li\u003e\u003c/ol\u003e\u003cp\u003ea. If only the one field appears, then it shall be as wide as the\n total available width or the its requested width, whichever is\n smaller.\n\u003c/p\u003e\u003cp\u003eb. If both fields appear, then calculate the allocated width for\n each field. If either field's requested width is less than its\n allocated width, then that field is only as wide as its requested\n width. The other field is then as wide as (the sum of its allocated\n width and the leftover width from the other field) or its requested\n width, whichever is smaller. If neither field's requested width is\n less than its allocated width, then each field gets ts allocated\n width.\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Fill cell contents; return filled cells.\n\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "Allocated",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Allocated.html",
          "type": "module"
        },
        "index": {
          "description": "Calculates the allocated cells the Payee cell and the Account cell Here is the logic for this process If neither Payee nor Account appears do nothing Obtain the width of the growing cells including the spacers One of the spacers attached to field might be omitted If the rightmost growing field is TotalQty include all spacers If the rightmost growing field is to the left of Payee include all spacers If the rightmost growing field is to the right of Account but is not TotalQty omit its spacer Obtain the width of the Payee and Account spacers Include each spacer if its corresponding field appears in the report Subtract from the total report width the width of the the growing cells and the width of the Payee and Account spacers This gives the total width available for the Payee and Account fields If there are not at least two columns available return without including the Payee and Account fields Determine the total width that the Payee and Account fields would obtain if they had all the space they could ever need This is the requested width Split up the available width for the Payee and Account fields depending on which fields appear If only the one field appears then it shall be as wide as the total available width or the its requested width whichever is smaller If both fields appear then calculate the allocated width for each field If either field requested width is less than its allocated width then that field is only as wide as its requested width The other field is then as wide as the sum of its allocated width and the leftover width from the other field or its requested width whichever is smaller If neither field requested width is less than its allocated width then each field gets ts allocated width Fill cell contents return filled cells",
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "Allocated",
          "package": "penny",
          "partial": "Allocated",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "Alloc",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Allocated.html#Alloc",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "Alloc",
          "package": "penny",
          "partial": "Alloc",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#t:Alloc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll the information needed for allocated cells.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "AllocatedOpts",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Allocated.html#AllocatedOpts",
          "type": "data"
        },
        "index": {
          "description": "All the information needed for allocated cells",
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "AllocatedOpts",
          "package": "penny",
          "partial": "Allocated Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#t:AllocatedOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "Fields",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Allocated.html#Fields",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#t:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "SubAccountLength",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Allocated.html#SubAccountLength",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "SubAccountLength",
          "package": "penny",
          "partial": "Sub Account Length",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#t:SubAccountLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "AllocatedOpts",
          "package": "penny",
          "signature": "AllocatedOpts",
          "source": "src/Penny-Cabin-Posts-Allocated.html#AllocatedOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "AllocatedOpts",
          "package": "penny",
          "partial": "Allocated Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:AllocatedOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "Fields",
          "package": "penny",
          "signature": "Fields",
          "source": "src/Penny-Cabin-Posts-Allocated.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Posts.Allocated\",\"Penny.Cabin.Posts\"]",
          "name": "SubAccountLength",
          "package": "penny",
          "signature": "SubAccountLength",
          "source": "src/Penny-Cabin-Posts-Allocated.html#SubAccountLength",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:SubAccountLength\",\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:SubAccountLength\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "SubAccountLength",
          "package": "penny",
          "partial": "Sub Account Length",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:SubAccountLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "account",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Allocated.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "account",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Posts.Allocated\",\"Penny.Cabin.Posts\"]",
          "name": "alloc",
          "package": "penny",
          "signature": "Int -\u003e Alloc",
          "source": "src/Penny-Cabin-Posts-Allocated.html#alloc",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:alloc\",\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:alloc\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "alloc",
          "normalized": "Int-\u003eAlloc",
          "package": "penny",
          "signature": "Int-\u003eAlloc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:alloc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "allocations",
          "package": "penny",
          "signature": "Fields Alloc",
          "source": "src/Penny-Cabin-Posts-Allocated.html#AllocatedOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "allocations",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:allocations"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "fields",
          "package": "penny",
          "signature": "Fields Bool",
          "source": "src/Penny-Cabin-Posts-Allocated.html#AllocatedOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "fields",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "growerWidths",
          "package": "penny",
          "signature": "Fields (Maybe Int)",
          "source": "src/Penny-Cabin-Posts-Allocated.html#AllocatedOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "growerWidths",
          "package": "penny",
          "partial": "Widths",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:growerWidths"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "payee",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Allocated.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "payee",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCreates Payee and Account cells. The user must have requested the\n cells. In addition, no cells are created if there is not enough\n space for them in the report. Returns a Fields; each element of the\n Fields is Nothing if no cells were created (either because the user\n did not ask for them, or because there was no room) or Just cs i,\n where cs is a list of all the cells, and i is the width of all the\n cells.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "payeeAndAcct",
          "package": "penny",
          "signature": "Changers -\u003e AllocatedOpts -\u003e [(PostMeta, Posting)] -\u003e Fields (Maybe ([ColumnSpec], Int))",
          "source": "src/Penny-Cabin-Posts-Allocated.html#payeeAndAcct",
          "type": "function"
        },
        "index": {
          "description": "Creates Payee and Account cells The user must have requested the cells In addition no cells are created if there is not enough space for them in the report Returns Fields each element of the Fields is Nothing if no cells were created either because the user did not ask for them or because there was no room or Just cs where cs is list of all the cells and is the width of all the cells",
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "payeeAndAcct",
          "normalized": "Changers-\u003eAllocatedOpts-\u003e[(PostMeta,Posting)]-\u003eFields(Maybe([ColumnSpec],Int))",
          "package": "penny",
          "partial": "And Acct",
          "signature": "Changers-\u003eAllocatedOpts-\u003e[(PostMeta,Posting)]-\u003eFields(Maybe([ColumnSpec],Int))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:payeeAndAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "reportWidth",
          "package": "penny",
          "signature": "ReportWidth",
          "source": "src/Penny-Cabin-Posts-Allocated.html#AllocatedOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "reportWidth",
          "package": "penny",
          "partial": "Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:reportWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "spacers",
          "package": "penny",
          "signature": "Spacers Int",
          "source": "src/Penny-Cabin-Posts-Allocated.html#AllocatedOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "spacers",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:spacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "subAccountLength",
          "package": "penny",
          "signature": "SubAccountLength",
          "source": "src/Penny-Cabin-Posts-Allocated.html#AllocatedOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "subAccountLength",
          "package": "penny",
          "partial": "Account Length",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:subAccountLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "unAlloc",
          "package": "penny",
          "signature": "Alloc -\u003e Int",
          "source": "src/Penny-Cabin-Posts-Allocated.html#unAlloc",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "unAlloc",
          "normalized": "Alloc-\u003eInt",
          "package": "penny",
          "partial": "Alloc",
          "signature": "Alloc-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:unAlloc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Posts.Allocated\",\"Penny.Cabin.Posts\"]",
          "name": "unSubAccountLength",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-Posts-Allocated.html#SubAccountLength",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:unSubAccountLength\",\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:unSubAccountLength\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Allocated",
          "module": "Penny.Cabin.Posts.Allocated",
          "name": "unSubAccountLength",
          "package": "penny",
          "partial": "Sub Account Length",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Allocated.html#v:unSubAccountLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eFills the bottom rows, which contain the tags, memo, and\n filename. These rows are formatted as follows:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e If the columns for TotalDrCr, TotalCmdty, and TotalQty are all\n present, AND if there are at least TWO other columns present, then\n there will be a hanging indent. The bottom rows will begin at the\n SECOND column and end with the last column to the left of\n TotalDrCr. In this case, each bottom row will have three cells: one\n padding on the left, one main content, and one padding on the\n right.\n\u003c/li\u003e\u003cli\u003e Otherwise, if there are NO columns in the top row, these rows\n will take the entire width of the report. Each bottom row will have\n one cell.\n\u003c/li\u003e\u003cli\u003e Otherwise, the bottom rows are as wide as all the top cells\n combined. Each bottom row will have one cell.\n\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "BottomRows",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-BottomRows.html",
          "type": "module"
        },
        "index": {
          "description": "Fills the bottom rows which contain the tags memo and filename These rows are formatted as follows If the columns for TotalDrCr TotalCmdty and TotalQty are all present AND if there are at least TWO other columns present then there will be hanging indent The bottom rows will begin at the SECOND column and end with the last column to the left of TotalDrCr In this case each bottom row will have three cells one padding on the left one main content and one padding on the right Otherwise if there are NO columns in the top row these rows will take the entire width of the report Each bottom row will have one cell Otherwise the bottom rows are as wide as all the top cells combined Each bottom row will have one cell",
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "BottomRows",
          "package": "penny",
          "partial": "Bottom Rows",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "BottomOpts",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#BottomOpts",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "BottomOpts",
          "package": "penny",
          "partial": "Bottom Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#t:BottomOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "Fields",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#Fields",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#t:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "TopRowCells",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "TopRowCells",
          "package": "penny",
          "partial": "Top Row Cells",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#t:TopRowCells"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "BottomOpts",
          "package": "penny",
          "signature": "BottomOpts",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#BottomOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "BottomOpts",
          "package": "penny",
          "partial": "Bottom Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:BottomOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "Fields",
          "package": "penny",
          "signature": "Fields",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "TopRowCells",
          "package": "penny",
          "signature": "TopRowCells",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "TopRowCells",
          "package": "penny",
          "partial": "Top Row Cells",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:TopRowCells"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "account",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "account",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "allocatedWidths",
          "package": "penny",
          "signature": "Fields (Maybe Int)",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#BottomOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "allocatedWidths",
          "package": "penny",
          "partial": "Widths",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:allocatedWidths"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "bottomRows",
          "package": "penny",
          "signature": "Changers -\u003e BottomOpts -\u003e [(PostMeta, Posting)] -\u003e Fields (Maybe [[Chunk]])",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#bottomRows",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "bottomRows",
          "normalized": "Changers-\u003eBottomOpts-\u003e[(PostMeta,Posting)]-\u003eFields(Maybe[[Chunk]])",
          "package": "penny",
          "partial": "Rows",
          "signature": "Changers-\u003eBottomOpts-\u003e[(PostMeta,Posting)]-\u003eFields(Maybe[[Chunk]])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:bottomRows"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "date",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "date",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "fields",
          "package": "penny",
          "signature": "Fields Bool",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#BottomOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "fields",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "filePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "filePosting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:filePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "fileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "fileTransaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:fileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "filename",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "filename",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:filename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "filtered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "filtered",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:filtered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "flag",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "flag",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "globalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "globalPosting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:globalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "globalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "globalTransaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:globalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "growingWidths",
          "package": "penny",
          "signature": "Fields (Maybe Int)",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#BottomOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "growingWidths",
          "package": "penny",
          "partial": "Widths",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:growingWidths"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe line number from the posting's metadata\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "lineNum",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "description": "The line number from the posting metadata",
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "lineNum",
          "package": "penny",
          "partial": "Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:lineNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "memo",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "memo",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:memo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMerges a TopRowCells with a Spacers. Returns Maybes because\n totalQty has no spacer.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "mergeWithSpacers",
          "package": "penny",
          "signature": "TopRowCells a -\u003e Spacers b -\u003e TopRowCells (a, Maybe b)",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#mergeWithSpacers",
          "type": "function"
        },
        "index": {
          "description": "Merges TopRowCells with Spacers Returns Maybes because totalQty has no spacer",
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "mergeWithSpacers",
          "normalized": "TopRowCells a-\u003eSpacers b-\u003eTopRowCells(a,Maybe b)",
          "package": "penny",
          "partial": "With Spacers",
          "signature": "TopRowCells a-\u003eSpacers b-\u003eTopRowCells(a,Maybe b)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:mergeWithSpacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "number",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "number",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "payee",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "payee",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "postingCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "postingCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:postingCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "postingDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "postingDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:postingDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "postingQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "postingQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:postingQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "reportWidth",
          "package": "penny",
          "signature": "ReportWidth",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#BottomOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "reportWidth",
          "package": "penny",
          "partial": "Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:reportWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revFilePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:revFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revFileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:revFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revFiltered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revFiltered",
          "package": "penny",
          "partial": "Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:revFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revGlobalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:revGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revGlobalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:revGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revSorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revSorted",
          "package": "penny",
          "partial": "Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:revSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revVisible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "revVisible",
          "package": "penny",
          "partial": "Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:revVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "sorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "sorted",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:sorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "spacers",
          "package": "penny",
          "signature": "Spacers Int",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#BottomOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "spacers",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:spacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "tags",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "tags",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "topRowCells",
          "package": "penny",
          "signature": "Fields a -\u003e Fields a -\u003e TopRowCells a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#topRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "topRowCells",
          "normalized": "Fields a-\u003eFields a-\u003eTopRowCells a",
          "package": "penny",
          "partial": "Row Cells",
          "signature": "Fields a-\u003eFields a-\u003eTopRowCells a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:topRowCells"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "totalCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "totalCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:totalCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "totalDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "totalDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:totalDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "totalQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "totalQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:totalQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "visible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-BottomRows.html#TopRowCells",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts BottomRows",
          "module": "Penny.Cabin.Posts.BottomRows",
          "name": "visible",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-BottomRows.html#v:visible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "Chunk",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Chunk.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "Chunk",
          "package": "penny",
          "partial": "Chunk",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "ChunkOpts",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "ChunkOpts",
          "package": "penny",
          "partial": "Chunk Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#t:ChunkOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "ChunkOpts",
          "package": "penny",
          "signature": "ChunkOpts",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "ChunkOpts",
          "package": "penny",
          "partial": "Chunk Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:ChunkOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "accountAllocation",
          "package": "penny",
          "signature": "Alloc",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "accountAllocation",
          "package": "penny",
          "partial": "Allocation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:accountAllocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "dateFormat",
          "package": "penny",
          "signature": "(PostMeta, Posting) -\u003e Text",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "dateFormat",
          "normalized": "(PostMeta,Posting)-\u003eText",
          "package": "penny",
          "partial": "Format",
          "signature": "(PostMeta,Posting)-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:dateFormat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "fields",
          "package": "penny",
          "signature": "Fields Bool",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "fields",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "makeChunk",
          "package": "penny",
          "signature": "Changers -\u003e ChunkOpts -\u003e [(PostMeta, Posting)] -\u003e [Chunk]",
          "source": "src/Penny-Cabin-Posts-Chunk.html#makeChunk",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "makeChunk",
          "normalized": "Changers-\u003eChunkOpts-\u003e[(PostMeta,Posting)]-\u003e[Chunk]",
          "package": "penny",
          "partial": "Chunk",
          "signature": "Changers-\u003eChunkOpts-\u003e[(PostMeta,Posting)]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:makeChunk"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "payeeAllocation",
          "package": "penny",
          "signature": "Alloc",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "payeeAllocation",
          "package": "penny",
          "partial": "Allocation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:payeeAllocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "qtyFormat",
          "package": "penny",
          "signature": "Amount Qty -\u003e Text",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "qtyFormat",
          "normalized": "Amount Qty-\u003eText",
          "package": "penny",
          "partial": "Format",
          "signature": "Amount Qty-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:qtyFormat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "reportWidth",
          "package": "penny",
          "signature": "ReportWidth",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "reportWidth",
          "package": "penny",
          "partial": "Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:reportWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "spacers",
          "package": "penny",
          "signature": "Spacers Int",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "spacers",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:spacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "subAccountLength",
          "package": "penny",
          "signature": "SubAccountLength",
          "source": "src/Penny-Cabin-Posts-Chunk.html#ChunkOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Chunk",
          "module": "Penny.Cabin.Posts.Chunk",
          "name": "subAccountLength",
          "package": "penny",
          "partial": "Account Length",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Chunk.html#v:subAccountLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eFields that can appear in the Posts report.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "Fields",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Fields.html",
          "type": "module"
        },
        "index": {
          "description": "Fields that can appear in the Posts report",
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "Fields",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#t:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "Fields",
          "package": "penny",
          "signature": "Fields",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "account",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "account",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "date",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "date",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "fieldNames",
          "package": "penny",
          "signature": "Fields String",
          "source": "src/Penny-Cabin-Posts-Fields.html#fieldNames",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "fieldNames",
          "package": "penny",
          "partial": "Names",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:fieldNames"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "filePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "filePosting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:filePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "fileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "fileTransaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:fileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "filename",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "filename",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:filename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "filtered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "filtered",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:filtered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "flag",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "flag",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "globalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "globalPosting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:globalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "globalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "globalTransaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:globalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "lineNum",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "lineNum",
          "package": "penny",
          "partial": "Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:lineNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "memo",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "memo",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:memo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "number",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "number",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "payee",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "payee",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "postingCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "postingCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:postingCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "postingDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "postingDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:postingDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "postingQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "postingQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:postingQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revFilePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:revFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revFileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:revFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revFiltered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revFiltered",
          "package": "penny",
          "partial": "Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:revFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revGlobalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:revGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revGlobalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:revGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revSorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revSorted",
          "package": "penny",
          "partial": "Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:revSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revVisible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "revVisible",
          "package": "penny",
          "partial": "Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:revVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "sorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "sorted",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:sorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "tags",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "tags",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "totalCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "totalCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:totalCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "totalDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "totalDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:totalDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "totalQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "totalQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:totalQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Fields",
          "name": "visible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Fields.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Fields",
          "module": "Penny.Cabin.Posts.Fields",
          "name": "visible",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Fields.html#v:visible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCalculates cells that \u003ca\u003egrow to fit.\u003c/a\u003e These cells grow to fit the\n widest cell in the column. No information is ever truncated from\n these cells (what use is a truncated dollar amount?)\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "Growers",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Growers.html",
          "type": "module"
        },
        "index": {
          "description": "Calculates cells that grow to fit These cells grow to fit the widest cell in the column No information is ever truncated from these cells what use is truncated dollar amount",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "Growers",
          "package": "penny",
          "partial": "Growers",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll growing fields, as an ADT.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFields",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "data"
        },
        "index": {
          "description": "All growing fields as an ADT",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFields",
          "package": "penny",
          "partial": "EFields",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#t:EFields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll growing fields.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "Fields",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "data"
        },
        "index": {
          "description": "All growing fields",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#t:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll the options needed to grow the cells.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "GrowOpts",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Growers.html#GrowOpts",
          "type": "data"
        },
        "index": {
          "description": "All the options needed to grow the cells",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "GrowOpts",
          "package": "penny",
          "partial": "Grow Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#t:GrowOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EDate",
          "package": "penny",
          "signature": "EDate",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EDate",
          "package": "penny",
          "partial": "EDate",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EDate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFilePosting",
          "package": "penny",
          "signature": "EFilePosting",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFilePosting",
          "package": "penny",
          "partial": "EFile Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFileTransaction",
          "package": "penny",
          "signature": "EFileTransaction",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFileTransaction",
          "package": "penny",
          "partial": "EFile Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFiltered",
          "package": "penny",
          "signature": "EFiltered",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFiltered",
          "package": "penny",
          "partial": "EFiltered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFlag",
          "package": "penny",
          "signature": "EFlag",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EFlag",
          "package": "penny",
          "partial": "EFlag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EFlag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EGlobalPosting",
          "package": "penny",
          "signature": "EGlobalPosting",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EGlobalPosting",
          "package": "penny",
          "partial": "EGlobal Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EGlobalTransaction",
          "package": "penny",
          "signature": "EGlobalTransaction",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EGlobalTransaction",
          "package": "penny",
          "partial": "EGlobal Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ELineNum",
          "package": "penny",
          "signature": "ELineNum",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ELineNum",
          "package": "penny",
          "partial": "ELine Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ELineNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ENumber",
          "package": "penny",
          "signature": "ENumber",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ENumber",
          "package": "penny",
          "partial": "ENumber",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ENumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EPostingCmdty",
          "package": "penny",
          "signature": "EPostingCmdty",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EPostingCmdty",
          "package": "penny",
          "partial": "EPosting Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EPostingCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EPostingDrCr",
          "package": "penny",
          "signature": "EPostingDrCr",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EPostingDrCr",
          "package": "penny",
          "partial": "EPosting Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EPostingDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EPostingQty",
          "package": "penny",
          "signature": "EPostingQty",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EPostingQty",
          "package": "penny",
          "partial": "EPosting Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EPostingQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevFilePosting",
          "package": "penny",
          "signature": "ERevFilePosting",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevFilePosting",
          "package": "penny",
          "partial": "ERev File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ERevFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevFileTransaction",
          "package": "penny",
          "signature": "ERevFileTransaction",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevFileTransaction",
          "package": "penny",
          "partial": "ERev File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ERevFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevFiltered",
          "package": "penny",
          "signature": "ERevFiltered",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevFiltered",
          "package": "penny",
          "partial": "ERev Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ERevFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevGlobalPosting",
          "package": "penny",
          "signature": "ERevGlobalPosting",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevGlobalPosting",
          "package": "penny",
          "partial": "ERev Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ERevGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevGlobalTransaction",
          "package": "penny",
          "signature": "ERevGlobalTransaction",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevGlobalTransaction",
          "package": "penny",
          "partial": "ERev Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ERevGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevSorted",
          "package": "penny",
          "signature": "ERevSorted",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevSorted",
          "package": "penny",
          "partial": "ERev Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ERevSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevVisible",
          "package": "penny",
          "signature": "ERevVisible",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ERevVisible",
          "package": "penny",
          "partial": "ERev Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ERevVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ESorted",
          "package": "penny",
          "signature": "ESorted",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ESorted",
          "package": "penny",
          "partial": "ESorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ESorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ETotalCmdty",
          "package": "penny",
          "signature": "ETotalCmdty",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ETotalCmdty",
          "package": "penny",
          "partial": "ETotal Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ETotalCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ETotalDrCr",
          "package": "penny",
          "signature": "ETotalDrCr",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ETotalDrCr",
          "package": "penny",
          "partial": "ETotal Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ETotalDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ETotalQty",
          "package": "penny",
          "signature": "ETotalQty",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "ETotalQty",
          "package": "penny",
          "partial": "ETotal Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:ETotalQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EVisible",
          "package": "penny",
          "signature": "EVisible",
          "source": "src/Penny-Cabin-Posts-Growers.html#EFields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "EVisible",
          "package": "penny",
          "partial": "EVisible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:EVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "Fields",
          "package": "penny",
          "signature": "Fields",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "GrowOpts",
          "package": "penny",
          "signature": "GrowOpts",
          "source": "src/Penny-Cabin-Posts-Growers.html#GrowOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "GrowOpts",
          "package": "penny",
          "partial": "Grow Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:GrowOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "date",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "date",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "dateFormat",
          "package": "penny",
          "signature": "(PostMeta, Posting) -\u003e Text",
          "source": "src/Penny-Cabin-Posts-Growers.html#GrowOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "dateFormat",
          "normalized": "(PostMeta,Posting)-\u003eText",
          "package": "penny",
          "partial": "Format",
          "signature": "(PostMeta,Posting)-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:dateFormat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturns a Fields where each record has its corresponding EField.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "eFields",
          "package": "penny",
          "signature": "Fields EFields",
          "source": "src/Penny-Cabin-Posts-Growers.html#eFields",
          "type": "function"
        },
        "index": {
          "description": "Returns Fields where each record has its corresponding EField",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "eFields",
          "package": "penny",
          "partial": "Fields",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:eFields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "fields",
          "package": "penny",
          "signature": "Fields Bool",
          "source": "src/Penny-Cabin-Posts-Growers.html#GrowOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "fields",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "filePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "filePosting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:filePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "fileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "fileTransaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:fileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "filtered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "filtered",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:filtered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "flag",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "flag",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "globalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "globalPosting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:globalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "globalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "globalTransaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:globalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGrows the cells that will be GrowToFit cells in the report. First\n this function fills in all visible cells with text, but leaves the\n width undetermined. Then it determines the widest line in each\n column. Finally it adjusts each cell in the column so that it is\n that maximum width.\n\u003c/p\u003e\u003cp\u003eReturns a list of rows, and a Fields holding the width of each\n cell. Each of these widths will be at least 1; fields that were in\n the report but that ended up having no width are changed to\n Nothing.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "growCells",
          "package": "penny",
          "signature": "Changers -\u003e GrowOpts -\u003e [(PostMeta, Posting)] -\u003e Fields (Maybe ([ColumnSpec], Int))",
          "source": "src/Penny-Cabin-Posts-Growers.html#growCells",
          "type": "function"
        },
        "index": {
          "description": "Grows the cells that will be GrowToFit cells in the report First this function fills in all visible cells with text but leaves the width undetermined Then it determines the widest line in each column Finally it adjusts each cell in the column so that it is that maximum width Returns list of rows and Fields holding the width of each cell Each of these widths will be at least fields that were in the report but that ended up having no width are changed to Nothing",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "growCells",
          "normalized": "Changers-\u003eGrowOpts-\u003e[(PostMeta,Posting)]-\u003eFields(Maybe([ColumnSpec],Int))",
          "package": "penny",
          "partial": "Cells",
          "signature": "Changers-\u003eGrowOpts-\u003e[(PostMeta,Posting)]-\u003eFields(Maybe([ColumnSpec],Int))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:growCells"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompute the width of all Grown cells, including any applicable\n spacer cells.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "grownWidth",
          "package": "penny",
          "signature": "Fields (Maybe Int) -\u003e Spacers Int -\u003e Int",
          "source": "src/Penny-Cabin-Posts-Growers.html#grownWidth",
          "type": "function"
        },
        "index": {
          "description": "Compute the width of all Grown cells including any applicable spacer cells",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "grownWidth",
          "normalized": "Fields(Maybe Int)-\u003eSpacers Int-\u003eInt",
          "package": "penny",
          "partial": "Width",
          "signature": "Fields(Maybe Int)-\u003eSpacers Int-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:grownWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe line number from the posting's metadata\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "lineNum",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "description": "The line number from the posting metadata",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "lineNum",
          "package": "penny",
          "partial": "Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:lineNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "number",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "number",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePairs data from a Fields with its matching spacer field. The\n spacer field is returned in a Maybe because the TotalQty field does\n not have a spacer.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "pairWithSpacer",
          "package": "penny",
          "signature": "Fields a -\u003e Spacers b -\u003e Fields (a, Maybe b)",
          "source": "src/Penny-Cabin-Posts-Growers.html#pairWithSpacer",
          "type": "function"
        },
        "index": {
          "description": "Pairs data from Fields with its matching spacer field The spacer field is returned in Maybe because the TotalQty field does not have spacer",
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "pairWithSpacer",
          "normalized": "Fields a-\u003eSpacers b-\u003eFields(a,Maybe b)",
          "package": "penny",
          "partial": "With Spacer",
          "signature": "Fields a-\u003eSpacers b-\u003eFields(a,Maybe b)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:pairWithSpacer"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "postingCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "postingCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:postingCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "postingDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "postingDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:postingDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "postingQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "postingQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:postingQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "qtyFormat",
          "package": "penny",
          "signature": "Amount Qty -\u003e Text",
          "source": "src/Penny-Cabin-Posts-Growers.html#GrowOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "qtyFormat",
          "normalized": "Amount Qty-\u003eText",
          "package": "penny",
          "partial": "Format",
          "signature": "Amount Qty-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:qtyFormat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revFilePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:revFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revFileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:revFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revFiltered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revFiltered",
          "package": "penny",
          "partial": "Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:revFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revGlobalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:revGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revGlobalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:revGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revSorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revSorted",
          "package": "penny",
          "partial": "Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:revSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revVisible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "revVisible",
          "package": "penny",
          "partial": "Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:revVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "sorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "sorted",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:sorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "totalCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "totalCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:totalCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "totalDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "totalDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:totalDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "totalQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "totalQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:totalQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Growers",
          "name": "visible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Growers.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Growers",
          "module": "Penny.Cabin.Posts.Growers",
          "name": "visible",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Growers.html#v:visible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Meta",
          "name": "Meta",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Meta.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Meta",
          "module": "Penny.Cabin.Posts.Meta",
          "name": "Meta",
          "package": "penny",
          "partial": "Meta",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Meta.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Meta",
          "name": "PostMeta",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Meta.html#PostMeta",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Meta",
          "module": "Penny.Cabin.Posts.Meta",
          "name": "PostMeta",
          "package": "penny",
          "partial": "Post Meta",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Meta.html#t:PostMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEach row that is visible on screen is assigned a VisibleNum. This\n is used to number the rows in the report for the user's benefit. It\n is also used to determine whether the row is even or odd for the\n purpose of assigning the background color (this way the background\n colors can alternate, like a checkbook register.)\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Meta",
          "name": "VisibleNum",
          "package": "penny",
          "source": "src/Penny-Cabin-Meta.html#VisibleNum",
          "type": "data"
        },
        "index": {
          "description": "Each row that is visible on screen is assigned VisibleNum This is used to number the rows in the report for the user benefit It is also used to determine whether the row is even or odd for the purpose of assigning the background color this way the background colors can alternate like checkbook register",
          "hierarchy": "Penny Cabin Posts Meta",
          "module": "Penny.Cabin.Posts.Meta",
          "name": "VisibleNum",
          "package": "penny",
          "partial": "Visible Num",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Meta.html#t:VisibleNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdds appropriate metadata, including the running balance, to a\n list of Box. Because all posts are incorporated into the running\n balance, first calculates the running balance for all posts. Then,\n removes posts we're not interested in by applying the predicate and\n the post-filter. Finally, adds on the metadata, which will include\n the VisibleNum.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts.Meta",
          "name": "toBoxList",
          "package": "penny",
          "signature": "ShowZeroBalances-\u003e Pdct (LibertyMeta, Posting)-\u003e [PostFilterFn]-\u003e [(LibertyMeta, Posting)]-\u003e [(PostMeta, Posting)]",
          "type": "function"
        },
        "index": {
          "description": "Adds appropriate metadata including the running balance to list of Box Because all posts are incorporated into the running balance first calculates the running balance for all posts Then removes posts we re not interested in by applying the predicate and the post-filter Finally adds on the metadata which will include the VisibleNum",
          "hierarchy": "Penny Cabin Posts Meta",
          "module": "Penny.Cabin.Posts.Meta",
          "name": "toBoxList",
          "normalized": "ShowZeroBalances-\u003ePdct(LibertyMeta,Posting)-\u003e[PostFilterFn]-\u003e[(LibertyMeta,Posting)]-\u003e[(PostMeta,Posting)]",
          "package": "penny",
          "partial": "Box List",
          "signature": "ShowZeroBalances-\u003ePdct(LibertyMeta,Posting)-\u003e[PostFilterFn]-\u003e[(LibertyMeta,Posting)]-\u003e[(PostMeta,Posting)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Meta.html#v:toBoxList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "Parser",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Parser.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "Parser",
          "package": "penny",
          "partial": "Parser",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "Error",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Parser.html#Error",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "Error",
          "package": "penny",
          "partial": "Error",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#t:Error"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "ShowExpression",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Parser.html#ShowExpression",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "ShowExpression",
          "package": "penny",
          "partial": "Show Expression",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#t:ShowExpression"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "State",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "State",
          "package": "penny",
          "partial": "State",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#t:State"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "VerboseFilter",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Parser.html#VerboseFilter",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "VerboseFilter",
          "package": "penny",
          "partial": "Verbose Filter",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#t:VerboseFilter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "ShowExpression",
          "package": "penny",
          "signature": "ShowExpression",
          "source": "src/Penny-Cabin-Posts-Parser.html#ShowExpression",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "ShowExpression",
          "package": "penny",
          "partial": "Show Expression",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:ShowExpression"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "State",
          "package": "penny",
          "signature": "State",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "State",
          "package": "penny",
          "partial": "State",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:State"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "VerboseFilter",
          "package": "penny",
          "signature": "VerboseFilter",
          "source": "src/Penny-Cabin-Posts-Parser.html#VerboseFilter",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "VerboseFilter",
          "package": "penny",
          "partial": "Verbose Filter",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:VerboseFilter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "allSpecs",
          "package": "penny",
          "signature": "Runtime -\u003e [OptSpec (State -\u003e Either Error State)]",
          "source": "src/Penny-Cabin-Posts-Parser.html#allSpecs",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "allSpecs",
          "normalized": "Runtime-\u003e[OptSpec(State-\u003eEither Error State)]",
          "package": "penny",
          "partial": "Specs",
          "signature": "Runtime-\u003e[OptSpec(State-\u003eEither Error State)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:allSpecs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "exprDesc",
          "package": "penny",
          "signature": "ExprDesc",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "exprDesc",
          "package": "penny",
          "partial": "Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:exprDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "factory",
          "package": "penny",
          "signature": "Factory",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "factory",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:factory"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "fields",
          "package": "penny",
          "signature": "Fields Bool",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "fields",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "postFilter",
          "package": "penny",
          "signature": "[PostFilterFn]",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "postFilter",
          "normalized": "[PostFilterFn]",
          "package": "penny",
          "partial": "Filter",
          "signature": "[PostFilterFn]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:postFilter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "sensitive",
          "package": "penny",
          "signature": "CaseSensitive",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "sensitive",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:sensitive"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "showExpression",
          "package": "penny",
          "signature": "ShowExpression",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "showExpression",
          "package": "penny",
          "partial": "Expression",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:showExpression"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "showZeroBalances",
          "package": "penny",
          "signature": "ShowZeroBalances",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "showZeroBalances",
          "package": "penny",
          "partial": "Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:showZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "tokens",
          "package": "penny",
          "signature": "[Token (LibertyMeta, Posting)]",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "tokens",
          "normalized": "[Token(LibertyMeta,Posting)]",
          "package": "penny",
          "signature": "[Token(LibertyMeta,Posting)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:tokens"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "unShowExpression",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny-Cabin-Posts-Parser.html#ShowExpression",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "unShowExpression",
          "package": "penny",
          "partial": "Show Expression",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:unShowExpression"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "unVerboseFilter",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny-Cabin-Posts-Parser.html#VerboseFilter",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "unVerboseFilter",
          "package": "penny",
          "partial": "Verbose Filter",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:unVerboseFilter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "verboseFilter",
          "package": "penny",
          "signature": "VerboseFilter",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "verboseFilter",
          "package": "penny",
          "partial": "Filter",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:verboseFilter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Parser",
          "name": "width",
          "package": "penny",
          "signature": "ReportWidth",
          "source": "src/Penny-Cabin-Posts-Parser.html#State",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Parser",
          "module": "Penny.Cabin.Posts.Parser",
          "name": "width",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Parser.html#v:width"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eSpacer fields in the report. They don't contain any data; they\n just provide whitespace. Each spacer immediately follows the named\n field.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "Spacers",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Spacers.html",
          "type": "module"
        },
        "index": {
          "description": "Spacer fields in the report They don contain any data they just provide whitespace Each spacer immediately follows the named field",
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "Spacers",
          "package": "penny",
          "partial": "Spacers",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "Spacers",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "Spacers",
          "package": "penny",
          "partial": "Spacers",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#t:Spacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "Spacers",
          "package": "penny",
          "signature": "Spacers",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "Spacers",
          "package": "penny",
          "partial": "Spacers",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:Spacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "account",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "account",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "date",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "date",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "filePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "filePosting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:filePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "fileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "fileTransaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:fileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "filtered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "filtered",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:filtered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "flag",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "flag",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "globalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "globalPosting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:globalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "globalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "globalTransaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:globalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "lineNum",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "lineNum",
          "package": "penny",
          "partial": "Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:lineNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "number",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "number",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "payee",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "payee",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "postingCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "postingCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:postingCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "postingDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "postingDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:postingDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "postingQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "postingQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:postingQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revFilePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:revFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revFileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:revFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revFiltered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revFiltered",
          "package": "penny",
          "partial": "Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:revFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revGlobalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:revGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revGlobalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:revGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revSorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revSorted",
          "package": "penny",
          "partial": "Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:revSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revVisible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "revVisible",
          "package": "penny",
          "partial": "Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:revVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "sorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "sorted",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:sorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "totalCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "totalCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:totalCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "totalDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "totalDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:totalDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "visible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Posts-Spacers.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Spacers",
          "module": "Penny.Cabin.Posts.Spacers",
          "name": "visible",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Spacers.html#v:visible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Types",
          "name": "Types",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Types.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Types",
          "module": "Penny.Cabin.Posts.Types",
          "name": "Types",
          "package": "penny",
          "partial": "Types",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Types.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts.Types",
          "name": "ReportWidth",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Types.html#ReportWidth",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Types",
          "module": "Penny.Cabin.Posts.Types",
          "name": "ReportWidth",
          "package": "penny",
          "partial": "Report Width",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Types.html#t:ReportWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Posts.Types\",\"Penny.Cabin.Posts\"]",
          "name": "ReportWidth",
          "package": "penny",
          "signature": "ReportWidth",
          "source": "src/Penny-Cabin-Posts-Types.html#ReportWidth",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Types.html#v:ReportWidth\",\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:ReportWidth\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Types",
          "module": "Penny.Cabin.Posts.Types",
          "name": "ReportWidth",
          "package": "penny",
          "partial": "Report Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Types.html#v:ReportWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Posts.Types\",\"Penny.Cabin.Posts\"]",
          "name": "unReportWidth",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-Posts-Types.html#ReportWidth",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Types.html#v:unReportWidth\",\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:unReportWidth\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts Types",
          "module": "Penny.Cabin.Posts.Types",
          "name": "unReportWidth",
          "package": "penny",
          "partial": "Report Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts-Types.html#v:unReportWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThe Penny Postings report\n\u003c/p\u003e\u003cp\u003eThe Postings report displays postings in a tabular format designed\n to be read by humans. Some terminology used in the Postings report:\n\u003c/p\u003e\u003cdl\u003e\u003cdt\u003e\u003ccode\u003erow\u003c/code\u003e\u003c/dt\u003e\u003cdd\u003e The smallest unit that spans from left to right. A row,\n however, might consist of more than one screen line. For example,\n the running balance is shown on the far right side of the Postings\n report. The running balance might consist of more than one\n commodity. Each commodity is displayed on its own screen\n line. However, all these lines put together are displayed in a\n single row.\n\u003c/dd\u003e\u003cdt\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003c/dt\u003e\u003cdd\u003e The smallest unit that spans from top to bottom.\n\u003c/dd\u003e\u003cdt\u003e\u003ccode\u003etranche\u003c/code\u003e\u003c/dt\u003e\u003cdd\u003e Each posting is displayed in several rows. The group of\n rows that is displayed for a single posting is called a tranche.\n\u003c/dd\u003e\u003cdt\u003e\u003ccode\u003etranche row\u003c/code\u003e\u003c/dt\u003e\u003cdd\u003e Each tranche has a particular number of rows\n (currently four); each of these rows is known as a tranche row.\n\u003c/dd\u003e\u003cdt\u003e\u003ccode\u003efield\u003c/code\u003e\u003c/dt\u003e\u003cdd\u003e Corresponds to a particular element of the posting, such\n as whether it is a debit or credit or its payee. The user can\n select which fields to see.\n\u003c/dd\u003e\u003cdt\u003e\u003ccode\u003eallocation\u003c/code\u003e\u003c/dt\u003e\u003cdd\u003e The width of the Payee and Account fields is\n variable. Generally their width will adjust to fill the entire\n width of the screen. The allocations of the Payee and Account\n fields determine how much of the remaining space each field will\n receive.\n\u003c/dd\u003e\u003c/dl\u003e\u003cp\u003eThe Postings report is easily customized from the command line to\n show various fields. However, the order of the fields is not\n configurable without editing the source code (sorry).\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "Posts",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts.html",
          "type": "module"
        },
        "index": {
          "description": "The Penny Postings report The Postings report displays postings in tabular format designed to be read by humans Some terminology used in the Postings report row The smallest unit that spans from left to right row however might consist of more than one screen line For example the running balance is shown on the far right side of the Postings report The running balance might consist of more than one commodity Each commodity is displayed on its own screen line However all these lines put together are displayed in single row column The smallest unit that spans from top to bottom tranche Each posting is displayed in several rows The group of rows that is displayed for single posting is called tranche tranche row Each tranche has particular number of rows currently four each of these rows is known as tranche row field Corresponds to particular element of the posting such as whether it is debit or credit or its payee The user can select which fields to see allocation The width of the Payee and Account fields is variable Generally their width will adjust to fill the entire width of the screen The allocations of the Payee and Account fields determine how much of the remaining space each field will receive The Postings report is easily customized from the command line to show various fields However the order of the fields is not configurable without editing the source code sorry",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "Posts",
          "package": "penny",
          "partial": "Posts",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts",
          "name": "Alloc",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Allocated.html#Alloc",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "Alloc",
          "package": "penny",
          "partial": "Alloc",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#t:Alloc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts",
          "name": "ReportWidth",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Types.html#ReportWidth",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "ReportWidth",
          "package": "penny",
          "partial": "Report Width",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#t:ReportWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts",
          "name": "SubAccountLength",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts-Allocated.html#SubAccountLength",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "SubAccountLength",
          "package": "penny",
          "partial": "Sub Account Length",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#t:SubAccountLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll the information to configure the postings report if the\n options will be parsed in from the command line.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "ZincOpts",
          "package": "penny",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "data"
        },
        "index": {
          "description": "All the information to configure the postings report if the options will be parsed in from the command line",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "ZincOpts",
          "package": "penny",
          "partial": "Zinc Opts",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#t:ZincOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts",
          "name": "ZincOpts",
          "package": "penny",
          "signature": "ZincOpts",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "ZincOpts",
          "package": "penny",
          "partial": "Zinc Opts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:ZincOpts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSee payeeAllocation above\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "accountAllocation",
          "package": "penny",
          "signature": "Alloc",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "description": "See payeeAllocation above",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "accountAllocation",
          "package": "penny",
          "partial": "Allocation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:accountAllocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApplied to the value of the COLUMNS environment variable, returns\n an appropriate ReportWidth.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "columnsVarToWidth",
          "package": "penny",
          "signature": "Maybe String -\u003e ReportWidth",
          "source": "src/Penny-Cabin-Posts.html#columnsVarToWidth",
          "type": "function"
        },
        "index": {
          "description": "Applied to the value of the COLUMNS environment variable returns an appropriate ReportWidth",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "columnsVarToWidth",
          "normalized": "Maybe String-\u003eReportWidth",
          "package": "penny",
          "partial": "Var To Width",
          "signature": "Maybe String-\u003eReportWidth",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:columnsVarToWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow to display dates. This function is applied to the\n a PostingInfo so it has lots of information, but it\n should return a date for use in the Date field.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "dateFormat",
          "package": "penny",
          "signature": "(PostMeta, Posting) -\u003e Text",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "description": "How to display dates This function is applied to the PostingInfo so it has lots of information but it should return date for use in the Date field",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "dateFormat",
          "normalized": "(PostMeta,Posting)-\u003eText",
          "package": "penny",
          "partial": "Format",
          "signature": "(PostMeta,Posting)-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:dateFormat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault fields to show in the Postings report.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "defaultFields",
          "package": "penny",
          "signature": "Fields Bool",
          "source": "src/Penny-Cabin-Posts.html#defaultFields",
          "type": "function"
        },
        "index": {
          "description": "Default fields to show in the Postings report",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "defaultFields",
          "package": "penny",
          "partial": "Fields",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:defaultFields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts",
          "name": "defaultOptions",
          "package": "penny",
          "signature": "Runtime -\u003e ZincOpts",
          "source": "src/Penny-Cabin-Posts.html#defaultOptions",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "defaultOptions",
          "normalized": "Runtime-\u003eZincOpts",
          "package": "penny",
          "partial": "Options",
          "signature": "Runtime-\u003eZincOpts",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:defaultOptions"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault width of spacers; most are one character wide, but the\n spacer after payee is 4 characters wide.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "defaultSpacerWidth",
          "package": "penny",
          "signature": "Spacers Int",
          "source": "src/Penny-Cabin-Posts.html#defaultSpacerWidth",
          "type": "function"
        },
        "index": {
          "description": "Default width of spacers most are one character wide but the spacer after payee is characters wide",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "defaultSpacerWidth",
          "package": "penny",
          "partial": "Spacer Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:defaultSpacerWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe default width for the report.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "defaultWidth",
          "package": "penny",
          "signature": "ReportWidth",
          "source": "src/Penny-Cabin-Posts.html#defaultWidth",
          "type": "function"
        },
        "index": {
          "description": "The default width for the report",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "defaultWidth",
          "package": "penny",
          "partial": "Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:defaultWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault fields to show in the report.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "fields",
          "package": "penny",
          "signature": "Fields Bool",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "description": "Default fields to show in the report",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "fields",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis and accountAllocation determine how much space\n payees and accounts receive. They divide up the\n remaining space after everything else is displayed. For\n instance if payeeAllocation is 60 and accountAllocation\n is 40, the payee takes about 60 percent of the\n remaining space and the account takes about 40 percent.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "payeeAllocation",
          "package": "penny",
          "signature": "Alloc",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "description": "This and accountAllocation determine how much space payees and accounts receive They divide up the remaining space after everything else is displayed For instance if payeeAllocation is and accountAllocation is the payee takes about percent of the remaining space and the account takes about percent",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "payeeAllocation",
          "package": "penny",
          "partial": "Allocation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:payeeAllocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll information needed to make a Posts report. This function\n never fails.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "postsReport",
          "package": "penny",
          "signature": "Changers-\u003e ShowZeroBalances-\u003e Pdct (LibertyMeta, Posting)-\u003e [PostFilterFn]-\u003e ChunkOpts-\u003e [(LibertyMeta, Posting)]-\u003e [Chunk]",
          "type": "function"
        },
        "index": {
          "description": "All information needed to make Posts report This function never fails",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "postsReport",
          "normalized": "Changers-\u003eShowZeroBalances-\u003ePdct(LibertyMeta,Posting)-\u003e[PostFilterFn]-\u003eChunkOpts-\u003e[(LibertyMeta,Posting)]-\u003e[Chunk]",
          "package": "penny",
          "partial": "Report",
          "signature": "Changers-\u003eShowZeroBalances-\u003ePdct(LibertyMeta,Posting)-\u003e[PostFilterFn]-\u003eChunkOpts-\u003e[(LibertyMeta,Posting)]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:postsReport"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAre commodities that have no balance shown in the Total fields\n of the report?\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "showZeroBalances",
          "package": "penny",
          "signature": "ShowZeroBalances",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "description": "Are commodities that have no balance shown in the Total fields of the report",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "showZeroBalances",
          "package": "penny",
          "partial": "Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:showZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault width for spacer fields. If any of these Ints are\n less than or equal to zero, there will be no spacer. There is\n never a spacer for fields that do not appear in the report.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "spacers",
          "package": "penny",
          "signature": "Spacers Int",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "description": "Default width for spacer fields If any of these Ints are less than or equal to zero there will be no spacer There is never spacer for fields that do not appear in the report",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "spacers",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:spacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhen shortening the names of sub accounts to make\n them fit, they will be this long.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "subAccountLength",
          "package": "penny",
          "signature": "SubAccountLength",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "description": "When shortening the names of sub accounts to make them fit they will be this long",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "subAccountLength",
          "package": "penny",
          "partial": "Account Length",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:subAccountLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGives the default report width. This can be\n overridden on the command line. You can use the\n information from the Runtime to make this as wide as\n the current terminal.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "width",
          "package": "penny",
          "signature": "ReportWidth",
          "source": "src/Penny-Cabin-Posts.html#ZincOpts",
          "type": "function"
        },
        "index": {
          "description": "Gives the default report width This can be overridden on the command line You can use the information from the Runtime to make this as wide as the current terminal",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "width",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:width"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven the Runtime, use the defaultWidth given above to calculate\n the report's width if COLUMNS does not yield a value. Otherwise,\n use what is in COLUMNS.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Posts",
          "name": "widthFromRuntime",
          "package": "penny",
          "signature": "Runtime -\u003e ReportWidth",
          "source": "src/Penny-Cabin-Posts.html#widthFromRuntime",
          "type": "function"
        },
        "index": {
          "description": "Given the Runtime use the defaultWidth given above to calculate the report width if COLUMNS does not yield value Otherwise use what is in COLUMNS",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "widthFromRuntime",
          "normalized": "Runtime-\u003eReportWidth",
          "package": "penny",
          "partial": "From Runtime",
          "signature": "Runtime-\u003eReportWidth",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:widthFromRuntime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShows the date of a posting in YYYY-MM-DD format.\n\u003c/p\u003e",
          "module": "[\"Penny.Cabin.Posts\",\"Penny\"]",
          "name": "yearMonthDay",
          "package": "penny",
          "signature": "(PostMeta, Posting) -\u003e Text",
          "source": "src/Penny-Cabin-Posts.html#yearMonthDay",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:yearMonthDay\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:yearMonthDay\"]"
        },
        "index": {
          "description": "Shows the date of posting in YYYY-MM-DD format",
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "yearMonthDay",
          "normalized": "(PostMeta,Posting)-\u003eText",
          "package": "penny",
          "partial": "Month Day",
          "signature": "(PostMeta,Posting)-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:yearMonthDay"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Posts",
          "name": "zincReport",
          "package": "penny",
          "signature": "ZincOpts -\u003e Report",
          "source": "src/Penny-Cabin-Posts.html#zincReport",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Posts",
          "module": "Penny.Cabin.Posts",
          "name": "zincReport",
          "normalized": "ZincOpts-\u003eReport",
          "package": "penny",
          "partial": "Report",
          "signature": "ZincOpts-\u003eReport",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Posts.html#v:zincReport"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDisplays a single on-screen row. A row may contain multiple\n screen lines and multiple columns.\n\u003c/p\u003e\u003cp\u003eThis module only deals with a single row at a time. Each cell in\n the row can have more than one screen line; this module will make\n sure that the cells have appropriate padding on the bottom so that\n the row appears nicely. This module will also justify each cell so\n that its left side or right side is ragged; however, you first have\n to specify how wide you want the cell to be.\n\u003c/p\u003e\u003cp\u003eThis module is a little dumber than you might first think it could\n be. For instance it would be possible to write a function that\n takes a number of rows and automatically justifies all the cells by\n finding the widest cell in a column. Indeed I might eventually\n write such a function because it might be useful in, for example,\n the multi-commodity balance report. However, such a function would\n not be useful in all cases; in particular, the Posts report is very\n complicated to lay out, and the automatic function described above\n would not do the right thing.\n\u003c/p\u003e\u003cp\u003eSo this module offers some useful automation, even if it is at a\n level that is apparently lower that what is possible. Thus the\n present \u003ccode\u003e\u003ca\u003erow\u003c/a\u003e\u003c/code\u003e function likely will not change, even if eventually I\n add a \u003ccode\u003etable\u003c/code\u003e function that automatically justifies many rows.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Row",
          "name": "Row",
          "package": "penny",
          "source": "src/Penny-Cabin-Row.html",
          "type": "module"
        },
        "index": {
          "description": "Displays single on-screen row row may contain multiple screen lines and multiple columns This module only deals with single row at time Each cell in the row can have more than one screen line this module will make sure that the cells have appropriate padding on the bottom so that the row appears nicely This module will also justify each cell so that its left side or right side is ragged however you first have to specify how wide you want the cell to be This module is little dumber than you might first think it could be For instance it would be possible to write function that takes number of rows and automatically justifies all the cells by finding the widest cell in column Indeed might eventually write such function because it might be useful in for example the multi-commodity balance report However such function would not be useful in all cases in particular the Posts report is very complicated to lay out and the automatic function described above would not do the right thing So this module offers some useful automation even if it is at level that is apparently lower that what is possible Thus the present row function likely will not change even if eventually add table function that automatically justifies many rows",
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "Row",
          "package": "penny",
          "partial": "Row",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA cell of text output. You tell the cell how to justify itself\n and how wide it is. You also tell it the background colors to\n use. The cell will be appropriately justified (that is, text\n aligned between left and right margins) and padded (with lines of\n blank text added on the bottom as needed) when joined with other\n cells into a Row.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Row",
          "name": "ColumnSpec",
          "package": "penny",
          "source": "src/Penny-Cabin-Row.html#ColumnSpec",
          "type": "data"
        },
        "index": {
          "description": "cell of text output You tell the cell how to justify itself and how wide it is You also tell it the background colors to use The cell will be appropriately justified that is text aligned between left and right margins and padded with lines of blank text added on the bottom as needed when joined with other cells into Row",
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "ColumnSpec",
          "package": "penny",
          "partial": "Column Spec",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#t:ColumnSpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow to justify cells. LeftJustify leaves the right side\n ragged. RightJustify leaves the left side ragged.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Row",
          "name": "Justification",
          "package": "penny",
          "source": "src/Penny-Cabin-Row.html#Justification",
          "type": "data"
        },
        "index": {
          "description": "How to justify cells LeftJustify leaves the right side ragged RightJustify leaves the left side ragged",
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "Justification",
          "package": "penny",
          "partial": "Justification",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#t:Justification"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "Width",
          "package": "penny",
          "source": "src/Penny-Cabin-Row.html#Width",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "Width",
          "package": "penny",
          "partial": "Width",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#t:Width"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "ColumnSpec",
          "package": "penny",
          "signature": "ColumnSpec",
          "source": "src/Penny-Cabin-Row.html#ColumnSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "ColumnSpec",
          "package": "penny",
          "partial": "Column Spec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:ColumnSpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "LeftJustify",
          "package": "penny",
          "signature": "LeftJustify",
          "source": "src/Penny-Cabin-Row.html#Justification",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "LeftJustify",
          "package": "penny",
          "partial": "Left Justify",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:LeftJustify"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "RightJustify",
          "package": "penny",
          "signature": "RightJustify",
          "source": "src/Penny-Cabin-Row.html#Justification",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "RightJustify",
          "package": "penny",
          "partial": "Right Justify",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:RightJustify"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "Width",
          "package": "penny",
          "signature": "Width",
          "source": "src/Penny-Cabin-Row.html#Width",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "Width",
          "package": "penny",
          "partial": "Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:Width"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "bits",
          "package": "penny",
          "signature": "[Chunk]",
          "source": "src/Penny-Cabin-Row.html#ColumnSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "bits",
          "normalized": "[Chunk]",
          "package": "penny",
          "signature": "[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:bits"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "justification",
          "package": "penny",
          "signature": "Justification",
          "source": "src/Penny-Cabin-Row.html#ColumnSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "justification",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:justification"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "padSpec",
          "package": "penny",
          "signature": "(Label, EvenOdd)",
          "source": "src/Penny-Cabin-Row.html#ColumnSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "padSpec",
          "normalized": "(Label,EvenOdd)",
          "package": "penny",
          "partial": "Spec",
          "signature": "(Label,EvenOdd)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:padSpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "row",
          "package": "penny",
          "signature": "Changers -\u003e [ColumnSpec] -\u003e [Chunk]",
          "source": "src/Penny-Cabin-Row.html#row",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "row",
          "normalized": "Changers-\u003e[ColumnSpec]-\u003e[Chunk]",
          "package": "penny",
          "signature": "Changers-\u003e[ColumnSpec]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:row"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "unWidth",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-Row.html#Width",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "unWidth",
          "package": "penny",
          "partial": "Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:unWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Row",
          "name": "width",
          "package": "penny",
          "signature": "Width",
          "source": "src/Penny-Cabin-Row.html#ColumnSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Row",
          "module": "Penny.Cabin.Row",
          "name": "width",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Row.html#v:width"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eSome schemes you can use.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "Schemes",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme-Schemes.html",
          "type": "module"
        },
        "index": {
          "description": "Some schemes you can use",
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "Schemes",
          "package": "penny",
          "partial": "Schemes",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe dark color scheme. You can change various values below to\n affect the color scheme.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "dark",
          "package": "penny",
          "signature": "Scheme",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#dark",
          "type": "function"
        },
        "index": {
          "description": "The dark color scheme You can change various values below to affect the color scheme",
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "dark",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:dark"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkCredit",
          "package": "penny",
          "signature": "(Chunk -\u003e Chunk) -\u003e Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#darkCredit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkCredit",
          "normalized": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "package": "penny",
          "partial": "Credit",
          "signature": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:darkCredit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkDebit",
          "package": "penny",
          "signature": "(Chunk -\u003e Chunk) -\u003e Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#darkDebit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkDebit",
          "normalized": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "package": "penny",
          "partial": "Debit",
          "signature": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:darkDebit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkEvenTextSpec",
          "package": "penny",
          "signature": "Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#darkEvenTextSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkEvenTextSpec",
          "normalized": "Chunk-\u003eChunk",
          "package": "penny",
          "partial": "Even Text Spec",
          "signature": "Chunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:darkEvenTextSpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkLabels",
          "package": "penny",
          "signature": "Labels (EvenAndOdd (Chunk -\u003e Chunk))",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#darkLabels",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkLabels",
          "normalized": "Labels(EvenAndOdd(Chunk-\u003eChunk))",
          "package": "penny",
          "partial": "Labels",
          "signature": "Labels(EvenAndOdd(Chunk-\u003eChunk))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:darkLabels"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkOddTextSpec",
          "package": "penny",
          "signature": "Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#darkOddTextSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkOddTextSpec",
          "normalized": "Chunk-\u003eChunk",
          "package": "penny",
          "partial": "Odd Text Spec",
          "signature": "Chunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:darkOddTextSpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkZero",
          "package": "penny",
          "signature": "(Chunk -\u003e Chunk) -\u003e Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#darkZero",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "darkZero",
          "normalized": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "package": "penny",
          "partial": "Zero",
          "signature": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:darkZero"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe light color scheme. You can change various values below to\n affect the color scheme.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "light",
          "package": "penny",
          "signature": "Scheme",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#light",
          "type": "function"
        },
        "index": {
          "description": "The light color scheme You can change various values below to affect the color scheme",
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "light",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:light"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightCredit",
          "package": "penny",
          "signature": "(Chunk -\u003e Chunk) -\u003e Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#lightCredit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightCredit",
          "normalized": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "package": "penny",
          "partial": "Credit",
          "signature": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:lightCredit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightDebit",
          "package": "penny",
          "signature": "(Chunk -\u003e Chunk) -\u003e Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#lightDebit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightDebit",
          "normalized": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "package": "penny",
          "partial": "Debit",
          "signature": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:lightDebit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightEvenTextSpec",
          "package": "penny",
          "signature": "Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#lightEvenTextSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightEvenTextSpec",
          "normalized": "Chunk-\u003eChunk",
          "package": "penny",
          "partial": "Even Text Spec",
          "signature": "Chunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:lightEvenTextSpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightLabels",
          "package": "penny",
          "signature": "Labels (EvenAndOdd (Chunk -\u003e Chunk))",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#lightLabels",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightLabels",
          "normalized": "Labels(EvenAndOdd(Chunk-\u003eChunk))",
          "package": "penny",
          "partial": "Labels",
          "signature": "Labels(EvenAndOdd(Chunk-\u003eChunk))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:lightLabels"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightOddTextSpec",
          "package": "penny",
          "signature": "Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#lightOddTextSpec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightOddTextSpec",
          "normalized": "Chunk-\u003eChunk",
          "package": "penny",
          "partial": "Odd Text Spec",
          "signature": "Chunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:lightOddTextSpec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightZero",
          "package": "penny",
          "signature": "(Chunk -\u003e Chunk) -\u003e Chunk -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#lightZero",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "lightZero",
          "normalized": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "package": "penny",
          "partial": "Zero",
          "signature": "(Chunk-\u003eChunk)-\u003eChunk-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:lightZero"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePlain scheme has no colors at all.\n\u003c/p\u003e",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "plain",
          "package": "penny",
          "signature": "Scheme",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#plain",
          "type": "function"
        },
        "index": {
          "description": "Plain scheme has no colors at all",
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "plain",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:plain"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "plainLabels",
          "package": "penny",
          "signature": "Labels (EvenAndOdd (Chunk -\u003e Chunk))",
          "source": "src/Penny-Cabin-Scheme-Schemes.html#plainLabels",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme Schemes",
          "module": "Penny.Cabin.Scheme.Schemes",
          "name": "plainLabels",
          "normalized": "Labels(EvenAndOdd(Chunk-\u003eChunk))",
          "package": "penny",
          "partial": "Labels",
          "signature": "Labels(EvenAndOdd(Chunk-\u003eChunk))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme-Schemes.html#v:plainLabels"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCabin color schemes\n\u003c/p\u003e\u003cp\u003eEach element of a Cabin report identifies what it is--a debit on an\n even line, a credit on an odd line, etc. The user can have several\n color schemes; the scheme contains color assignments for 8 and 256\n color terminals. This allows the use of different schemes for light\n and dark terminals or for any other reason.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin.Scheme",
          "name": "Scheme",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html",
          "type": "module"
        },
        "index": {
          "description": "Cabin color schemes Each element of Cabin report identifies what it is--a debit on an even line credit on an odd line etc The user can have several color schemes the scheme contains color assignments for and color terminals This allows the use of different schemes for light and dark terminals or for any other reason",
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Scheme",
          "package": "penny",
          "partial": "Scheme",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Changers",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#Changers",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Changers",
          "package": "penny",
          "partial": "Changers",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#t:Changers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "EvenAndOdd",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#EvenAndOdd",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "EvenAndOdd",
          "package": "penny",
          "partial": "Even And Odd",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#t:EvenAndOdd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "EvenOdd",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#EvenOdd",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "EvenOdd",
          "package": "penny",
          "partial": "Even Odd",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#t:EvenOdd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Label",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#Label",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Label",
          "package": "penny",
          "partial": "Label",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#t:Label"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Labels",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#Labels",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Labels",
          "package": "penny",
          "partial": "Labels",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#t:Labels"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Scheme",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#Scheme",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Scheme",
          "package": "penny",
          "partial": "Scheme",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#t:Scheme"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Credit",
          "package": "penny",
          "signature": "Credit",
          "source": "src/Penny-Cabin-Scheme.html#Label",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Credit",
          "package": "penny",
          "partial": "Credit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Credit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Debit",
          "package": "penny",
          "signature": "Debit",
          "source": "src/Penny-Cabin-Scheme.html#Label",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Debit",
          "package": "penny",
          "partial": "Debit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Debit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Even",
          "package": "penny",
          "signature": "Even",
          "source": "src/Penny-Cabin-Scheme.html#EvenOdd",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Even",
          "package": "penny",
          "partial": "Even",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Even"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "EvenAndOdd",
          "package": "penny",
          "signature": "EvenAndOdd",
          "source": "src/Penny-Cabin-Scheme.html#EvenAndOdd",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:EvenAndOdd\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:EvenAndOdd\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "EvenAndOdd",
          "package": "penny",
          "partial": "Even And Odd",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:EvenAndOdd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "Labels",
          "package": "penny",
          "signature": "Labels",
          "source": "src/Penny-Cabin-Scheme.html#Labels",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Labels\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Labels\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Labels",
          "package": "penny",
          "partial": "Labels",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Labels"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Odd",
          "package": "penny",
          "signature": "Odd",
          "source": "src/Penny-Cabin-Scheme.html#EvenOdd",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Odd",
          "package": "penny",
          "partial": "Odd",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Odd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Other",
          "package": "penny",
          "signature": "Other",
          "source": "src/Penny-Cabin-Scheme.html#Label",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Other",
          "package": "penny",
          "partial": "Other",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Other"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "Scheme",
          "package": "penny",
          "signature": "Scheme",
          "source": "src/Penny-Cabin-Scheme.html#Scheme",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Scheme\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Scheme\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Scheme",
          "package": "penny",
          "partial": "Scheme",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Scheme"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "Zero",
          "package": "penny",
          "signature": "Zero",
          "source": "src/Penny-Cabin-Scheme.html#Label",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "Zero",
          "package": "penny",
          "partial": "Zero",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:Zero"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "balanceToQtys",
          "package": "penny",
          "signature": "Changers -\u003e (Amount Qty -\u003e Text) -\u003e EvenOdd -\u003e [(Commodity, BottomLine)] -\u003e [Chunk]",
          "source": "src/Penny-Cabin-Scheme.html#balanceToQtys",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "balanceToQtys",
          "normalized": "Changers-\u003e(Amount Qty-\u003eText)-\u003eEvenOdd-\u003e[(Commodity,BottomLine)]-\u003e[Chunk]",
          "package": "penny",
          "partial": "To Qtys",
          "signature": "Changers-\u003e(Amount Qty-\u003eText)-\u003eEvenOdd-\u003e[(Commodity,BottomLine)]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:balanceToQtys"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "balancesToCmdtys",
          "package": "penny",
          "signature": "Changers -\u003e EvenOdd -\u003e [(Commodity, BottomLine)] -\u003e [Chunk]",
          "source": "src/Penny-Cabin-Scheme.html#balancesToCmdtys",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "balancesToCmdtys",
          "normalized": "Changers-\u003eEvenOdd-\u003e[(Commodity,BottomLine)]-\u003e[Chunk]",
          "package": "penny",
          "partial": "To Cmdtys",
          "signature": "Changers-\u003eEvenOdd-\u003e[(Commodity,BottomLine)]-\u003e[Chunk]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:balancesToCmdtys"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "bottomLineToCmdty",
          "package": "penny",
          "signature": "Changers -\u003e EvenOdd -\u003e (Commodity, BottomLine) -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme.html#bottomLineToCmdty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "bottomLineToCmdty",
          "normalized": "Changers-\u003eEvenOdd-\u003e(Commodity,BottomLine)-\u003eChunk",
          "package": "penny",
          "partial": "Line To Cmdty",
          "signature": "Changers-\u003eEvenOdd-\u003e(Commodity,BottomLine)-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:bottomLineToCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "bottomLineToDrCr",
          "package": "penny",
          "signature": "Maybe DrCr -\u003e EvenOdd -\u003e Changers -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme.html#bottomLineToDrCr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "bottomLineToDrCr",
          "normalized": "Maybe DrCr-\u003eEvenOdd-\u003eChangers-\u003eChunk",
          "package": "penny",
          "partial": "Line To Dr Cr",
          "signature": "Maybe DrCr-\u003eEvenOdd-\u003eChangers-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:bottomLineToDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "bottomLineToQty",
          "package": "penny",
          "signature": "Changers -\u003e (Amount Qty -\u003e Text) -\u003e EvenOdd -\u003e (Commodity, BottomLine) -\u003e Chunk",
          "source": "src/Penny-Cabin-Scheme.html#bottomLineToQty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "bottomLineToQty",
          "normalized": "Changers-\u003e(Amount Qty-\u003eText)-\u003eEvenOdd-\u003e(Commodity,BottomLine)-\u003eChunk",
          "package": "penny",
          "partial": "Line To Qty",
          "signature": "Changers-\u003e(Amount Qty-\u003eText)-\u003eEvenOdd-\u003e(Commodity,BottomLine)-\u003eChunk",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:bottomLineToQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "changers",
          "package": "penny",
          "signature": "Changers",
          "source": "src/Penny-Cabin-Scheme.html#Scheme",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:changers\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:changers\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "changers",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:changers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "credit",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Scheme.html#Labels",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:credit\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:credit\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "credit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:credit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "dcToLbl",
          "package": "penny",
          "signature": "DrCr -\u003e Label",
          "source": "src/Penny-Cabin-Scheme.html#dcToLbl",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "dcToLbl",
          "normalized": "DrCr-\u003eLabel",
          "package": "penny",
          "partial": "To Lbl",
          "signature": "DrCr-\u003eLabel",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:dcToLbl"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "debit",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Scheme.html#Labels",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:debit\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:debit\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "debit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:debit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA brief (one-line) description of what this scheme is, such\n as \u003ccode\u003efor dark background terminals\u003c/code\u003e\n\u003c/p\u003e",
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "description",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Cabin-Scheme.html#Scheme",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:description\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:description\"]"
        },
        "index": {
          "description": "brief one-line description of what this scheme is such as for dark background terminals",
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "description",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:description"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "eoEven",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Scheme.html#EvenAndOdd",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:eoEven\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:eoEven\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "eoEven",
          "package": "penny",
          "partial": "Even",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:eoEven"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "eoOdd",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Scheme.html#EvenAndOdd",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:eoOdd\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:eoOdd\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "eoOdd",
          "package": "penny",
          "partial": "Odd",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:eoOdd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "fromVisibleNum",
          "package": "penny",
          "signature": "VisibleNum -\u003e EvenOdd",
          "source": "src/Penny-Cabin-Scheme.html#fromVisibleNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "fromVisibleNum",
          "normalized": "VisibleNum-\u003eEvenOdd",
          "package": "penny",
          "partial": "Visible Num",
          "signature": "VisibleNum-\u003eEvenOdd",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:fromVisibleNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "getEvenOdd",
          "package": "penny",
          "signature": "EvenOdd -\u003e EvenAndOdd a -\u003e a",
          "source": "src/Penny-Cabin-Scheme.html#getEvenOdd",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "getEvenOdd",
          "normalized": "EvenOdd-\u003eEvenAndOdd a-\u003ea",
          "package": "penny",
          "partial": "Even Odd",
          "signature": "EvenOdd-\u003eEvenAndOdd a-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:getEvenOdd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "getEvenOddLabelValue",
          "package": "penny",
          "signature": "Label -\u003e EvenOdd -\u003e Labels (EvenAndOdd a) -\u003e a",
          "source": "src/Penny-Cabin-Scheme.html#getEvenOddLabelValue",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "getEvenOddLabelValue",
          "normalized": "Label-\u003eEvenOdd-\u003eLabels(EvenAndOdd a)-\u003ea",
          "package": "penny",
          "partial": "Even Odd Label Value",
          "signature": "Label-\u003eEvenOdd-\u003eLabels(EvenAndOdd a)-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:getEvenOddLabelValue"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.Scheme",
          "name": "getLabelValue",
          "package": "penny",
          "signature": "Label -\u003e Labels a -\u003e a",
          "source": "src/Penny-Cabin-Scheme.html#getLabelValue",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "getLabelValue",
          "normalized": "Label-\u003eLabels a-\u003ea",
          "package": "penny",
          "partial": "Label Value",
          "signature": "Label-\u003eLabels a-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:getLabelValue"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe name of this scheme. How it will be identified on the\n command line.\n\u003c/p\u003e",
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "name",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Cabin-Scheme.html#Scheme",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:name\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:name\"]"
        },
        "index": {
          "description": "The name of this scheme How it will be identified on the command line",
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "name",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:name"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "other",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Scheme.html#Labels",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:other\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:other\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "other",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:other"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Cabin.Scheme\",\"Penny\"]",
          "name": "zero",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Cabin-Scheme.html#Labels",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:zero\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:zero\"]"
        },
        "index": {
          "hierarchy": "Penny Cabin Scheme",
          "module": "Penny.Cabin.Scheme",
          "name": "zero",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-Scheme.html#v:zero"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "TextFormat",
          "package": "penny",
          "source": "src/Penny-Cabin-TextFormat.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "TextFormat",
          "package": "penny",
          "partial": "Text Format",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "CharsPerLine",
          "package": "penny",
          "source": "src/Penny-Cabin-TextFormat.html#CharsPerLine",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "CharsPerLine",
          "package": "penny",
          "partial": "Chars Per Line",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#t:CharsPerLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "Lines",
          "package": "penny",
          "source": "src/Penny-Cabin-TextFormat.html#Lines",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "Lines",
          "package": "penny",
          "partial": "Lines",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#t:Lines"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "Shortest",
          "package": "penny",
          "source": "src/Penny-Cabin-TextFormat.html#Shortest",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "Shortest",
          "package": "penny",
          "partial": "Shortest",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#t:Shortest"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "Target",
          "package": "penny",
          "source": "src/Penny-Cabin-TextFormat.html#Target",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "Target",
          "package": "penny",
          "partial": "Target",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#t:Target"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "Words",
          "package": "penny",
          "source": "src/Penny-Cabin-TextFormat.html#Words",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "Words",
          "package": "penny",
          "partial": "Words",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#t:Words"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "Lines",
          "package": "penny",
          "signature": "Lines",
          "source": "src/Penny-Cabin-TextFormat.html#Lines",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "Lines",
          "package": "penny",
          "partial": "Lines",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:Lines"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "Shortest",
          "package": "penny",
          "signature": "Shortest",
          "source": "src/Penny-Cabin-TextFormat.html#Shortest",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "Shortest",
          "package": "penny",
          "partial": "Shortest",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:Shortest"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "Target",
          "package": "penny",
          "signature": "Target",
          "source": "src/Penny-Cabin-TextFormat.html#Target",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "Target",
          "package": "penny",
          "partial": "Target",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:Target"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "Words",
          "package": "penny",
          "signature": "Words",
          "source": "src/Penny-Cabin-TextFormat.html#Words",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "Words",
          "package": "penny",
          "partial": "Words",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:Words"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTakes a list of words and shortens it so that it fits in the\n space allotted. You specify the minimum length for each word, x. It\n will shorten the farthest left word first, until it is only x\n characters long; then it will shorten the next word until it is\n only x characters long, etc. This proceeds until all words are just\n x characters long. Then words are shortened to one\n character. Then the leftmost words are deleted as necessary.\n\u003c/p\u003e\u003cp\u003eAssumes that the words will be printed with a separator, which\n matters when lengths are calculated.\n\u003c/p\u003e",
          "module": "Penny.Cabin.TextFormat",
          "name": "shorten",
          "package": "penny",
          "signature": "Shortest -\u003e Target -\u003e Words -\u003e Words",
          "source": "src/Penny-Cabin-TextFormat.html#shorten",
          "type": "function"
        },
        "index": {
          "description": "Takes list of words and shortens it so that it fits in the space allotted You specify the minimum length for each word It will shorten the farthest left word first until it is only characters long then it will shorten the next word until it is only characters long etc This proceeds until all words are just characters long Then words are shortened to one character Then the leftmost words are deleted as necessary Assumes that the words will be printed with separator which matters when lengths are calculated",
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "shorten",
          "normalized": "Shortest-\u003eTarget-\u003eWords-\u003eWords",
          "package": "penny",
          "signature": "Shortest-\u003eTarget-\u003eWords-\u003eWords",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:shorten"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSplits a blank-separated text into words.\n\u003c/p\u003e",
          "module": "Penny.Cabin.TextFormat",
          "name": "txtWords",
          "package": "penny",
          "signature": "Text -\u003e Words",
          "source": "src/Penny-Cabin-TextFormat.html#txtWords",
          "type": "function"
        },
        "index": {
          "description": "Splits blank-separated text into words",
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "txtWords",
          "normalized": "Text-\u003eWords",
          "package": "penny",
          "partial": "Words",
          "signature": "Text-\u003eWords",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:txtWords"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "unLines",
          "package": "penny",
          "signature": "Seq Words",
          "source": "src/Penny-Cabin-TextFormat.html#Lines",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "unLines",
          "package": "penny",
          "partial": "Lines",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:unLines"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "unShortest",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-TextFormat.html#Shortest",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "unShortest",
          "package": "penny",
          "partial": "Shortest",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:unShortest"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "unTarget",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Cabin-TextFormat.html#Target",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "unTarget",
          "package": "penny",
          "partial": "Target",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:unTarget"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Cabin.TextFormat",
          "name": "unWords",
          "package": "penny",
          "signature": "Seq Text",
          "source": "src/Penny-Cabin-TextFormat.html#Words",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "unWords",
          "package": "penny",
          "partial": "Words",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:unWords"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWraps a sequence of words into a sequence of lines, where each\n line is no more than a given maximum number of characters long.\n\u003c/p\u003e\u003cp\u003eIf the maximum number of characters per line is less than 1,\n returns a Lines that is empty.\n\u003c/p\u003e\u003cp\u003eAn individual word will be split across multiple lines only if that\n word is too long to fit into a single line. No hyphenation is done;\n the word is simply broken across two lines.\n\u003c/p\u003e",
          "module": "Penny.Cabin.TextFormat",
          "name": "wordWrap",
          "package": "penny",
          "signature": "Int -\u003e Words -\u003e Lines",
          "source": "src/Penny-Cabin-TextFormat.html#wordWrap",
          "type": "function"
        },
        "index": {
          "description": "Wraps sequence of words into sequence of lines where each line is no more than given maximum number of characters long If the maximum number of characters per line is less than returns Lines that is empty An individual word will be split across multiple lines only if that word is too long to fit into single line No hyphenation is done the word is simply broken across two lines",
          "hierarchy": "Penny Cabin TextFormat",
          "module": "Penny.Cabin.TextFormat",
          "name": "wordWrap",
          "normalized": "Int-\u003eWords-\u003eLines",
          "package": "penny",
          "partial": "Wrap",
          "signature": "Int-\u003eWords-\u003eLines",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin-TextFormat.html#v:wordWrap"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCabin - Penny reports\n\u003c/p\u003e\u003cp\u003eCabin contains reports, or functions that take a list of postings\n and return a formatted Text to display data in a human-readable\n format.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Cabin",
          "name": "Cabin",
          "package": "penny",
          "source": "src/Penny-Cabin.html",
          "type": "module"
        },
        "index": {
          "description": "Cabin Penny reports Cabin contains reports or functions that take list of postings and return formatted Text to display data in human-readable format",
          "hierarchy": "Penny Cabin",
          "module": "Penny.Cabin",
          "name": "Cabin",
          "package": "penny",
          "partial": "Cabin",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Cabin.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "Interface",
          "package": "penny",
          "source": "src/Penny-Copper-Interface.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "Interface",
          "package": "penny",
          "partial": "Interface",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "BlankLine",
          "package": "penny",
          "source": "src/Penny-Copper-Interface.html#BlankLine",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "BlankLine",
          "package": "penny",
          "partial": "Blank Line",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#t:BlankLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "Comment",
          "package": "penny",
          "source": "src/Penny-Copper-Interface.html#Comment",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "Comment",
          "package": "penny",
          "partial": "Comment",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#t:Comment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "LedgerItem",
          "package": "penny",
          "source": "src/Penny-Copper-Interface.html#LedgerItem",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "LedgerItem",
          "package": "penny",
          "partial": "Ledger Item",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#t:LedgerItem"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ParsedItem",
          "package": "penny",
          "source": "src/Penny-Copper-Interface.html#ParsedItem",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ParsedItem",
          "package": "penny",
          "partial": "Parsed Item",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#t:ParsedItem"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ParsedTopLine",
          "package": "penny",
          "source": "src/Penny-Copper-Interface.html#ParsedTopLine",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ParsedTopLine",
          "package": "penny",
          "partial": "Parsed Top Line",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#t:ParsedTopLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ParsedTxn",
          "package": "penny",
          "source": "src/Penny-Copper-Interface.html#ParsedTxn",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ParsedTxn",
          "package": "penny",
          "partial": "Parsed Txn",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#t:ParsedTxn"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "Parser",
          "package": "penny",
          "source": "src/Penny-Copper-Interface.html#Parser",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "Parser",
          "package": "penny",
          "partial": "Parser",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "BlankLine",
          "package": "penny",
          "signature": "BlankLine",
          "source": "src/Penny-Copper-Interface.html#BlankLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "BlankLine",
          "package": "penny",
          "partial": "Blank Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:BlankLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "Comment",
          "package": "penny",
          "signature": "Comment",
          "source": "src/Penny-Copper-Interface.html#Comment",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "Comment",
          "package": "penny",
          "partial": "Comment",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:Comment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ParsedTopLine",
          "package": "penny",
          "signature": "ParsedTopLine",
          "source": "src/Penny-Copper-Interface.html#ParsedTopLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ParsedTopLine",
          "package": "penny",
          "partial": "Parsed Top Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:ParsedTopLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ptlDateTime",
          "package": "penny",
          "signature": "DateTime",
          "source": "src/Penny-Copper-Interface.html#ParsedTopLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ptlDateTime",
          "package": "penny",
          "partial": "Date Time",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:ptlDateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ptlFlag",
          "package": "penny",
          "signature": "Maybe Flag",
          "source": "src/Penny-Copper-Interface.html#ParsedTopLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ptlFlag",
          "package": "penny",
          "partial": "Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:ptlFlag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ptlMemo",
          "package": "penny",
          "signature": "Maybe (Memo, TopMemoLine)",
          "source": "src/Penny-Copper-Interface.html#ParsedTopLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ptlMemo",
          "normalized": "Maybe(Memo,TopMemoLine)",
          "package": "penny",
          "partial": "Memo",
          "signature": "Maybe(Memo,TopMemoLine)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:ptlMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ptlNumber",
          "package": "penny",
          "signature": "Maybe Number",
          "source": "src/Penny-Copper-Interface.html#ParsedTopLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ptlNumber",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:ptlNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ptlPayee",
          "package": "penny",
          "signature": "Maybe Payee",
          "source": "src/Penny-Copper-Interface.html#ParsedTopLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ptlPayee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:ptlPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "ptlTopLineLine",
          "package": "penny",
          "signature": "TopLineLine",
          "source": "src/Penny-Copper-Interface.html#ParsedTopLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "ptlTopLineLine",
          "package": "penny",
          "partial": "Top Line Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:ptlTopLineLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eChanges a ledger item to remove metadata.\n\u003c/p\u003e",
          "module": "Penny.Copper.Interface",
          "name": "stripMeta",
          "package": "penny",
          "signature": "LedgerItem -\u003e S4 (TopLineCore, Ents PostingCore) PricePoint Comment BlankLine",
          "source": "src/Penny-Copper-Interface.html#stripMeta",
          "type": "function"
        },
        "index": {
          "description": "Changes ledger item to remove metadata",
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "stripMeta",
          "normalized": "LedgerItem-\u003eS(TopLineCore,Ents PostingCore)PricePoint Comment BlankLine",
          "package": "penny",
          "partial": "Meta",
          "signature": "LedgerItem-\u003eS(TopLineCore,Ents PostingCore)PricePoint Comment BlankLine",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:stripMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "toTopLineCore",
          "package": "penny",
          "signature": "ParsedTopLine -\u003e TopLineCore",
          "source": "src/Penny-Copper-Interface.html#toTopLineCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "toTopLineCore",
          "normalized": "ParsedTopLine-\u003eTopLineCore",
          "package": "penny",
          "partial": "Top Line Core",
          "signature": "ParsedTopLine-\u003eTopLineCore",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:toTopLineCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Interface",
          "name": "unComment",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Copper-Interface.html#Comment",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Interface",
          "module": "Penny.Copper.Interface",
          "name": "unComment",
          "package": "penny",
          "partial": "Comment",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Interface.html#v:unComment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eParsec parsers for the ledger file format.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Copper.Parsec",
          "name": "Parsec",
          "package": "penny",
          "source": "src/Penny-Copper-Parsec.html",
          "type": "module"
        },
        "index": {
          "description": "Parsec parsers for the ledger file format",
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "Parsec",
          "package": "penny",
          "partial": "Parsec",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "amount",
          "package": "penny",
          "signature": "Parser (Amount QtyRep, Side, SpaceBetween)",
          "source": "src/Penny-Copper-Parsec.html#amount",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "amount",
          "normalized": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "package": "penny",
          "signature": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "blankLine",
          "package": "penny",
          "signature": "Parser ()",
          "source": "src/Penny-Copper-Parsec.html#blankLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "blankLine",
          "normalized": "Parser()",
          "package": "penny",
          "partial": "Line",
          "signature": "Parser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:blankLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "comment",
          "package": "penny",
          "signature": "Parser Comment",
          "source": "src/Penny-Copper-Parsec.html#comment",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "comment",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:comment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "credit",
          "package": "penny",
          "signature": "Parser DrCr",
          "source": "src/Penny-Copper-Parsec.html#credit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "credit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:credit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "date",
          "package": "penny",
          "signature": "Parser Day",
          "source": "src/Penny-Copper-Parsec.html#date",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "date",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "dateTime",
          "package": "penny",
          "signature": "Parser DateTime",
          "source": "src/Penny-Copper-Parsec.html#dateTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "dateTime",
          "package": "penny",
          "partial": "Time",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:dateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "day",
          "package": "penny",
          "signature": "Parser Int",
          "source": "src/Penny-Copper-Parsec.html#day",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "day",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:day"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "debit",
          "package": "penny",
          "signature": "Parser DrCr",
          "source": "src/Penny-Copper-Parsec.html#debit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "debit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:debit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "digit",
          "package": "penny",
          "signature": "Parser Digit",
          "source": "src/Penny-Copper-Parsec.html#digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "digit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:digit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "digitList",
          "package": "penny",
          "signature": "Parser DigitList",
          "source": "src/Penny-Copper-Parsec.html#digitList",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "digitList",
          "package": "penny",
          "partial": "List",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:digitList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses a sequence of grouped digits, followed by an optional\n radix point, followed by an optional additional sequence of grouped\n digits.  Numbers such as .25 are not allowed; instead,\n the user must enter 0.25. Also not allowed is something like\n \u003ca\u003e25.\u003c/a\u003e. Intsead, if the user enters a radix, there must be a\n character after it.\n\u003c/p\u003e",
          "module": "Penny.Copper.Parsec",
          "name": "digitsRadDigits",
          "package": "penny",
          "signature": "Parser a-\u003e Parser void-\u003e Parser (GroupedDigits a, Maybe (GroupedDigits a))",
          "type": "function"
        },
        "index": {
          "description": "Parses sequence of grouped digits followed by an optional radix point followed by an optional additional sequence of grouped digits Numbers such as are not allowed instead the user must enter Also not allowed is something like Intsead if the user enters radix there must be character after it",
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "digitsRadDigits",
          "normalized": "Parser a-\u003eParser b-\u003eParser(GroupedDigits a,Maybe(GroupedDigits a))",
          "package": "penny",
          "partial": "Rad Digits",
          "signature": "Parser a-\u003eParser void-\u003eParser(GroupedDigits a,Maybe(GroupedDigits a))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:digitsRadDigits"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "drCr",
          "package": "penny",
          "signature": "Parser DrCr",
          "source": "src/Penny-Copper-Parsec.html#drCr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "drCr",
          "package": "penny",
          "partial": "Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:drCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "entry",
          "package": "penny",
          "signature": "Parser (Entry QtyRep, Side, SpaceBetween)",
          "source": "src/Penny-Copper-Parsec.html#entry",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "entry",
          "normalized": "Parser(Entry QtyRep,Side,SpaceBetween)",
          "package": "penny",
          "signature": "Parser(Entry QtyRep,Side,SpaceBetween)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:entry"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "flag",
          "package": "penny",
          "signature": "Parser Flag",
          "source": "src/Penny-Copper-Parsec.html#flag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "flag",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "flagNumPayee",
          "package": "penny",
          "signature": "Parser (Maybe Flag, Maybe Number, Maybe Payee)",
          "source": "src/Penny-Copper-Parsec.html#flagNumPayee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "flagNumPayee",
          "normalized": "Parser(Maybe Flag,Maybe Number,Maybe Payee)",
          "package": "penny",
          "partial": "Num Payee",
          "signature": "Parser(Maybe Flag,Maybe Number,Maybe Payee)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:flagNumPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "fromCmdty",
          "package": "penny",
          "signature": "Parser From",
          "source": "src/Penny-Copper-Parsec.html#fromCmdty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "fromCmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:fromCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "getFileContentsStdin",
          "package": "penny",
          "signature": "String -\u003e IO (Filename, Text)",
          "source": "src/Penny-Copper-Parsec.html#getFileContentsStdin",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "getFileContentsStdin",
          "normalized": "String-\u003eIO(Filename,Text)",
          "package": "penny",
          "partial": "File Contents Stdin",
          "signature": "String-\u003eIO(Filename,Text)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:getFileContentsStdin"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "getStdin",
          "package": "penny",
          "signature": "IO Text",
          "source": "src/Penny-Copper-Parsec.html#getStdin",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "getStdin",
          "package": "penny",
          "partial": "Stdin",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:getStdin"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "groupPart",
          "package": "penny",
          "signature": "Parser a -\u003e Parser (a, DigitList)",
          "source": "src/Penny-Copper-Parsec.html#groupPart",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "groupPart",
          "normalized": "Parser a-\u003eParser(a,DigitList)",
          "package": "penny",
          "partial": "Part",
          "signature": "Parser a-\u003eParser(a,DigitList)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:groupPart"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "groupedDigits",
          "package": "penny",
          "signature": "Parser a -\u003e Parser (GroupedDigits a)",
          "source": "src/Penny-Copper-Parsec.html#groupedDigits",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "groupedDigits",
          "normalized": "Parser a-\u003eParser(GroupedDigits a)",
          "package": "penny",
          "partial": "Digits",
          "signature": "Parser a-\u003eParser(GroupedDigits a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:groupedDigits"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "handleParseError",
          "package": "penny",
          "signature": "String-\u003e String-\u003e IO a",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "handleParseError",
          "normalized": "String-\u003eString-\u003eIO a",
          "package": "penny",
          "partial": "Parse Error",
          "signature": "String-\u003eString-\u003eIO a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:handleParseError"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "hours",
          "package": "penny",
          "signature": "Parser Hours",
          "source": "src/Penny-Copper-Parsec.html#hours",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "hours",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:hours"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "item",
          "package": "penny",
          "signature": "Parser ParsedItem",
          "source": "src/Penny-Copper-Parsec.html#item",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "item",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:item"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "ledgerAcct",
          "package": "penny",
          "signature": "Parser Account",
          "source": "src/Penny-Copper-Parsec.html#ledgerAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "ledgerAcct",
          "package": "penny",
          "partial": "Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:ledgerAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "leftCmdtyLvl1Amt",
          "package": "penny",
          "signature": "Parser (Amount QtyRep, Side, SpaceBetween)",
          "source": "src/Penny-Copper-Parsec.html#leftCmdtyLvl1Amt",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "leftCmdtyLvl1Amt",
          "normalized": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "package": "penny",
          "partial": "Cmdty Lvl Amt",
          "signature": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:leftCmdtyLvl1Amt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "leftCmdtyLvl3Amt",
          "package": "penny",
          "signature": "Parser (Amount QtyRep, Side, SpaceBetween)",
          "source": "src/Penny-Copper-Parsec.html#leftCmdtyLvl3Amt",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "leftCmdtyLvl3Amt",
          "normalized": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "package": "penny",
          "partial": "Cmdty Lvl Amt",
          "signature": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:leftCmdtyLvl3Amt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "leftSideCmdtyAmt",
          "package": "penny",
          "signature": "Parser (Amount QtyRep, Side, SpaceBetween)",
          "source": "src/Penny-Copper-Parsec.html#leftSideCmdtyAmt",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "leftSideCmdtyAmt",
          "normalized": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "package": "penny",
          "partial": "Side Cmdty Amt",
          "signature": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:leftSideCmdtyAmt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lineNum",
          "package": "penny",
          "signature": "Parser Int",
          "source": "src/Penny-Copper-Parsec.html#lineNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lineNum",
          "package": "penny",
          "partial": "Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lineNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl1Acct",
          "package": "penny",
          "signature": "Parser Account",
          "source": "src/Penny-Copper-Parsec.html#lvl1Acct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl1Acct",
          "package": "penny",
          "partial": "Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl1Acct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl1Cmdty",
          "package": "penny",
          "signature": "Parser Commodity",
          "source": "src/Penny-Copper-Parsec.html#lvl1Cmdty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl1Cmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl1Cmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl1FirstSubAcct",
          "package": "penny",
          "signature": "Parser SubAccount",
          "source": "src/Penny-Copper-Parsec.html#lvl1FirstSubAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl1FirstSubAcct",
          "package": "penny",
          "partial": "First Sub Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl1FirstSubAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl1OtherSubAcct",
          "package": "penny",
          "signature": "Parser SubAccount",
          "source": "src/Penny-Copper-Parsec.html#lvl1OtherSubAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl1OtherSubAcct",
          "package": "penny",
          "partial": "Other Sub Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl1OtherSubAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl1Payee",
          "package": "penny",
          "signature": "Parser Payee",
          "source": "src/Penny-Copper-Parsec.html#lvl1Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl1Payee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl1Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl1SubAcct",
          "package": "penny",
          "signature": "Parser SubAccount",
          "source": "src/Penny-Copper-Parsec.html#lvl1SubAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl1SubAcct",
          "package": "penny",
          "partial": "Sub Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl1SubAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl2Acct",
          "package": "penny",
          "signature": "Parser Account",
          "source": "src/Penny-Copper-Parsec.html#lvl2Acct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl2Acct",
          "package": "penny",
          "partial": "Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl2Acct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl2Cmdty",
          "package": "penny",
          "signature": "Parser Commodity",
          "source": "src/Penny-Copper-Parsec.html#lvl2Cmdty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl2Cmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl2Cmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl2FirstSubAcct",
          "package": "penny",
          "signature": "Parser SubAccount",
          "source": "src/Penny-Copper-Parsec.html#lvl2FirstSubAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl2FirstSubAcct",
          "package": "penny",
          "partial": "First Sub Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl2FirstSubAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl2OtherSubAcct",
          "package": "penny",
          "signature": "Parser SubAccount",
          "source": "src/Penny-Copper-Parsec.html#lvl2OtherSubAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl2OtherSubAcct",
          "package": "penny",
          "partial": "Other Sub Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl2OtherSubAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl2Payee",
          "package": "penny",
          "signature": "Parser Payee",
          "source": "src/Penny-Copper-Parsec.html#lvl2Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl2Payee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl2Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "lvl3Cmdty",
          "package": "penny",
          "signature": "Parser Commodity",
          "source": "src/Penny-Copper-Parsec.html#lvl3Cmdty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "lvl3Cmdty",
          "package": "penny",
          "partial": "Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:lvl3Cmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "minutes",
          "package": "penny",
          "signature": "Parser Minutes",
          "source": "src/Penny-Copper-Parsec.html#minutes",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "minutes",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:minutes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "month",
          "package": "penny",
          "signature": "Parser Int",
          "source": "src/Penny-Copper-Parsec.html#month",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "month",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:month"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "nonEmpty",
          "package": "penny",
          "signature": "Parser a -\u003e Parser (NonEmpty a)",
          "source": "src/Penny-Copper-Parsec.html#nonEmpty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "nonEmpty",
          "normalized": "Parser a-\u003eParser(NonEmpty a)",
          "package": "penny",
          "partial": "Empty",
          "signature": "Parser a-\u003eParser(NonEmpty a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:nonEmpty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "number",
          "package": "penny",
          "signature": "Parser Number",
          "source": "src/Penny-Copper-Parsec.html#number",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "number",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "parse",
          "package": "penny",
          "signature": "Text-\u003e Either String [ParsedItem]",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "parse",
          "normalized": "Text-\u003eEither String[ParsedItem]",
          "package": "penny",
          "signature": "Text-\u003eEither String[ParsedItem]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:parse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "parseFromFilename",
          "package": "penny",
          "signature": "String -\u003e IO (Filename, [ParsedItem])",
          "source": "src/Penny-Copper-Parsec.html#parseFromFilename",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "parseFromFilename",
          "normalized": "String-\u003eIO(Filename,[ParsedItem])",
          "package": "penny",
          "partial": "From Filename",
          "signature": "String-\u003eIO(Filename,[ParsedItem])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:parseFromFilename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "parseStdinOnly",
          "package": "penny",
          "signature": "IO (Filename, [ParsedItem])",
          "source": "src/Penny-Copper-Parsec.html#parseStdinOnly",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "parseStdinOnly",
          "normalized": "IO(Filename,[ParsedItem])",
          "package": "penny",
          "partial": "Stdin Only",
          "signature": "IO(Filename,[ParsedItem])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:parseStdinOnly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "posting",
          "package": "penny",
          "signature": "Parser (PostingCore, PostingLine, Maybe (Entry QtyRep))",
          "source": "src/Penny-Copper-Parsec.html#posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "posting",
          "normalized": "Parser(PostingCore,PostingLine,Maybe(Entry QtyRep))",
          "package": "penny",
          "signature": "Parser(PostingCore,PostingLine,Maybe(Entry QtyRep))",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:posting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "postingAcct",
          "package": "penny",
          "signature": "Parser Account",
          "source": "src/Penny-Copper-Parsec.html#postingAcct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "postingAcct",
          "package": "penny",
          "partial": "Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:postingAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "postingMemo",
          "package": "penny",
          "signature": "Parser Memo",
          "source": "src/Penny-Copper-Parsec.html#postingMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "postingMemo",
          "package": "penny",
          "partial": "Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:postingMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "postingMemoLine",
          "package": "penny",
          "signature": "Parser Text",
          "source": "src/Penny-Copper-Parsec.html#postingMemoLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "postingMemoLine",
          "package": "penny",
          "partial": "Memo Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:postingMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "price",
          "package": "penny",
          "signature": "Parser PricePoint",
          "source": "src/Penny-Copper-Parsec.html#price",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "price",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:price"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "qtyRep",
          "package": "penny",
          "signature": "Parser QtyRep",
          "source": "src/Penny-Copper-Parsec.html#qtyRep",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "qtyRep",
          "package": "penny",
          "partial": "Rep",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:qtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses a QtyRep that is quoted with square braces. This is a\n QtyRep that uses a comma as the radix point.\n\u003c/p\u003e",
          "module": "Penny.Copper.Parsec",
          "name": "quotedCommaQtyRep",
          "package": "penny",
          "signature": "Parser QtyRep",
          "source": "src/Penny-Copper-Parsec.html#quotedCommaQtyRep",
          "type": "function"
        },
        "index": {
          "description": "Parses QtyRep that is quoted with square braces This is QtyRep that uses comma as the radix point",
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "quotedCommaQtyRep",
          "package": "penny",
          "partial": "Comma Qty Rep",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:quotedCommaQtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "quotedLvl1Acct",
          "package": "penny",
          "signature": "Parser Account",
          "source": "src/Penny-Copper-Parsec.html#quotedLvl1Acct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "quotedLvl1Acct",
          "package": "penny",
          "partial": "Lvl Acct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:quotedLvl1Acct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "quotedLvl1Cmdty",
          "package": "penny",
          "signature": "Parser Commodity",
          "source": "src/Penny-Copper-Parsec.html#quotedLvl1Cmdty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "quotedLvl1Cmdty",
          "package": "penny",
          "partial": "Lvl Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:quotedLvl1Cmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "quotedLvl1Payee",
          "package": "penny",
          "signature": "Parser Payee",
          "source": "src/Penny-Copper-Parsec.html#quotedLvl1Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "quotedLvl1Payee",
          "package": "penny",
          "partial": "Lvl Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:quotedLvl1Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses a QtyRep that is quoted with curly braces. This is a\n QtyRep that uses a period as the radix point. Unlike an unquoted\n QtyRep this can include spaces.\n\u003c/p\u003e",
          "module": "Penny.Copper.Parsec",
          "name": "quotedPeriodQtyRep",
          "package": "penny",
          "signature": "Parser QtyRep",
          "source": "src/Penny-Copper-Parsec.html#quotedPeriodQtyRep",
          "type": "function"
        },
        "index": {
          "description": "Parses QtyRep that is quoted with curly braces This is QtyRep that uses period as the radix point Unlike an unquoted QtyRep this can include spaces",
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "quotedPeriodQtyRep",
          "package": "penny",
          "partial": "Period Qty Rep",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:quotedPeriodQtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "rightSideCmdty",
          "package": "penny",
          "signature": "Parser Commodity",
          "source": "src/Penny-Copper-Parsec.html#rightSideCmdty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "rightSideCmdty",
          "package": "penny",
          "partial": "Side Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:rightSideCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "rightSideCmdtyAmt",
          "package": "penny",
          "signature": "Parser (Amount QtyRep, Side, SpaceBetween)",
          "source": "src/Penny-Copper-Parsec.html#rightSideCmdtyAmt",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "rightSideCmdtyAmt",
          "normalized": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "package": "penny",
          "partial": "Side Cmdty Amt",
          "signature": "Parser(Amount QtyRep,Side,SpaceBetween)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:rightSideCmdtyAmt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "seconds",
          "package": "penny",
          "signature": "Parser Seconds",
          "source": "src/Penny-Copper-Parsec.html#seconds",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "seconds",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:seconds"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "skipWhite",
          "package": "penny",
          "signature": "Parser ()",
          "source": "src/Penny-Copper-Parsec.html#skipWhite",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "skipWhite",
          "normalized": "Parser()",
          "package": "penny",
          "partial": "White",
          "signature": "Parser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:skipWhite"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "spaceBetween",
          "package": "penny",
          "signature": "Parser SpaceBetween",
          "source": "src/Penny-Copper-Parsec.html#spaceBetween",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "spaceBetween",
          "package": "penny",
          "partial": "Between",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:spaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "tag",
          "package": "penny",
          "signature": "Parser Tag",
          "source": "src/Penny-Copper-Parsec.html#tag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "tag",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:tag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "tags",
          "package": "penny",
          "signature": "Parser Tags",
          "source": "src/Penny-Copper-Parsec.html#tags",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "tags",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "time",
          "package": "penny",
          "signature": "Parser (Hours, Minutes, Maybe Seconds)",
          "source": "src/Penny-Copper-Parsec.html#time",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "time",
          "normalized": "Parser(Hours,Minutes,Maybe Seconds)",
          "package": "penny",
          "signature": "Parser(Hours,Minutes,Maybe Seconds)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:time"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "timeWithZone",
          "package": "penny",
          "signature": "Parser (Hours, Minutes, Maybe Seconds, Maybe TimeZoneOffset)",
          "source": "src/Penny-Copper-Parsec.html#timeWithZone",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "timeWithZone",
          "normalized": "Parser(Hours,Minutes,Maybe Seconds,Maybe TimeZoneOffset)",
          "package": "penny",
          "partial": "With Zone",
          "signature": "Parser(Hours,Minutes,Maybe Seconds,Maybe TimeZoneOffset)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:timeWithZone"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "timeZone",
          "package": "penny",
          "signature": "Parser TimeZoneOffset",
          "source": "src/Penny-Copper-Parsec.html#timeZone",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "timeZone",
          "package": "penny",
          "partial": "Zone",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:timeZone"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "topLine",
          "package": "penny",
          "signature": "Parser ParsedTopLine",
          "source": "src/Penny-Copper-Parsec.html#topLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "topLine",
          "package": "penny",
          "partial": "Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:topLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "topLineFlagNum",
          "package": "penny",
          "signature": "Parser (Maybe Flag, Maybe Number)",
          "source": "src/Penny-Copper-Parsec.html#topLineFlagNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "topLineFlagNum",
          "normalized": "Parser(Maybe Flag,Maybe Number)",
          "package": "penny",
          "partial": "Line Flag Num",
          "signature": "Parser(Maybe Flag,Maybe Number)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:topLineFlagNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "topLinePayee",
          "package": "penny",
          "signature": "Parser Payee",
          "source": "src/Penny-Copper-Parsec.html#topLinePayee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "topLinePayee",
          "package": "penny",
          "partial": "Line Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:topLinePayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "transaction",
          "package": "penny",
          "signature": "Parser ParsedTxn",
          "source": "src/Penny-Copper-Parsec.html#transaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "transaction",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:transaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "transactionMemo",
          "package": "penny",
          "signature": "Parser (TopMemoLine, Memo)",
          "source": "src/Penny-Copper-Parsec.html#transactionMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "transactionMemo",
          "normalized": "Parser(TopMemoLine,Memo)",
          "package": "penny",
          "partial": "Memo",
          "signature": "Parser(TopMemoLine,Memo)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:transactionMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "transactionMemoLine",
          "package": "penny",
          "signature": "Parser Text",
          "source": "src/Penny-Copper-Parsec.html#transactionMemoLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "transactionMemoLine",
          "package": "penny",
          "partial": "Memo Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:transactionMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "tzNumber",
          "package": "penny",
          "signature": "Parser Int",
          "source": "src/Penny-Copper-Parsec.html#tzNumber",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "tzNumber",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:tzNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "tzSign",
          "package": "penny",
          "signature": "Parser (Int -\u003e Int)",
          "source": "src/Penny-Copper-Parsec.html#tzSign",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "tzSign",
          "normalized": "Parser(Int-\u003eInt)",
          "package": "penny",
          "partial": "Sign",
          "signature": "Parser(Int-\u003eInt)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:tzSign"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses an unquoted QtyRep.\n\u003c/p\u003e",
          "module": "Penny.Copper.Parsec",
          "name": "unquotedQtyRep",
          "package": "penny",
          "signature": "Parser QtyRep",
          "source": "src/Penny-Copper-Parsec.html#unquotedQtyRep",
          "type": "function"
        },
        "index": {
          "description": "Parses an unquoted QtyRep",
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "unquotedQtyRep",
          "package": "penny",
          "partial": "Qty Rep",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:unquotedQtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses an unquoted QtyRep that also has spaces. Use only when\n parsing command line items.\n\u003c/p\u003e",
          "module": "Penny.Copper.Parsec",
          "name": "unquotedQtyRepWithSpaces",
          "package": "penny",
          "signature": "Parser QtyRep",
          "source": "src/Penny-Copper-Parsec.html#unquotedQtyRepWithSpaces",
          "type": "function"
        },
        "index": {
          "description": "Parses an unquoted QtyRep that also has spaces Use only when parsing command line items",
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "unquotedQtyRepWithSpaces",
          "package": "penny",
          "partial": "Qty Rep With Spaces",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:unquotedQtyRepWithSpaces"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Parsec",
          "name": "year",
          "package": "penny",
          "signature": "Parser Integer",
          "source": "src/Penny-Copper-Parsec.html#year",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Parsec",
          "module": "Penny.Copper.Parsec",
          "name": "year",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Parsec.html#v:year"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eRenders Penny data in a format that can be parsed by\n \u003ca\u003ePenny.Copper.Parsec\u003c/a\u003e. These functions render text that is\n compliant with the EBNF grammar which is at\n \u003ccode\u003edoc/ledger-grammar.org\u003c/code\u003e.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Copper.Render",
          "name": "Render",
          "package": "penny",
          "source": "src/Penny-Copper-Render.html",
          "type": "module"
        },
        "index": {
          "description": "Renders Penny data in format that can be parsed by Penny.Copper.Parsec These functions render text that is compliant with the EBNF grammar which is at doc ledger-grammar.org",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "Render",
          "package": "penny",
          "partial": "Render",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRender an Amount. The Format is required so that the commodity\n can be displayed in the right place.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "amount",
          "package": "penny",
          "signature": "Maybe (Amount Qty -\u003e S3 Radix PeriodGrp CommaGrp)-\u003e Maybe Side-\u003e Maybe SpaceBetween-\u003e Either (Amount QtyRep) (Amount Qty)-\u003e Maybe Text",
          "type": "function"
        },
        "index": {
          "description": "Render an Amount The Format is required so that the commodity can be displayed in the right place",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "amount",
          "normalized": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003eMaybe Side-\u003eMaybe SpaceBetween-\u003eEither(Amount QtyRep)(Amount Qty)-\u003eMaybe Text",
          "package": "penny",
          "signature": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003eMaybe Side-\u003eMaybe SpaceBetween-\u003eEither(Amount QtyRep)(Amount Qty)-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "comment",
          "package": "penny",
          "signature": "Comment -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#comment",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "comment",
          "normalized": "Comment-\u003eMaybe Text",
          "package": "penny",
          "signature": "Comment-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:comment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRender a DateTime. The day is always printed. If the time zone\n offset is not zero, then the time and time zone offset are both\n printed. If the time zone offset is zero, then the hours and\n minutes are printed, but only if the time is not midnight. If the\n seconds are not zero, they are also printed.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "dateTime",
          "package": "penny",
          "signature": "DateTime -\u003e Text",
          "source": "src/Penny-Copper-Render.html#dateTime",
          "type": "function"
        },
        "index": {
          "description": "Render DateTime The day is always printed If the time zone offset is not zero then the time and time zone offset are both printed If the time zone offset is zero then the hours and minutes are printed but only if the time is not midnight If the seconds are not zero they are also printed",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "dateTime",
          "normalized": "DateTime-\u003eText",
          "package": "penny",
          "partial": "Time",
          "signature": "DateTime-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:dateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "entry",
          "package": "penny",
          "signature": "Maybe (Amount Qty -\u003e S3 Radix PeriodGrp CommaGrp)-\u003e Maybe Side-\u003e Maybe SpaceBetween-\u003e Either (Entry QtyRep) (Entry Qty)-\u003e Maybe Text",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "entry",
          "normalized": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003eMaybe Side-\u003eMaybe SpaceBetween-\u003eEither(Entry QtyRep)(Entry Qty)-\u003eMaybe Text",
          "package": "penny",
          "signature": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003eMaybe Side-\u003eMaybe SpaceBetween-\u003eEither(Entry QtyRep)(Entry Qty)-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:entry"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "flag",
          "package": "penny",
          "signature": "Flag -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#flag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "flag",
          "normalized": "Flag-\u003eMaybe Text",
          "package": "penny",
          "signature": "Flag-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "formatter",
          "package": "penny",
          "signature": "Bool-\u003e Text-\u003e Text-\u003e Text-\u003e Text-\u003e Text-\u003e Text-\u003e Text-\u003e Text",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "formatter",
          "normalized": "Bool-\u003eText-\u003eText-\u003eText-\u003eText-\u003eText-\u003eText-\u003eText-\u003eText",
          "package": "penny",
          "signature": "Bool-\u003eText-\u003eText-\u003eText-\u003eText-\u003eText-\u003eText-\u003eText-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:formatter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "hasSpace",
          "package": "penny",
          "signature": "WholeOrFrac (GroupedDigits PeriodGrp) -\u003e Bool",
          "source": "src/Penny-Copper-Render.html#hasSpace",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "hasSpace",
          "normalized": "WholeOrFrac(GroupedDigits PeriodGrp)-\u003eBool",
          "package": "penny",
          "partial": "Space",
          "signature": "WholeOrFrac(GroupedDigits PeriodGrp)-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:hasSpace"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "hoursMinsSecsZone",
          "package": "penny",
          "signature": "Hours -\u003e Minutes -\u003e Seconds -\u003e TimeZoneOffset -\u003e Text",
          "source": "src/Penny-Copper-Render.html#hoursMinsSecsZone",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "hoursMinsSecsZone",
          "normalized": "Hours-\u003eMinutes-\u003eSeconds-\u003eTimeZoneOffset-\u003eText",
          "package": "penny",
          "partial": "Mins Secs Zone",
          "signature": "Hours-\u003eMinutes-\u003eSeconds-\u003eTimeZoneOffset-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:hoursMinsSecsZone"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "isAcctLvl1",
          "package": "penny",
          "signature": "Account -\u003e Bool",
          "source": "src/Penny-Copper-Render.html#isAcctLvl1",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "isAcctLvl1",
          "normalized": "Account-\u003eBool",
          "package": "penny",
          "partial": "Acct Lvl",
          "signature": "Account-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:isAcctLvl1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "isAcctLvl2",
          "package": "penny",
          "signature": "Account -\u003e Bool",
          "source": "src/Penny-Copper-Render.html#isAcctLvl2",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "isAcctLvl2",
          "normalized": "Account-\u003eBool",
          "package": "penny",
          "partial": "Acct Lvl",
          "signature": "Account-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:isAcctLvl2"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "isFirstSubAcctLvl2",
          "package": "penny",
          "signature": "SubAccount -\u003e Bool",
          "source": "src/Penny-Copper-Render.html#isFirstSubAcctLvl2",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "isFirstSubAcctLvl2",
          "normalized": "SubAccount-\u003eBool",
          "package": "penny",
          "partial": "First Sub Acct Lvl",
          "signature": "SubAccount-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:isFirstSubAcctLvl2"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "isOtherSubAcctLvl2",
          "package": "penny",
          "signature": "SubAccount -\u003e Bool",
          "source": "src/Penny-Copper-Render.html#isOtherSubAcctLvl2",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "isOtherSubAcctLvl2",
          "normalized": "SubAccount-\u003eBool",
          "package": "penny",
          "partial": "Other Sub Acct Lvl",
          "signature": "SubAccount-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:isOtherSubAcctLvl2"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIs True if a sub account can be rendered at Level 1;\n False otherwise.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "isSubAcctLvl1",
          "package": "penny",
          "signature": "SubAccount -\u003e Bool",
          "source": "src/Penny-Copper-Render.html#isSubAcctLvl1",
          "type": "function"
        },
        "index": {
          "description": "Is True if sub account can be rendered at Level False otherwise",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "isSubAcctLvl1",
          "normalized": "SubAccount-\u003eBool",
          "package": "penny",
          "partial": "Sub Acct Lvl",
          "signature": "SubAccount-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:isSubAcctLvl1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Copper.Render\",\"Penny.Copper\"]",
          "name": "item",
          "package": "penny",
          "signature": "Maybe (Amount Qty -\u003e S3 Radix PeriodGrp CommaGrp)-\u003e S4 (TopLineCore, Ents PostingCore) PricePoint Comment BlankLine-\u003e Maybe Text",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:item\",\"http://hackage.haskell.org/package/penny/docs/Penny-Copper.html#v:item\"]"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "item",
          "normalized": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003eS(TopLineCore,Ents PostingCore)PricePoint Comment BlankLine-\u003eMaybe Text",
          "package": "penny",
          "signature": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003eS(TopLineCore,Ents PostingCore)PricePoint Comment BlankLine-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:item"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShows an account, with the minimum level of quoting\n possible. Fails with an error if any one of the characters in the\n account name does not satisfy the \u003ccode\u003elvl1Char\u003c/code\u003e predicate. Otherwise\n returns a rendered account, quoted if necessary.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "ledgerAcct",
          "package": "penny",
          "signature": "Account -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#ledgerAcct",
          "type": "function"
        },
        "index": {
          "description": "Shows an account with the minimum level of quoting possible Fails with an error if any one of the characters in the account name does not satisfy the lvl1Char predicate Otherwise returns rendered account quoted if necessary",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "ledgerAcct",
          "normalized": "Account-\u003eMaybe Text",
          "package": "penny",
          "partial": "Acct",
          "signature": "Account-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:ledgerAcct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "lvl2Acct",
          "package": "penny",
          "signature": "Account -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#lvl2Acct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "lvl2Acct",
          "normalized": "Account-\u003eMaybe Text",
          "package": "penny",
          "partial": "Acct",
          "signature": "Account-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:lvl2Acct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRender a Level 2 commodity. Fails if the first character is not a\n letter or a symbol, or if any other character is a space.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "lvl2Cmdty",
          "package": "penny",
          "signature": "Commodity -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#lvl2Cmdty",
          "type": "function"
        },
        "index": {
          "description": "Render Level commodity Fails if the first character is not letter or symbol or if any other character is space",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "lvl2Cmdty",
          "normalized": "Commodity-\u003eMaybe Text",
          "package": "penny",
          "partial": "Cmdty",
          "signature": "Commodity-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:lvl2Cmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "lvl2Payee",
          "package": "penny",
          "signature": "Payee -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#lvl2Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "lvl2Payee",
          "normalized": "Payee-\u003eMaybe Text",
          "package": "penny",
          "partial": "Payee",
          "signature": "Payee-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:lvl2Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRender a Level 3 commodity. Fails if any character is not a\n letter or a symbol.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "lvl3Cmdty",
          "package": "penny",
          "signature": "Commodity -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#lvl3Cmdty",
          "type": "function"
        },
        "index": {
          "description": "Render Level commodity Fails if any character is not letter or symbol",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "lvl3Cmdty",
          "normalized": "Commodity-\u003eMaybe Text",
          "package": "penny",
          "partial": "Cmdty",
          "signature": "Commodity-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:lvl3Cmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "number",
          "package": "penny",
          "signature": "Number -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#number",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "number",
          "normalized": "Number-\u003eMaybe Text",
          "package": "penny",
          "signature": "Number-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "pad2",
          "package": "penny",
          "signature": "Text -\u003e Text",
          "source": "src/Penny-Copper-Render.html#pad2",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "pad2",
          "normalized": "Text-\u003eText",
          "package": "penny",
          "signature": "Text-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:pad2"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "pad4",
          "package": "penny",
          "signature": "Text -\u003e Text",
          "source": "src/Penny-Copper-Render.html#pad4",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "pad4",
          "normalized": "Text-\u003eText",
          "package": "penny",
          "signature": "Text-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:pad4"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "payee",
          "package": "penny",
          "signature": "Payee -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "payee",
          "normalized": "Payee-\u003eMaybe Text",
          "package": "penny",
          "signature": "Payee-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRenders a Posting. Fails if any of the components\n fail to render. In addition, if the unverified Posting has an\n Entry, a Format must be provided, otherwise render fails.\n\u003c/p\u003e\u003cp\u003eThe columns look like this. Column numbers begin with 0 (like they\n do in Emacs) rather than with column 1 (like they do in\n Vim). (Really Emacs is the strange one; most CLI utilities seem to\n start with column 1 too...)\n\u003c/p\u003e\u003cpre\u003e ID COLUMN WIDTH WHAT\n ---------------------------------------------------\n A    0      4     Blank spaces for indentation\n B    4      50    Flag, Number, Payee, Account, Tags\n C    54     2     Blank spaces for padding\n D    56     NA    Entry\n\u003c/pre\u003e\u003cp\u003eOmit the padding after column B if there is no entry; also omit\n columns C and D entirely if there is no Entry. (It is annoying to\n have extraneous blank space in a file).\n\u003c/p\u003e\u003cp\u003eThis table is a bit of a lie, because the blank spaces for\n indentation are emitted either by the posting previous to this one\n (either after the posting itself or after its postingMemo) or by\n the TopLine.\n\u003c/p\u003e\u003cp\u003eAlso emits an additional eight spaces after the trailing newline if\n the posting has a memo. That way the memo will be indented\n properly. (There are trailing spaces here, as opposed to leading\n spaces in the posting memo, because the latter would be\n inconsistent with the grammar.)\n\u003c/p\u003e\u003cp\u003eEmits an extra four spaces after the first line if the first\n paramter is True. However, this is overriden if there is a memo, in\n which case eight spaces will be emitted. (This allows the next\n posting to be indented properly.)\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "posting",
          "package": "penny",
          "signature": "Maybe (Amount Qty -\u003e S3 Radix PeriodGrp CommaGrp)-\u003e Bool-\u003e Ent PostingCore-\u003e Maybe Text",
          "type": "function"
        },
        "index": {
          "description": "Renders Posting Fails if any of the components fail to render In addition if the unverified Posting has an Entry Format must be provided otherwise render fails The columns look like this Column numbers begin with like they do in Emacs rather than with column like they do in Vim Really Emacs is the strange one most CLI utilities seem to start with column too ID COLUMN WIDTH WHAT Blank spaces for indentation Flag Number Payee Account Tags Blank spaces for padding NA Entry Omit the padding after column if there is no entry also omit columns and entirely if there is no Entry It is annoying to have extraneous blank space in file This table is bit of lie because the blank spaces for indentation are emitted either by the posting previous to this one either after the posting itself or after its postingMemo or by the TopLine Also emits an additional eight spaces after the trailing newline if the posting has memo That way the memo will be indented properly There are trailing spaces here as opposed to leading spaces in the posting memo because the latter would be inconsistent with the grammar Emits an extra four spaces after the first line if the first paramter is True However this is overriden if there is memo in which case eight spaces will be emitted This allows the next posting to be indented properly",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "posting",
          "normalized": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003eBool-\u003eEnt PostingCore-\u003eMaybe Text",
          "package": "penny",
          "signature": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003eBool-\u003eEnt PostingCore-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:posting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRenders a postingMemo. Fails if the postingMemo is empty, as the\n grammar requires that they have at least one line.\n\u003c/p\u003e\u003cp\u003eIf the boolean is True, inserts padding after the last\n postingMemoLine so that the next line is indented by four\n columns. Use this if the posting memo is followed by another\n posting. If the last boolean if False, there is no indenting after\n the last postingMemoLine.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "postingMemo",
          "package": "penny",
          "signature": "Bool -\u003e Memo -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#postingMemo",
          "type": "function"
        },
        "index": {
          "description": "Renders postingMemo Fails if the postingMemo is empty as the grammar requires that they have at least one line If the boolean is True inserts padding after the last postingMemoLine so that the next line is indented by four columns Use this if the posting memo is followed by another posting If the last boolean if False there is no indenting after the last postingMemoLine",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "postingMemo",
          "normalized": "Bool-\u003eMemo-\u003eMaybe Text",
          "package": "penny",
          "partial": "Memo",
          "signature": "Bool-\u003eMemo-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:postingMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRenders a postingMemoLine, optionally with trailing\n whitespace. The trailing whitespace allows the next line to be\n indented properly if is also a postingMemoLine. This is handled\n using trailing whitespace rather than leading whitespace because\n leading whitespace is inconsistent with the grammar.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "postingMemoLine",
          "package": "penny",
          "signature": "Int-\u003e Text-\u003e Maybe Text",
          "type": "function"
        },
        "index": {
          "description": "Renders postingMemoLine optionally with trailing whitespace The trailing whitespace allows the next line to be indented properly if is also postingMemoLine This is handled using trailing whitespace rather than leading whitespace because leading whitespace is inconsistent with the grammar",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "postingMemoLine",
          "normalized": "Int-\u003eText-\u003eMaybe Text",
          "package": "penny",
          "partial": "Memo Line",
          "signature": "Int-\u003eText-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:postingMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "price",
          "package": "penny",
          "signature": "PricePoint -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#price",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "price",
          "normalized": "PricePoint-\u003eMaybe Text",
          "package": "penny",
          "signature": "PricePoint-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:price"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "qtyRep",
          "package": "penny",
          "signature": "QtyRep -\u003e Text",
          "source": "src/Penny-Copper-Render.html#qtyRep",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "qtyRep",
          "normalized": "QtyRep-\u003eText",
          "package": "penny",
          "partial": "Rep",
          "signature": "QtyRep-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:qtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGets the characters necessary to quote a qtyRep.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "quoteQtyRep",
          "package": "penny",
          "signature": "QtyRep -\u003e (Text, Text)",
          "source": "src/Penny-Copper-Render.html#quoteQtyRep",
          "type": "function"
        },
        "index": {
          "description": "Gets the characters necessary to quote qtyRep",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "quoteQtyRep",
          "normalized": "QtyRep-\u003e(Text,Text)",
          "package": "penny",
          "partial": "Qty Rep",
          "signature": "QtyRep-\u003e(Text,Text)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:quoteQtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "quotedLvl1Acct",
          "package": "penny",
          "signature": "Account -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#quotedLvl1Acct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "quotedLvl1Acct",
          "normalized": "Account-\u003eMaybe Text",
          "package": "penny",
          "partial": "Lvl Acct",
          "signature": "Account-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:quotedLvl1Acct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRender a quoted Level 1 commodity. Fails if any character does\n not satisfy lvl1Char.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "quotedLvl1Cmdty",
          "package": "penny",
          "signature": "Commodity -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#quotedLvl1Cmdty",
          "type": "function"
        },
        "index": {
          "description": "Render quoted Level commodity Fails if any character does not satisfy lvl1Char",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "quotedLvl1Cmdty",
          "normalized": "Commodity-\u003eMaybe Text",
          "package": "penny",
          "partial": "Lvl Cmdty",
          "signature": "Commodity-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:quotedLvl1Cmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "quotedLvl1Payee",
          "package": "penny",
          "signature": "Payee -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#quotedLvl1Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "quotedLvl1Payee",
          "normalized": "Payee-\u003eMaybe Text",
          "package": "penny",
          "partial": "Lvl Payee",
          "signature": "Payee-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:quotedLvl1Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTakes a field that may or may not be present and a function that\n renders it. If the field is not present at all, returns an empty\n Text. Otherwise will succeed or fail depending upon whether the\n rendering function succeeds or fails.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "renMaybe",
          "package": "penny",
          "signature": "Maybe a -\u003e (a -\u003e Maybe Text) -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#renMaybe",
          "type": "function"
        },
        "index": {
          "description": "Takes field that may or may not be present and function that renders it If the field is not present at all returns an empty Text Otherwise will succeed or fail depending upon whether the rendering function succeeds or fails",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "renMaybe",
          "normalized": "Maybe a-\u003e(a-\u003eMaybe Text)-\u003eMaybe Text",
          "package": "penny",
          "partial": "Maybe",
          "signature": "Maybe a-\u003e(a-\u003eMaybe Text)-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:renMaybe"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "showX",
          "package": "penny",
          "signature": "a -\u003e Text",
          "source": "src/Penny-Copper-Render.html#showX",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "showX",
          "normalized": "a-\u003eText",
          "package": "penny",
          "signature": "a-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:showX"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "tag",
          "package": "penny",
          "signature": "Tag -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#tag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "tag",
          "normalized": "Tag-\u003eMaybe Text",
          "package": "penny",
          "signature": "Tag-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:tag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "tags",
          "package": "penny",
          "signature": "Tags -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#tags",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "tags",
          "normalized": "Tags-\u003eMaybe Text",
          "package": "penny",
          "signature": "Tags-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRenders the TopLine. Emits trailing whitespace after the newline\n so that the first posting is properly indented.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "topLine",
          "package": "penny",
          "signature": "TopLineCore -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#topLine",
          "type": "function"
        },
        "index": {
          "description": "Renders the TopLine Emits trailing whitespace after the newline so that the first posting is properly indented",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "topLine",
          "normalized": "TopLineCore-\u003eMaybe Text",
          "package": "penny",
          "partial": "Line",
          "signature": "TopLineCore-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:topLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "transaction",
          "package": "penny",
          "signature": "Maybe (Amount Qty -\u003e S3 Radix PeriodGrp CommaGrp)-\u003e (TopLineCore, Ents PostingCore)-\u003e Maybe Text",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "transaction",
          "normalized": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003e(TopLineCore,Ents PostingCore)-\u003eMaybe Text",
          "package": "penny",
          "signature": "Maybe(Amount Qty-\u003eS Radix PeriodGrp CommaGrp)-\u003e(TopLineCore,Ents PostingCore)-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:transaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "transactionMemo",
          "package": "penny",
          "signature": "Memo -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#transactionMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "transactionMemo",
          "normalized": "Memo-\u003eMaybe Text",
          "package": "penny",
          "partial": "Memo",
          "signature": "Memo-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:transactionMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Render",
          "name": "transactionMemoLine",
          "package": "penny",
          "signature": "Text -\u003e Maybe Text",
          "source": "src/Penny-Copper-Render.html#transactionMemoLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "transactionMemoLine",
          "normalized": "Text-\u003eMaybe Text",
          "package": "penny",
          "partial": "Memo Line",
          "signature": "Text-\u003eMaybe Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:transactionMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMerges a list of words into one Text; however, if any given Text\n is empty, that Text is first dropped from the list.\n\u003c/p\u003e",
          "module": "Penny.Copper.Render",
          "name": "txtWords",
          "package": "penny",
          "signature": "[Text] -\u003e Text",
          "source": "src/Penny-Copper-Render.html#txtWords",
          "type": "function"
        },
        "index": {
          "description": "Merges list of words into one Text however if any given Text is empty that Text is first dropped from the list",
          "hierarchy": "Penny Copper Render",
          "module": "Penny.Copper.Render",
          "name": "txtWords",
          "normalized": "[Text]-\u003eText",
          "package": "penny",
          "partial": "Words",
          "signature": "[Text]-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Render.html#v:txtWords"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "Terminals",
          "package": "penny",
          "source": "src/Penny-Copper-Terminals.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "Terminals",
          "package": "penny",
          "partial": "Terminals",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "apostrophe",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#apostrophe",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "apostrophe",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:apostrophe"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "asterisk",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#asterisk",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "asterisk",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:asterisk"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "atSign",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#atSign",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "atSign",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Sign",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:atSign"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "closeCurly",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#closeCurly",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "closeCurly",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Curly",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:closeCurly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "closeParen",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#closeParen",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "closeParen",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Paren",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:closeParen"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "closeSquare",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#closeSquare",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "closeSquare",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Square",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:closeSquare"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "colon",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#colon",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "colon",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:colon"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "dateSep",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#dateSep",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "dateSep",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Sep",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:dateSep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "digit",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "digit",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:digit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "dollar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#dollar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "dollar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:dollar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "doubleQuote",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#doubleQuote",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "doubleQuote",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Quote",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:doubleQuote"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "flagChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#flagChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "flagChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:flagChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "greaterThan",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#greaterThan",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "greaterThan",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Than",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:greaterThan"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "hash",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#hash",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "hash",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:hash"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "invalid",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#invalid",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "invalid",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:invalid"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "lessThan",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#lessThan",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "lessThan",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Than",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:lessThan"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "letter",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#letter",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "letter",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:letter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "lowerCaseAscii",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#lowerCaseAscii",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "lowerCaseAscii",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Case Ascii",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:lowerCaseAscii"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "lvl1AcctChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#lvl1AcctChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "lvl1AcctChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Acct Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:lvl1AcctChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "lvl1CmdtyChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#lvl1CmdtyChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "lvl1CmdtyChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Cmdty Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:lvl1CmdtyChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "lvl2AcctOtherChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#lvl2AcctOtherChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "lvl2AcctOtherChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Acct Other Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:lvl2AcctOtherChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "lvl2CmdtyFirstChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#lvl2CmdtyFirstChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "lvl2CmdtyFirstChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Cmdty First Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:lvl2CmdtyFirstChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "lvl2CmdtyOtherChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#lvl2CmdtyOtherChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "lvl2CmdtyOtherChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Cmdty Other Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:lvl2CmdtyOtherChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "lvl3CmdtyChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#lvl3CmdtyChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "lvl3CmdtyChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Cmdty Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:lvl3CmdtyChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "minus",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#minus",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "minus",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:minus"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "newline",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#newline",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "newline",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:newline"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "nonAscii",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#nonAscii",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "nonAscii",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Ascii",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:nonAscii"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "nonNewline",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#nonNewline",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "nonNewline",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Newline",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:nonNewline"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "nonNewlineNonSpace",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#nonNewlineNonSpace",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "nonNewlineNonSpace",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Newline Non Space",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:nonNewlineNonSpace"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "numberChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#numberChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "numberChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:numberChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "openCurly",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#openCurly",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "openCurly",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Curly",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:openCurly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "openParen",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#openParen",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "openParen",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Paren",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:openParen"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "openSquare",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#openSquare",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "openSquare",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Square",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:openSquare"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "period",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#period",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "period",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:period"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "plus",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#plus",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "plus",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:plus"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "quotedPayeeChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#quotedPayeeChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "quotedPayeeChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Payee Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:quotedPayeeChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "semicolon",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#semicolon",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "semicolon",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:semicolon"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "space",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#space",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "space",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:space"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "tab",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#tab",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "tab",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:tab"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "tagChar",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#tagChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "tagChar",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Char",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:tagChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "thinSpace",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#thinSpace",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "thinSpace",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Space",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:thinSpace"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "tilde",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#tilde",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "tilde",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:tilde"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "underscore",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#underscore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "underscore",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:underscore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "unicode",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#unicode",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "unicode",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:unicode"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "upperCaseAscii",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#upperCaseAscii",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "upperCaseAscii",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "partial": "Case Ascii",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:upperCaseAscii"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Copper.Terminals",
          "name": "white",
          "package": "penny",
          "signature": "Char -\u003e Bool",
          "source": "src/Penny-Copper-Terminals.html#white",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Copper Terminals",
          "module": "Penny.Copper.Terminals",
          "name": "white",
          "normalized": "Char-\u003eBool",
          "package": "penny",
          "signature": "Char-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper-Terminals.html#v:white"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCopper - the Penny parser.\n\u003c/p\u003e\u003cp\u003eThe parse functions in this module only accept lists of files\n rather than individual files because in order to correctly assign\n the global serials a single function must be able to see all the\n transactions, not just the transactions in a single file.\n\u003c/p\u003e\u003cp\u003eSome notes about Copper and performance:\n\u003c/p\u003e\u003cp\u003eRunning Penny on the datasets I typically use takes about two\n seconds. This does not seem very long on paper, and indeed it isn't\n very long, but it would be nice if this were\n instantaneous. Profiles consistently show that the most\n time-consuming part of running Penny is the Parsec parse of the\n incoming data. After eliminating the Parsec phase, the profile is\n not showing any parts of the program whose runtime could be\n shortened easily--the time is spent scattered amongst many\n functions.\n\u003c/p\u003e\u003cp\u003eSo the clear place to hunt for performance improvements is in the\n Parsec phase. And, indeed, I have tried many things to improve this\n phase. I tried using a parser based on Happy and Alex rather than\n Parsec; this code is tagged in the Git repository, though it is so\n old that many of the other data structures in Penny have since\n changed. Happy and Alex did not yield any significant performance\n improvement. As I recall, between Parsec and Happy/Alex, one was a\n little faster but used more memory, though I can't remember which\n was which.\n\u003c/p\u003e\u003cp\u003eThe problem with using Happy and Alex is that it is a bit harder to\n test and to maintain. Each Parsec parser is freestanding and can be\n tested on its own; doing this with Happy would be harder. Happy\n parsers also are not written in Haskell, though I'm not sure this\n is a disadvantage. And, of course an advantage to Happy is that it\n warns you if your grammar is ambiguous; Parsec will only reveal\n this through usage or through meticulous testing.\n\u003c/p\u003e\u003cp\u003eIt isn't worth using Happy/Alex in Penny because of the negligible\n performance difference. Parsec has much better error messages than\n Happy/Alex, which turns out to be critically important.\n\u003c/p\u003e\u003cp\u003eAnother thing I tried was using Attoparsec, which bills itself as\n being faster. The speed improvements were negligible, and\n Parsec error messages are much better than those in Attoparsec. I\n would have been willing to maintain a Parsec and an Attoparsec\n parser if the latter were faster. Penny could parse with Attoparsec\n first and, if that fails, use Parsec and use its error message. But\n Attoparsec was so negligibly faster that I did not think this\n worthwhile.\n\u003c/p\u003e\u003cp\u003eAnother thing I tried was using the \u003ccode\u003ebinary\u003c/code\u003e package to serialize\n the data in binary form. This shaved off a fair amont of run\n time. But Penny still did not feel instantaneous--run time probably\n dropped by about 40 percent, which is significant. The big\n disadvantage to using binary is that you then need to get\n plain-text ledger files into binary form, save them, and then use\n the binary form if it is up to date. Doing this manually imposes a\n big burden on the user to convert plain text to binary. Doing it\n automatically could work but would be a lot of code. And then, you\n would need to factor converstion time into the performance\n comparison. Again, not worth it for the performance improvement\n involved.\n\u003c/p\u003e\u003cp\u003eProbably the best performance improvement would come from putting\n the whole ledger into SQLite. This would, however, run into the\n same problems that exist with using a binary format: you need to\n convert from plain text, or perhaps write an editor to change the\n binary natively.  I'm not eager to write an editor (we already have\n Emacs).  Furthermore, using SQLite would likely require a\n significant re-engineering of Penny.\n\u003c/p\u003e\u003cp\u003eSo, Penny continues to use the simplest, most obvious solution--a\n Parsec parser--not from inertia or because Parsec is the default\n choice; rather, Parsec so far has proven to be the best solution to\n this problem.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Copper",
          "name": "Copper",
          "package": "penny",
          "source": "src/Penny-Copper.html",
          "type": "module"
        },
        "index": {
          "description": "Copper the Penny parser The parse functions in this module only accept lists of files rather than individual files because in order to correctly assign the global serials single function must be able to see all the transactions not just the transactions in single file Some notes about Copper and performance Running Penny on the datasets typically use takes about two seconds This does not seem very long on paper and indeed it isn very long but it would be nice if this were instantaneous Profiles consistently show that the most time-consuming part of running Penny is the Parsec parse of the incoming data After eliminating the Parsec phase the profile is not showing any parts of the program whose runtime could be shortened easily--the time is spent scattered amongst many functions So the clear place to hunt for performance improvements is in the Parsec phase And indeed have tried many things to improve this phase tried using parser based on Happy and Alex rather than Parsec this code is tagged in the Git repository though it is so old that many of the other data structures in Penny have since changed Happy and Alex did not yield any significant performance improvement As recall between Parsec and Happy Alex one was little faster but used more memory though can remember which was which The problem with using Happy and Alex is that it is bit harder to test and to maintain Each Parsec parser is freestanding and can be tested on its own doing this with Happy would be harder Happy parsers also are not written in Haskell though not sure this is disadvantage And of course an advantage to Happy is that it warns you if your grammar is ambiguous Parsec will only reveal this through usage or through meticulous testing It isn worth using Happy Alex in Penny because of the negligible performance difference Parsec has much better error messages than Happy Alex which turns out to be critically important Another thing tried was using Attoparsec which bills itself as being faster The speed improvements were negligible and Parsec error messages are much better than those in Attoparsec would have been willing to maintain Parsec and an Attoparsec parser if the latter were faster Penny could parse with Attoparsec first and if that fails use Parsec and use its error message But Attoparsec was so negligibly faster that did not think this worthwhile Another thing tried was using the binary package to serialize the data in binary form This shaved off fair amont of run time But Penny still did not feel instantaneous--run time probably dropped by about percent which is significant The big disadvantage to using binary is that you then need to get plain-text ledger files into binary form save them and then use the binary form if it is up to date Doing this manually imposes big burden on the user to convert plain text to binary Doing it automatically could work but would be lot of code And then you would need to factor converstion time into the performance comparison Again not worth it for the performance improvement involved Probably the best performance improvement would come from putting the whole ledger into SQLite This would however run into the same problems that exist with using binary format you need to convert from plain text or perhaps write an editor to change the binary natively not eager to write an editor we already have Emacs Furthermore using SQLite would likely require significant re-engineering of Penny So Penny continues to use the simplest most obvious solution--a Parsec parser--not from inertia or because Parsec is the default choice rather Parsec so far has proven to be the best solution to this problem",
          "hierarchy": "Penny Copper",
          "module": "Penny.Copper",
          "name": "Copper",
          "package": "penny",
          "partial": "Copper",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReads and parses the given files. If any of the files is \u003ccode\u003e-\u003c/code\u003e,\n reads standard input. If the list of files is empty, reads standard\n input. IO errors are not caught. Parse errors are printed to\n standard error and the program will exit with a failure.\n\u003c/p\u003e",
          "module": "Penny.Copper",
          "name": "open",
          "package": "penny",
          "signature": "[String] -\u003e IO [LedgerItem]",
          "source": "src/Penny-Copper.html#open",
          "type": "function"
        },
        "index": {
          "description": "Reads and parses the given files If any of the files is reads standard input If the list of files is empty reads standard input IO errors are not caught Parse errors are printed to standard error and the program will exit with failure",
          "hierarchy": "Penny Copper",
          "module": "Penny.Copper",
          "name": "open",
          "normalized": "[String]-\u003eIO[LedgerItem]",
          "package": "penny",
          "signature": "[String]-\u003eIO[LedgerItem]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Copper.html#v:open"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Denver.Diff",
          "name": "Diff",
          "package": "penny",
          "source": "src/Penny-Denver-Diff.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Denver Diff",
          "module": "Penny.Denver.Diff",
          "name": "Diff",
          "package": "penny",
          "partial": "Diff",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver-Diff.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Denver.Diff",
          "name": "main",
          "package": "penny",
          "signature": "IO ()",
          "source": "src/Penny-Denver-Diff.html#main",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Denver Diff",
          "module": "Penny.Denver.Diff",
          "name": "main",
          "normalized": "IO()",
          "package": "penny",
          "signature": "IO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver-Diff.html#v:main"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Denver.Reconcile",
          "name": "Reconcile",
          "package": "penny",
          "source": "src/Penny-Denver-Reconcile.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Denver Reconcile",
          "module": "Penny.Denver.Reconcile",
          "name": "Reconcile",
          "package": "penny",
          "partial": "Reconcile",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver-Reconcile.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Denver.Reconcile",
          "name": "main",
          "package": "penny",
          "signature": "IO ()",
          "source": "src/Penny-Denver-Reconcile.html#main",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Denver Reconcile",
          "module": "Penny.Denver.Reconcile",
          "name": "main",
          "normalized": "IO()",
          "package": "penny",
          "signature": "IO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver-Reconcile.html#v:main"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Denver.Reprint",
          "name": "Reprint",
          "package": "penny",
          "source": "src/Penny-Denver-Reprint.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Denver Reprint",
          "module": "Penny.Denver.Reprint",
          "name": "Reprint",
          "package": "penny",
          "partial": "Reprint",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver-Reprint.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Denver.Reprint",
          "name": "main",
          "package": "penny",
          "signature": "IO ()",
          "source": "src/Penny-Denver-Reprint.html#main",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Denver Reprint",
          "module": "Penny.Denver.Reprint",
          "name": "main",
          "normalized": "IO()",
          "package": "penny",
          "signature": "IO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver-Reprint.html#v:main"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThe selloff binary\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Denver.Selloff",
          "name": "Selloff",
          "package": "penny",
          "source": "src/Penny-Denver-Selloff.html",
          "type": "module"
        },
        "index": {
          "description": "The selloff binary",
          "hierarchy": "Penny Denver Selloff",
          "module": "Penny.Denver.Selloff",
          "name": "Selloff",
          "package": "penny",
          "partial": "Selloff",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver-Selloff.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Denver.Selloff",
          "name": "main",
          "package": "penny",
          "signature": "IO ()",
          "source": "src/Penny-Denver-Selloff.html#main",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Denver Selloff",
          "module": "Penny.Denver.Selloff",
          "name": "main",
          "normalized": "IO()",
          "package": "penny",
          "signature": "IO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver-Selloff.html#v:main"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eIndependent executables\n\u003c/p\u003e\u003cp\u003eCode for standalone executables is here.  Modules in Denver may\n depend on any other module in Penny.  No module outside of Denver\n has any dependencies on any Denver module.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Denver",
          "name": "Denver",
          "package": "penny",
          "source": "src/Penny-Denver.html",
          "type": "module"
        },
        "index": {
          "description": "Independent executables Code for standalone executables is here Modules in Denver may depend on any other module in Penny No module outside of Denver has any dependencies on any Denver module",
          "hierarchy": "Penny Denver",
          "module": "Penny.Denver",
          "name": "Denver",
          "package": "penny",
          "partial": "Denver",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Denver.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eLiberty - Penny command line parsing utilities\n\u003c/p\u003e\u003cp\u003eBoth Cabin and Zinc share various functions that aid in parsing\n command lines. For instance both the Postings report and the Zinc\n postings filter use common command-line options. However, Zinc\n already depends on Cabin. To avoid a cyclic dependency whereby\n Cabin would also depend on Zinc, functions formerly in Zinc that\n Cabin will also find useful are relocated here, to Liberty.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Liberty",
          "name": "Liberty",
          "package": "penny",
          "source": "src/Penny-Liberty.html",
          "type": "module"
        },
        "index": {
          "description": "Liberty Penny command line parsing utilities Both Cabin and Zinc share various functions that aid in parsing command lines For instance both the Postings report and the Zinc postings filter use common command-line options However Zinc already depends on Cabin To avoid cyclic dependency whereby Cabin would also depend on Zinc functions formerly in Zinc that Cabin will also find useful are relocated here to Liberty",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "Liberty",
          "package": "penny",
          "partial": "Liberty",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA multiline Text that holds an error message.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "Error",
          "package": "penny",
          "source": "src/Penny-Liberty.html#Error",
          "type": "type"
        },
        "index": {
          "description": "multiline Text that holds an error message",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "Error",
          "package": "penny",
          "partial": "Error",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:Error"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA serial indicating how a post relates to all other postings that\n made it through the filtering phase.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "FilteredNum",
          "package": "penny",
          "source": "src/Penny-Liberty.html#FilteredNum",
          "type": "newtype"
        },
        "index": {
          "description": "serial indicating how post relates to all other postings that made it through the filtering phase",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "FilteredNum",
          "package": "penny",
          "partial": "Filtered Num",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:FilteredNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "ItemIndex",
          "package": "penny",
          "source": "src/Penny-Liberty.html#ItemIndex",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "ItemIndex",
          "package": "penny",
          "partial": "Item Index",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:ItemIndex"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll metadata from Liberty.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "LibertyMeta",
          "package": "penny",
          "source": "src/Penny-Liberty.html#LibertyMeta",
          "type": "data"
        },
        "index": {
          "description": "All metadata from Liberty",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "LibertyMeta",
          "package": "penny",
          "partial": "Liberty Meta",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:LibertyMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "ListLength",
          "package": "penny",
          "source": "src/Penny-Liberty.html#ListLength",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "ListLength",
          "package": "penny",
          "partial": "List Length",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:ListLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "MatcherFactory",
          "package": "penny",
          "source": "src/Penny-Liberty.html#MatcherFactory",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "MatcherFactory",
          "package": "penny",
          "partial": "Matcher Factory",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:MatcherFactory"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "Operand",
          "package": "penny",
          "source": "src/Penny-Liberty.html#Operand",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "Operand",
          "package": "penny",
          "partial": "Operand",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:Operand"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSpecifies options for the post-filter stage.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "PostFilterFn",
          "package": "penny",
          "source": "src/Penny-Liberty.html#PostFilterFn",
          "type": "type"
        },
        "index": {
          "description": "Specifies options for the post-filter stage",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "PostFilterFn",
          "package": "penny",
          "partial": "Post Filter Fn",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:PostFilterFn"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA serial indicating how a posting relates to all other postings\n that have been sorted.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "SortedNum",
          "package": "penny",
          "source": "src/Penny-Liberty.html#SortedNum",
          "type": "newtype"
        },
        "index": {
          "description": "serial indicating how posting relates to all other postings that have been sorted",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "SortedNum",
          "package": "penny",
          "partial": "Sorted Num",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#t:SortedNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "FilteredNum",
          "package": "penny",
          "signature": "FilteredNum",
          "source": "src/Penny-Liberty.html#FilteredNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "FilteredNum",
          "package": "penny",
          "partial": "Filtered Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:FilteredNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "ItemIndex",
          "package": "penny",
          "signature": "ItemIndex",
          "source": "src/Penny-Liberty.html#ItemIndex",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "ItemIndex",
          "package": "penny",
          "partial": "Item Index",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:ItemIndex"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "ListLength",
          "package": "penny",
          "signature": "ListLength",
          "source": "src/Penny-Liberty.html#ListLength",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "ListLength",
          "package": "penny",
          "partial": "List Length",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:ListLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "SortedNum",
          "package": "penny",
          "signature": "SortedNum",
          "source": "src/Penny-Liberty.html#SortedNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "SortedNum",
          "package": "penny",
          "partial": "Sorted Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:SortedNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "caseSelectSpecs",
          "package": "penny",
          "signature": "[OptSpec CaseSensitive]",
          "source": "src/Penny-Liberty.html#caseSelectSpecs",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "caseSelectSpecs",
          "normalized": "[OptSpec CaseSensitive]",
          "package": "penny",
          "partial": "Select Specs",
          "signature": "[OptSpec CaseSensitive]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:caseSelectSpecs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eBoth Infix and RPN options.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "exprDesc",
          "package": "penny",
          "signature": "[OptSpec ExprDesc]",
          "source": "src/Penny-Liberty.html#exprDesc",
          "type": "function"
        },
        "index": {
          "description": "Both Infix and RPN options",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "exprDesc",
          "normalized": "[OptSpec ExprDesc]",
          "package": "penny",
          "partial": "Desc",
          "signature": "[OptSpec ExprDesc]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:exprDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "matcherSelectSpecs",
          "package": "penny",
          "signature": "[OptSpec MatcherFactory]",
          "source": "src/Penny-Liberty.html#matcherSelectSpecs",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "matcherSelectSpecs",
          "normalized": "[OptSpec MatcherFactory]",
          "package": "penny",
          "partial": "Select Specs",
          "signature": "[OptSpec MatcherFactory]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:matcherSelectSpecs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll operand OptSpec.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "operandSpecs",
          "package": "penny",
          "signature": "DateTime -\u003e [OptSpec (CaseSensitive -\u003e MatcherFactory -\u003e Either Error Operand)]",
          "source": "src/Penny-Liberty.html#operandSpecs",
          "type": "function"
        },
        "index": {
          "description": "All operand OptSpec",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "operandSpecs",
          "normalized": "DateTime-\u003e[OptSpec(CaseSensitive-\u003eMatcherFactory-\u003eEither Error Operand)]",
          "package": "penny",
          "partial": "Specs",
          "signature": "DateTime-\u003e[OptSpec(CaseSensitive-\u003eMatcherFactory-\u003eEither Error Operand)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:operandSpecs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "operatorSpecs",
          "package": "penny",
          "signature": "[OptSpec (Token a)]",
          "source": "src/Penny-Liberty.html#operatorSpecs",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "operatorSpecs",
          "normalized": "[OptSpec(Token a)]",
          "package": "penny",
          "partial": "Specs",
          "signature": "[OptSpec(Token a)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:operatorSpecs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn option for where the user would like to send output.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "output",
          "package": "penny",
          "signature": "OptSpec (Text -\u003e IO ())",
          "source": "src/Penny-Liberty.html#output",
          "type": "function"
        },
        "index": {
          "description": "An option for where the user would like to send output",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "output",
          "normalized": "OptSpec(Text-\u003eIO())",
          "package": "penny",
          "signature": "OptSpec(Text-\u003eIO())",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:output"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses comparers given on command line to a function. Fails if\n the string given is invalid.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "parseComparer",
          "package": "penny",
          "signature": "String -\u003e (Ordering -\u003e Pdct a) -\u003e Either InputError (Pdct a)",
          "source": "src/Penny-Liberty.html#parseComparer",
          "type": "function"
        },
        "index": {
          "description": "Parses comparers given on command line to function Fails if the string given is invalid",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "parseComparer",
          "normalized": "String-\u003e(Ordering-\u003ePdct a)-\u003eEither InputError(Pdct a)",
          "package": "penny",
          "partial": "Comparer",
          "signature": "String-\u003e(Ordering-\u003ePdct a)-\u003eEither InputError(Pdct a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:parseComparer"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "parseInfix",
          "package": "penny",
          "signature": "OptSpec ExprDesc",
          "source": "src/Penny-Liberty.html#parseInfix",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "parseInfix",
          "package": "penny",
          "partial": "Infix",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:parseInfix"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses exactly one integer; fails if it cannot read exactly one.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "parseInt",
          "package": "penny",
          "signature": "String -\u003e Either Error Int",
          "source": "src/Penny-Liberty.html#parseInt",
          "type": "function"
        },
        "index": {
          "description": "Parses exactly one integer fails if it cannot read exactly one",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "parseInt",
          "normalized": "String-\u003eEither Error Int",
          "package": "penny",
          "partial": "Int",
          "signature": "String-\u003eEither Error Int",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:parseInt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "parseIntMA",
          "package": "penny",
          "signature": "String -\u003e Either InputError Int",
          "source": "src/Penny-Liberty.html#parseIntMA",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "parseIntMA",
          "normalized": "String-\u003eEither InputError Int",
          "package": "penny",
          "partial": "Int MA",
          "signature": "String-\u003eEither InputError Int",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:parseIntMA"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses a list of tokens to obtain a predicate. Deals with an\n empty list of tokens by returning a predicate that is always\n True. Fails if the list of tokens is not empty and the parse fails.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "parsePredicate",
          "package": "penny",
          "signature": "ExprDesc -\u003e [Token a] -\u003e Either Error (Pdct a)",
          "source": "src/Penny-Liberty.html#parsePredicate",
          "type": "function"
        },
        "index": {
          "description": "Parses list of tokens to obtain predicate Deals with an empty list of tokens by returning predicate that is always True Fails if the list of tokens is not empty and the parse fails",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "parsePredicate",
          "normalized": "ExprDesc-\u003e[Token a]-\u003eEither Error(Pdct a)",
          "package": "penny",
          "partial": "Predicate",
          "signature": "ExprDesc-\u003e[Token a]-\u003eEither Error(Pdct a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:parsePredicate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "parseRPN",
          "package": "penny",
          "signature": "OptSpec ExprDesc",
          "source": "src/Penny-Liberty.html#parseRPN",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "parseRPN",
          "package": "penny",
          "partial": "RPN",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:parseRPN"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "postFilterSpecs",
          "package": "penny",
          "signature": "(OptSpec PostFilterFn, OptSpec PostFilterFn)",
          "source": "src/Penny-Liberty.html#postFilterSpecs",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "postFilterSpecs",
          "normalized": "(OptSpec PostFilterFn,OptSpec PostFilterFn)",
          "package": "penny",
          "partial": "Filter Specs",
          "signature": "(OptSpec PostFilterFn,OptSpec PostFilterFn)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:postFilterSpecs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven a list of output options, returns a single IO action to\n write to all given files. If the list was empty, returns an IO\n action that writes to standard output.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "processOutput",
          "package": "penny",
          "signature": "[Text -\u003e IO ()] -\u003e Text -\u003e IO ()",
          "source": "src/Penny-Liberty.html#processOutput",
          "type": "function"
        },
        "index": {
          "description": "Given list of output options returns single IO action to write to all given files If the list was empty returns an IO action that writes to standard output",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "processOutput",
          "normalized": "[Text-\u003eIO()]-\u003eText-\u003eIO()",
          "package": "penny",
          "partial": "Output",
          "signature": "[Text-\u003eIO()]-\u003eText-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:processOutput"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "processPostFilters",
          "package": "penny",
          "signature": "[PostFilterFn] -\u003e [a] -\u003e [a]",
          "source": "src/Penny-Liberty.html#processPostFilters",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "processPostFilters",
          "normalized": "[PostFilterFn]-\u003e[a]-\u003e[a]",
          "package": "penny",
          "partial": "Post Filters",
          "signature": "[PostFilterFn]-\u003e[a]-\u003e[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:processPostFilters"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "showExpression",
          "package": "penny",
          "signature": "OptSpec ()",
          "source": "src/Penny-Liberty.html#showExpression",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "showExpression",
          "normalized": "OptSpec()",
          "package": "penny",
          "partial": "Expression",
          "signature": "OptSpec()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:showExpression"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "unFilteredNum",
          "package": "penny",
          "signature": "Serial",
          "source": "src/Penny-Liberty.html#FilteredNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "unFilteredNum",
          "package": "penny",
          "partial": "Filtered Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:unFilteredNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "unItemIndex",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Liberty.html#ItemIndex",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "unItemIndex",
          "package": "penny",
          "partial": "Item Index",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:unItemIndex"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "unListLength",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Liberty.html#ListLength",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "unListLength",
          "package": "penny",
          "partial": "List Length",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:unListLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "unSortedNum",
          "package": "penny",
          "signature": "Serial",
          "source": "src/Penny-Liberty.html#SortedNum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "unSortedNum",
          "package": "penny",
          "partial": "Sorted Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:unSortedNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Liberty",
          "name": "verboseFilter",
          "package": "penny",
          "signature": "OptSpec ()",
          "source": "src/Penny-Liberty.html#verboseFilter",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "verboseFilter",
          "normalized": "OptSpec()",
          "package": "penny",
          "partial": "Filter",
          "signature": "OptSpec()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:verboseFilter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePrints the binary's version and the version of the library, and exits successfully.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "version",
          "package": "penny",
          "signature": "Version-\u003e String-\u003e String",
          "type": "function"
        },
        "index": {
          "description": "Prints the binary version and the version of the library and exits successfully",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "version",
          "normalized": "Version-\u003eString-\u003eString",
          "package": "penny",
          "signature": "Version-\u003eString-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:version"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTakes a list of transactions, splits them into PostingChild\n instances, filters them, post-filters them, sorts them, and places\n them in Box instances with Filtered serials. Also returns Chunks\n containing a description of the evalutation process.\n\u003c/p\u003e",
          "module": "Penny.Liberty",
          "name": "xactionsToFiltered",
          "package": "penny",
          "signature": "LPdct-\u003e [PostFilterFn]-\u003e (Posting -\u003e Posting -\u003e Ordering)-\u003e [Transaction]-\u003e ((Amount Qty -\u003e Text) -\u003e [Chunk], [(LibertyMeta, Posting)])",
          "type": "function"
        },
        "index": {
          "description": "Takes list of transactions splits them into PostingChild instances filters them post-filters them sorts them and places them in Box instances with Filtered serials Also returns Chunks containing description of the evalutation process",
          "hierarchy": "Penny Liberty",
          "module": "Penny.Liberty",
          "name": "xactionsToFiltered",
          "normalized": "LPdct-\u003e[PostFilterFn]-\u003e(Posting-\u003ePosting-\u003eOrdering)-\u003e[Transaction]-\u003e((Amount Qty-\u003eText)-\u003e[Chunk],[(LibertyMeta,Posting)])",
          "package": "penny",
          "partial": "To Filtered",
          "signature": "LPdct-\u003e[PostFilterFn]-\u003e(Posting-\u003ePosting-\u003eOrdering)-\u003e[Transaction]-\u003e((Amount Qty-\u003eText)-\u003e[Chunk],[(LibertyMeta,Posting)])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Liberty.html#v:xactionsToFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "Balance",
          "package": "penny",
          "source": "src/Penny-Lincoln-Balance.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "Balance",
          "package": "penny",
          "partial": "Balance",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA balance summarizes several entries. You do not create a Balance\n directly. Instead, use \u003ccode\u003e\u003ca\u003eentryToBalance\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Balance",
          "name": "Balance",
          "package": "penny",
          "source": "src/Penny-Lincoln-Balance.html#Balance",
          "type": "data"
        },
        "index": {
          "description": "balance summarizes several entries You do not create Balance directly Instead use entryToBalance",
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "Balance",
          "package": "penny",
          "partial": "Balance",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#t:Balance"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturned by \u003ccode\u003e\u003ca\u003ebalanced\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Balance",
          "name": "Balanced",
          "package": "penny",
          "source": "src/Penny-Lincoln-Balance.html#Balanced",
          "type": "data"
        },
        "index": {
          "description": "Returned by balanced",
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "Balanced",
          "package": "penny",
          "partial": "Balanced",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#t:Balanced"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "BottomLine",
          "package": "penny",
          "source": "src/Penny-Lincoln-Balance.html#BottomLine",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "BottomLine",
          "package": "penny",
          "partial": "Bottom Line",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#t:BottomLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "Column",
          "package": "penny",
          "source": "src/Penny-Lincoln-Balance.html#Column",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "Column",
          "package": "penny",
          "partial": "Column",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#t:Column"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "Balanced",
          "package": "penny",
          "signature": "Balanced",
          "source": "src/Penny-Lincoln-Balance.html#Balanced",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "Balanced",
          "package": "penny",
          "partial": "Balanced",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:Balanced"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "Column",
          "package": "penny",
          "signature": "Column",
          "source": "src/Penny-Lincoln-Balance.html#Column",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "Column",
          "package": "penny",
          "partial": "Column",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:Column"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "Inferable",
          "package": "penny",
          "signature": "Inferable (Entry Qty)",
          "source": "src/Penny-Lincoln-Balance.html#Balanced",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "Inferable",
          "package": "penny",
          "partial": "Inferable",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:Inferable"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "NonZero",
          "package": "penny",
          "signature": "NonZero Column",
          "source": "src/Penny-Lincoln-Balance.html#BottomLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "NonZero",
          "package": "penny",
          "partial": "Non Zero",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:NonZero"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "NotInferable",
          "package": "penny",
          "signature": "NotInferable",
          "source": "src/Penny-Lincoln-Balance.html#Balanced",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "NotInferable",
          "package": "penny",
          "partial": "Not Inferable",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:NotInferable"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "Zero",
          "package": "penny",
          "signature": "Zero",
          "source": "src/Penny-Lincoln-Balance.html#BottomLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "Zero",
          "package": "penny",
          "partial": "Zero",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:Zero"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eComputes whether a Balance map is Balanced.\n\u003c/p\u003e\u003cpre\u003e balanced mempty == Balanced\n\u003c/pre\u003e",
          "module": "Penny.Lincoln.Balance",
          "name": "balanced",
          "package": "penny",
          "signature": "Balance -\u003e Balanced",
          "source": "src/Penny-Lincoln-Balance.html#balanced",
          "type": "function"
        },
        "index": {
          "description": "Computes whether Balance map is Balanced balanced mempty Balanced",
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "balanced",
          "normalized": "Balance-\u003eBalanced",
          "package": "penny",
          "signature": "Balance-\u003eBalanced",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:balanced"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "colDrCr",
          "package": "penny",
          "signature": "DrCr",
          "source": "src/Penny-Lincoln-Balance.html#Column",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "colDrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:colDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "colQty",
          "package": "penny",
          "signature": "Qty",
          "source": "src/Penny-Lincoln-Balance.html#Column",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "colQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:colQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConverts multiple Entries to a Balanced.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Balance",
          "name": "entriesToBalanced",
          "package": "penny",
          "signature": "[Entry q] -\u003e Balanced",
          "source": "src/Penny-Lincoln-Balance.html#entriesToBalanced",
          "type": "function"
        },
        "index": {
          "description": "Converts multiple Entries to Balanced",
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "entriesToBalanced",
          "normalized": "[Entry a]-\u003eBalanced",
          "package": "penny",
          "partial": "To Balanced",
          "signature": "[Entry q]-\u003eBalanced",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:entriesToBalanced"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConverts an Entry to a Balance.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Balance",
          "name": "entryToBalance",
          "package": "penny",
          "signature": "Entry q -\u003e Balance",
          "source": "src/Penny-Lincoln-Balance.html#entryToBalance",
          "type": "function"
        },
        "index": {
          "description": "Converts an Entry to Balance",
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "entryToBalance",
          "normalized": "Entry a-\u003eBalance",
          "package": "penny",
          "partial": "To Balance",
          "signature": "Entry q-\u003eBalance",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:entryToBalance"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Balance",
          "name": "isInferable",
          "package": "penny",
          "signature": "Balanced -\u003e Bool",
          "source": "src/Penny-Lincoln-Balance.html#isInferable",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "isInferable",
          "normalized": "Balanced-\u003eBool",
          "package": "penny",
          "partial": "Inferable",
          "signature": "Balanced-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:isInferable"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRemoves zero balances from a Balance.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Balance",
          "name": "removeZeroCommodities",
          "package": "penny",
          "signature": "Balance -\u003e Balance",
          "source": "src/Penny-Lincoln-Balance.html#removeZeroCommodities",
          "type": "function"
        },
        "index": {
          "description": "Removes zero balances from Balance",
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "removeZeroCommodities",
          "normalized": "Balance-\u003eBalance",
          "package": "penny",
          "partial": "Zero Commodities",
          "signature": "Balance-\u003eBalance",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:removeZeroCommodities"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturns a map where the keys are the commodities in the balance\n and the values are the balance for each commodity. If there is no\n balance at all, this map can be empty.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Balance",
          "name": "unBalance",
          "package": "penny",
          "signature": "Balance -\u003e Map Commodity BottomLine",
          "source": "src/Penny-Lincoln-Balance.html#unBalance",
          "type": "function"
        },
        "index": {
          "description": "Returns map where the keys are the commodities in the balance and the values are the balance for each commodity If there is no balance at all this map can be empty",
          "hierarchy": "Penny Lincoln Balance",
          "module": "Penny.Lincoln.Balance",
          "name": "unBalance",
          "normalized": "Balance-\u003eMap Commodity BottomLine",
          "package": "penny",
          "partial": "Balance",
          "signature": "Balance-\u003eMap Commodity BottomLine",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Balance.html#v:unBalance"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "DateTime",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-DateTime.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "DateTime",
          "package": "penny",
          "partial": "Date Time",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA DateTime is a a local date and time, along with a time zone\n offset.  The Eq and Ord instances are derived; therefore, two\n DateTime instances will not be equivalent if the time zone offsets\n are different, even if they are the same instant. To compare one\n DateTime to another, you probably want to use \u003ccode\u003e\u003ca\u003etoUTC\u003c/a\u003e\u003c/code\u003e and compare\n those. To see if two DateTime are the same instant, use\n \u003ccode\u003e\u003ca\u003esameInstant\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "DateTime",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#DateTime",
          "type": "data"
        },
        "index": {
          "description": "DateTime is local date and time along with time zone offset The Eq and Ord instances are derived therefore two DateTime instances will not be equivalent if the time zone offsets are different even if they are the same instant To compare one DateTime to another you probably want to use toUTC and compare those To see if two DateTime are the same instant use sameInstant",
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "DateTime",
          "package": "penny",
          "partial": "Date Time",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#t:DateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "Hours",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#Hours",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "Hours",
          "package": "penny",
          "partial": "Hours",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#t:Hours"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "Minutes",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#Minutes",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "Minutes",
          "package": "penny",
          "partial": "Minutes",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#t:Minutes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "Seconds",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#Seconds",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "Seconds",
          "package": "penny",
          "partial": "Seconds",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#t:Seconds"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe number of minutes that this timezone is offset from UTC. Can\n be positive, negative, or zero.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "TimeZoneOffset",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#TimeZoneOffset",
          "type": "data"
        },
        "index": {
          "description": "The number of minutes that this timezone is offset from UTC Can be positive negative or zero",
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "TimeZoneOffset",
          "package": "penny",
          "partial": "Time Zone Offset",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#t:TimeZoneOffset"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "DateTime",
          "package": "penny",
          "signature": "DateTime",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#DateTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "DateTime",
          "package": "penny",
          "partial": "Date Time",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:DateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "dateTimeMidnightUTC",
          "package": "penny",
          "signature": "Day -\u003e DateTime",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#dateTimeMidnightUTC",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "dateTimeMidnightUTC",
          "normalized": "Day-\u003eDateTime",
          "package": "penny",
          "partial": "Time Midnight UTC",
          "signature": "Day-\u003eDateTime",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:dateTimeMidnightUTC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "day",
          "package": "penny",
          "signature": "Day",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#DateTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "day",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:day"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "fromZonedTime",
          "package": "penny",
          "signature": "ZonedTime -\u003e Maybe DateTime",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#fromZonedTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "fromZonedTime",
          "normalized": "ZonedTime-\u003eMaybe DateTime",
          "package": "penny",
          "partial": "Zoned Time",
          "signature": "ZonedTime-\u003eMaybe DateTime",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:fromZonedTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "hours",
          "package": "penny",
          "signature": "Hours",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#DateTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "hours",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:hours"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003esucceeds if 0 \u003c= x \u003c 24\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "intToHours",
          "package": "penny",
          "signature": "Int -\u003e Maybe Hours",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#intToHours",
          "type": "function"
        },
        "index": {
          "description": "succeeds if",
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "intToHours",
          "normalized": "Int-\u003eMaybe Hours",
          "package": "penny",
          "partial": "To Hours",
          "signature": "Int-\u003eMaybe Hours",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:intToHours"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003esucceeds if 0 \u003c= x \u003c 60\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "intToMinutes",
          "package": "penny",
          "signature": "Int -\u003e Maybe Minutes",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#intToMinutes",
          "type": "function"
        },
        "index": {
          "description": "succeeds if",
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "intToMinutes",
          "normalized": "Int-\u003eMaybe Minutes",
          "package": "penny",
          "partial": "To Minutes",
          "signature": "Int-\u003eMaybe Minutes",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:intToMinutes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003esucceeds if 0 \u003c= x \u003c 61 (to allow for leap seconds)\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "intToSeconds",
          "package": "penny",
          "signature": "Int -\u003e Maybe Seconds",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#intToSeconds",
          "type": "function"
        },
        "index": {
          "description": "succeeds if to allow for leap seconds",
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "intToSeconds",
          "normalized": "Int-\u003eMaybe Seconds",
          "package": "penny",
          "partial": "To Seconds",
          "signature": "Int-\u003eMaybe Seconds",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:intToSeconds"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "midnight",
          "package": "penny",
          "signature": "(Hours, Minutes, Seconds)",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#midnight",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "midnight",
          "normalized": "(Hours,Minutes,Seconds)",
          "package": "penny",
          "signature": "(Hours,Minutes,Seconds)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:midnight"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConvert minutes to a time zone offset. I'm having a hard time\n deciding whether to be liberal or strict in what to accept\n here. Currently it is somewhat strict in that it will fail if\n absolute value is greater than 840 minutes; currently the article\n at http:\u003cem/\u003een.wikipedia.org\u003cem\u003ewiki\u003c/em\u003eList_of_time_zones_by_UTC_offset\n says there is no offset greater than 14 hours, or 840 minutes.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "minsToOffset",
          "package": "penny",
          "signature": "Int -\u003e Maybe TimeZoneOffset",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#minsToOffset",
          "type": "function"
        },
        "index": {
          "description": "Convert minutes to time zone offset having hard time deciding whether to be liberal or strict in what to accept here Currently it is somewhat strict in that it will fail if absolute value is greater than minutes currently the article at http en.wikipedia.org wiki List of time zones by UTC offset says there is no offset greater than hours or minutes",
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "minsToOffset",
          "normalized": "Int-\u003eMaybe TimeZoneOffset",
          "package": "penny",
          "partial": "To Offset",
          "signature": "Int-\u003eMaybe TimeZoneOffset",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:minsToOffset"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "minutes",
          "package": "penny",
          "signature": "Minutes",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#DateTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "minutes",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:minutes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "noOffset",
          "package": "penny",
          "signature": "TimeZoneOffset",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#noOffset",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "noOffset",
          "package": "penny",
          "partial": "Offset",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:noOffset"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAre these DateTimes the same instant in time, after adjusting for\n local timezones?\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "sameInstant",
          "package": "penny",
          "signature": "DateTime -\u003e DateTime -\u003e Bool",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#sameInstant",
          "type": "function"
        },
        "index": {
          "description": "Are these DateTimes the same instant in time after adjusting for local timezones",
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "sameInstant",
          "normalized": "DateTime-\u003eDateTime-\u003eBool",
          "package": "penny",
          "partial": "Instant",
          "signature": "DateTime-\u003eDateTime-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:sameInstant"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "seconds",
          "package": "penny",
          "signature": "Seconds",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#DateTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "seconds",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:seconds"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShows a DateTime in a pretty way.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "showDateTime",
          "package": "penny",
          "signature": "DateTime -\u003e String",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#showDateTime",
          "type": "function"
        },
        "index": {
          "description": "Shows DateTime in pretty way",
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "showDateTime",
          "normalized": "DateTime-\u003eString",
          "package": "penny",
          "partial": "Date Time",
          "signature": "DateTime-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:showDateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "timeZone",
          "package": "penny",
          "signature": "TimeZoneOffset",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#DateTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "timeZone",
          "package": "penny",
          "partial": "Zone",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:timeZone"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "toUTC",
          "package": "penny",
          "signature": "DateTime -\u003e UTCTime",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#toUTC",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "toUTC",
          "normalized": "DateTime-\u003eUTCTime",
          "package": "penny",
          "partial": "UTC",
          "signature": "DateTime-\u003eUTCTime",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:toUTC"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "toZonedTime",
          "package": "penny",
          "signature": "DateTime -\u003e ZonedTime",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#toZonedTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "toZonedTime",
          "normalized": "DateTime-\u003eZonedTime",
          "package": "penny",
          "partial": "Zoned Time",
          "signature": "DateTime-\u003eZonedTime",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:toZonedTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "zeroHours",
          "package": "penny",
          "signature": "Hours",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#zeroHours",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "zeroHours",
          "package": "penny",
          "partial": "Hours",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:zeroHours"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "zeroMinutes",
          "package": "penny",
          "signature": "Minutes",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#zeroMinutes",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "zeroMinutes",
          "package": "penny",
          "partial": "Minutes",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:zeroMinutes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "zeroSeconds",
          "package": "penny",
          "signature": "Seconds",
          "source": "src/Penny-Lincoln-Bits-DateTime.html#zeroSeconds",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits DateTime",
          "module": "Penny.Lincoln.Bits.DateTime",
          "name": "zeroSeconds",
          "package": "penny",
          "partial": "Seconds",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-DateTime.html#v:zeroSeconds"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThese are the bits that are \u003ca\u003eopen\u003c/a\u003e; that is, their constructors\n are exported. This includes most bits. Some bits that have open\n constructors are not in this module because they include other bits\n that do not have exported constructors.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Open",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html",
          "type": "module"
        },
        "index": {
          "description": "These are the bits that are open that is their constructors are exported This includes most bits Some bits that have open constructors are not in this module because they include other bits that do not have exported constructors",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Open",
          "package": "penny",
          "partial": "Open",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Account",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Account",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Account",
          "package": "penny",
          "partial": "Account",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Amount",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Amount",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Amount",
          "package": "penny",
          "partial": "Amount",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Commodity",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Commodity",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Commodity",
          "package": "penny",
          "partial": "Commodity",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Commodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "DrCr",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#DrCr",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "DrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:DrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Entry",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Entry",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Entry",
          "package": "penny",
          "partial": "Entry",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Entry"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe postings in each file are numbered in order.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "FilePosting",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#FilePosting",
          "type": "newtype"
        },
        "index": {
          "description": "The postings in each file are numbered in order",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "FilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:FilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe transactions in each file are numbered in order.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "FileTransaction",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#FileTransaction",
          "type": "newtype"
        },
        "index": {
          "description": "The transactions in each file are numbered in order",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "FileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:FileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe name of the file in which a transaction appears.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Filename",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Filename",
          "type": "newtype"
        },
        "index": {
          "description": "The name of the file in which transaction appears",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Filename",
          "package": "penny",
          "partial": "Filename",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Filename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Flag",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Flag",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Flag",
          "package": "penny",
          "partial": "Flag",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll postings are numbered in order, beginning with the first\n posting in the first file and ending with the last posting\n in the last file.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "GlobalPosting",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#GlobalPosting",
          "type": "newtype"
        },
        "index": {
          "description": "All postings are numbered in order beginning with the first posting in the first file and ending with the last posting in the last file",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "GlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:GlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll transactions are numbered in order, beginning with the first\n transaction in the first file and ending with the last transaction\n in the last file.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "GlobalTransaction",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#GlobalTransaction",
          "type": "newtype"
        },
        "index": {
          "description": "All transactions are numbered in order beginning with the first transaction in the first file and ending with the last transaction in the last file",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "GlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:GlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThere is one item in the list for each line of the memo. Do not\n include newlines in the texts themselves. However there is nothing\n to enforce this convention.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Memo",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Memo",
          "type": "newtype"
        },
        "index": {
          "description": "There is one item in the list for each line of the memo Do not include newlines in the texts themselves However there is nothing to enforce this convention",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Memo",
          "package": "penny",
          "partial": "Memo",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Memo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Number",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Number",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Number",
          "package": "penny",
          "partial": "Number",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Payee",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Payee",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Payee",
          "package": "penny",
          "partial": "Payee",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe line number on which a posting appears.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "PostingLine",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#PostingLine",
          "type": "newtype"
        },
        "index": {
          "description": "The line number on which posting appears",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "PostingLine",
          "package": "penny",
          "partial": "Posting Line",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:PostingLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe line number on which a price appears.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "PriceLine",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#PriceLine",
          "type": "newtype"
        },
        "index": {
          "description": "The line number on which price appears",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "PriceLine",
          "package": "penny",
          "partial": "Price Line",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:PriceLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe commodity and and the quantity may appear with the commodity\n on the left (e.g. USD 2.14) or with the commodity on the right\n (e.g. 2.14 USD).\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Side",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Side",
          "type": "data"
        },
        "index": {
          "description": "The commodity and and the quantity may appear with the commodity on the left e.g USD or with the commodity on the right e.g USD",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Side",
          "package": "penny",
          "partial": "Side",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Side"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThere may or may not be a space in between the commodity and the\n quantity.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "SpaceBetween",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#SpaceBetween",
          "type": "data"
        },
        "index": {
          "description": "There may or may not be space in between the commodity and the quantity",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "SpaceBetween",
          "package": "penny",
          "partial": "Space Between",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:SpaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "SubAccount",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#SubAccount",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "SubAccount",
          "package": "penny",
          "partial": "Sub Account",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:SubAccount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Tag",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Tag",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Tag",
          "package": "penny",
          "partial": "Tag",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Tag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Tags",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#Tags",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Tags",
          "package": "penny",
          "partial": "Tags",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:Tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe line number that the TopLine starts on (excluding the memo\n accompanying the TopLine).\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "TopLineLine",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#TopLineLine",
          "type": "newtype"
        },
        "index": {
          "description": "The line number that the TopLine starts on excluding the memo accompanying the TopLine",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "TopLineLine",
          "package": "penny",
          "partial": "Top Line Line",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:TopLineLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe line number that the memo accompanying the TopLine starts on.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "TopMemoLine",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Open.html#TopMemoLine",
          "type": "newtype"
        },
        "index": {
          "description": "The line number that the memo accompanying the TopLine starts on",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "TopMemoLine",
          "package": "penny",
          "partial": "Top Memo Line",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#t:TopMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Account",
          "package": "penny",
          "signature": "Account",
          "source": "src/Penny-Lincoln-Bits-Open.html#Account",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Account",
          "package": "penny",
          "partial": "Account",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Amount",
          "package": "penny",
          "signature": "Amount",
          "source": "src/Penny-Lincoln-Bits-Open.html#Amount",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Amount",
          "package": "penny",
          "partial": "Amount",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Commodity",
          "package": "penny",
          "signature": "Commodity",
          "source": "src/Penny-Lincoln-Bits-Open.html#Commodity",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Commodity",
          "package": "penny",
          "partial": "Commodity",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Commodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Credit",
          "package": "penny",
          "signature": "Credit",
          "source": "src/Penny-Lincoln-Bits-Open.html#DrCr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Credit",
          "package": "penny",
          "partial": "Credit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Credit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Debit",
          "package": "penny",
          "signature": "Debit",
          "source": "src/Penny-Lincoln-Bits-Open.html#DrCr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Debit",
          "package": "penny",
          "partial": "Debit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Debit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Entry",
          "package": "penny",
          "signature": "Entry",
          "source": "src/Penny-Lincoln-Bits-Open.html#Entry",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Entry",
          "package": "penny",
          "partial": "Entry",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Entry"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "FilePosting",
          "package": "penny",
          "signature": "FilePosting",
          "source": "src/Penny-Lincoln-Bits-Open.html#FilePosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "FilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:FilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "FileTransaction",
          "package": "penny",
          "signature": "FileTransaction",
          "source": "src/Penny-Lincoln-Bits-Open.html#FileTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "FileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:FileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Filename",
          "package": "penny",
          "signature": "Filename",
          "source": "src/Penny-Lincoln-Bits-Open.html#Filename",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Filename",
          "package": "penny",
          "partial": "Filename",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Filename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Flag",
          "package": "penny",
          "signature": "Flag",
          "source": "src/Penny-Lincoln-Bits-Open.html#Flag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Flag",
          "package": "penny",
          "partial": "Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "GlobalPosting",
          "package": "penny",
          "signature": "GlobalPosting",
          "source": "src/Penny-Lincoln-Bits-Open.html#GlobalPosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "GlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:GlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "GlobalTransaction",
          "package": "penny",
          "signature": "GlobalTransaction",
          "source": "src/Penny-Lincoln-Bits-Open.html#GlobalTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "GlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:GlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Memo",
          "package": "penny",
          "signature": "Memo",
          "source": "src/Penny-Lincoln-Bits-Open.html#Memo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Memo",
          "package": "penny",
          "partial": "Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Memo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Number",
          "package": "penny",
          "signature": "Number",
          "source": "src/Penny-Lincoln-Bits-Open.html#Number",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Number",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Payee",
          "package": "penny",
          "signature": "Payee",
          "source": "src/Penny-Lincoln-Bits-Open.html#Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Payee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "PostingLine",
          "package": "penny",
          "signature": "PostingLine",
          "source": "src/Penny-Lincoln-Bits-Open.html#PostingLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "PostingLine",
          "package": "penny",
          "partial": "Posting Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:PostingLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "PriceLine",
          "package": "penny",
          "signature": "PriceLine",
          "source": "src/Penny-Lincoln-Bits-Open.html#PriceLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "PriceLine",
          "package": "penny",
          "partial": "Price Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:PriceLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "SubAccount",
          "package": "penny",
          "signature": "SubAccount",
          "source": "src/Penny-Lincoln-Bits-Open.html#SubAccount",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "SubAccount",
          "package": "penny",
          "partial": "Sub Account",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:SubAccount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Tag",
          "package": "penny",
          "signature": "Tag",
          "source": "src/Penny-Lincoln-Bits-Open.html#Tag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Tag",
          "package": "penny",
          "partial": "Tag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Tag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Tags",
          "package": "penny",
          "signature": "Tags",
          "source": "src/Penny-Lincoln-Bits-Open.html#Tags",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "Tags",
          "package": "penny",
          "partial": "Tags",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:Tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "TopLineLine",
          "package": "penny",
          "signature": "TopLineLine",
          "source": "src/Penny-Lincoln-Bits-Open.html#TopLineLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "TopLineLine",
          "package": "penny",
          "partial": "Top Line Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:TopLineLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "TopMemoLine",
          "package": "penny",
          "signature": "TopMemoLine",
          "source": "src/Penny-Lincoln-Bits-Open.html#TopMemoLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "TopMemoLine",
          "package": "penny",
          "partial": "Top Memo Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:TopMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "amount",
          "package": "penny",
          "signature": "Amount q",
          "source": "src/Penny-Lincoln-Bits-Open.html#Entry",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "amount",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "commodity",
          "package": "penny",
          "signature": "Commodity",
          "source": "src/Penny-Lincoln-Bits-Open.html#Amount",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "commodity",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:commodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "drCr",
          "package": "penny",
          "signature": "DrCr",
          "source": "src/Penny-Lincoln-Bits-Open.html#Entry",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "drCr",
          "package": "penny",
          "partial": "Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:drCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDebit returns Credit; Credit returns Debit\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "opposite",
          "package": "penny",
          "signature": "DrCr -\u003e DrCr",
          "source": "src/Penny-Lincoln-Bits-Open.html#opposite",
          "type": "function"
        },
        "index": {
          "description": "Debit returns Credit Credit returns Debit",
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "opposite",
          "normalized": "DrCr-\u003eDrCr",
          "package": "penny",
          "signature": "DrCr-\u003eDrCr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:opposite"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "qty",
          "package": "penny",
          "signature": "q",
          "source": "src/Penny-Lincoln-Bits-Open.html#Amount",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "qty",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:qty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unAccount",
          "package": "penny",
          "signature": "[SubAccount]",
          "source": "src/Penny-Lincoln-Bits-Open.html#Account",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unAccount",
          "normalized": "[SubAccount]",
          "package": "penny",
          "partial": "Account",
          "signature": "[SubAccount]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unAccount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unCommodity",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Lincoln-Bits-Open.html#Commodity",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unCommodity",
          "package": "penny",
          "partial": "Commodity",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unCommodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unFilePosting",
          "package": "penny",
          "signature": "Serial",
          "source": "src/Penny-Lincoln-Bits-Open.html#FilePosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unFileTransaction",
          "package": "penny",
          "signature": "Serial",
          "source": "src/Penny-Lincoln-Bits-Open.html#FileTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unFilename",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Lincoln-Bits-Open.html#Filename",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unFilename",
          "package": "penny",
          "partial": "Filename",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unFilename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unFlag",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Lincoln-Bits-Open.html#Flag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unFlag",
          "package": "penny",
          "partial": "Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unFlag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unGlobalPosting",
          "package": "penny",
          "signature": "Serial",
          "source": "src/Penny-Lincoln-Bits-Open.html#GlobalPosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unGlobalTransaction",
          "package": "penny",
          "signature": "Serial",
          "source": "src/Penny-Lincoln-Bits-Open.html#GlobalTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unMemo",
          "package": "penny",
          "signature": "[Text]",
          "source": "src/Penny-Lincoln-Bits-Open.html#Memo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unMemo",
          "normalized": "[Text]",
          "package": "penny",
          "partial": "Memo",
          "signature": "[Text]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unNumber",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Lincoln-Bits-Open.html#Number",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unNumber",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unPayee",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Lincoln-Bits-Open.html#Payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unPayee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unPostingLine",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Lincoln-Bits-Open.html#PostingLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unPostingLine",
          "package": "penny",
          "partial": "Posting Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unPostingLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unPriceLine",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Lincoln-Bits-Open.html#PriceLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unPriceLine",
          "package": "penny",
          "partial": "Price Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unPriceLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unSubAccount",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Lincoln-Bits-Open.html#SubAccount",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unSubAccount",
          "package": "penny",
          "partial": "Sub Account",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unSubAccount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unTag",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Lincoln-Bits-Open.html#Tag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unTag",
          "package": "penny",
          "partial": "Tag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unTag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unTags",
          "package": "penny",
          "signature": "[Tag]",
          "source": "src/Penny-Lincoln-Bits-Open.html#Tags",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unTags",
          "normalized": "[Tag]",
          "package": "penny",
          "partial": "Tags",
          "signature": "[Tag]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unTags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unTopLineLine",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Lincoln-Bits-Open.html#TopLineLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unTopLineLine",
          "package": "penny",
          "partial": "Top Line Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unTopLineLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unTopMemoLine",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny-Lincoln-Bits-Open.html#TopMemoLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Open",
          "module": "Penny.Lincoln.Bits.Open",
          "name": "unTopMemoLine",
          "package": "penny",
          "partial": "Top Memo Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Open.html#v:unTopMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "Price",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Price.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "Price",
          "package": "penny",
          "partial": "Price",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "CountPerUnit",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Price.html#CountPerUnit",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "CountPerUnit",
          "package": "penny",
          "partial": "Count Per Unit",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#t:CountPerUnit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "From",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Price.html#From",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "From",
          "package": "penny",
          "partial": "From",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#t:From"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "Price",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Price.html#Price",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "Price",
          "package": "penny",
          "partial": "Price",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#t:Price"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "To",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Price.html#To",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "To",
          "package": "penny",
          "partial": "To",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#t:To"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "CountPerUnit",
          "package": "penny",
          "signature": "CountPerUnit",
          "source": "src/Penny-Lincoln-Bits-Price.html#CountPerUnit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "CountPerUnit",
          "package": "penny",
          "partial": "Count Per Unit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#v:CountPerUnit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "From",
          "package": "penny",
          "signature": "From",
          "source": "src/Penny-Lincoln-Bits-Price.html#From",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "From",
          "package": "penny",
          "partial": "From",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#v:From"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "To",
          "package": "penny",
          "signature": "To",
          "source": "src/Penny-Lincoln-Bits-Price.html#To",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "To",
          "package": "penny",
          "partial": "To",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#v:To"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceeds only if From and To are different commodities.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "newPrice",
          "package": "penny",
          "signature": "From -\u003e To -\u003e CountPerUnit -\u003e Maybe Price",
          "source": "src/Penny-Lincoln-Bits-Price.html#newPrice",
          "type": "function"
        },
        "index": {
          "description": "Succeeds only if From and To are different commodities",
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "newPrice",
          "normalized": "From-\u003eTo-\u003eCountPerUnit-\u003eMaybe Price",
          "package": "penny",
          "partial": "Price",
          "signature": "From-\u003eTo-\u003eCountPerUnit-\u003eMaybe Price",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#v:newPrice"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "unCountPerUnit",
          "package": "penny",
          "signature": "QtyRep",
          "source": "src/Penny-Lincoln-Bits-Price.html#CountPerUnit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "unCountPerUnit",
          "package": "penny",
          "partial": "Count Per Unit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#v:unCountPerUnit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "unFrom",
          "package": "penny",
          "signature": "Commodity",
          "source": "src/Penny-Lincoln-Bits-Price.html#From",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "unFrom",
          "package": "penny",
          "partial": "From",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#v:unFrom"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Price",
          "name": "unTo",
          "package": "penny",
          "signature": "Commodity",
          "source": "src/Penny-Lincoln-Bits-Price.html#To",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Price",
          "module": "Penny.Lincoln.Bits.Price",
          "name": "unTo",
          "package": "penny",
          "partial": "To",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Price.html#v:unTo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003ePenny quantities. A quantity is simply a count (possibly\n fractional) of something. It does not have a commodity or a\n Debit/Credit.\n\u003c/p\u003e\u003cp\u003eQuantities are always greater than zero, even if infinitesimally so.\n\u003c/p\u003e\u003cp\u003eThere are two main types in this module: a quantity representation,\n or \u003ccode\u003e\u003ca\u003eQtyRep\u003c/a\u003e\u003c/code\u003e, and a quantity, or \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e.  To understand the\n difference, consider these numbers:\n\u003c/p\u003e\u003cpre\u003e 1364.25\n 1,364.25\n 1 364.25\n 1.364,25\n 1364,25\n\u003c/pre\u003e\u003cp\u003eThese are all different ways to represent the same quantity.  Each\n is a different quantity representation, or \u003ccode\u003e\u003ca\u003eQtyRep\u003c/a\u003e\u003c/code\u003e.  A \u003ccode\u003e\u003ca\u003eQtyRep\u003c/a\u003e\u003c/code\u003e\n stores information about each digit, each digit grouping character\n (which may be a comma, thin space, or period) and the radix point,\n if present (which may be a period or a comma.)\n\u003c/p\u003e\u003cp\u003eA \u003ccode\u003e\u003ca\u003eQtyRep\u003c/a\u003e\u003c/code\u003e can be converted to a \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e with \u003ccode\u003e\u003ca\u003etoQty\u003c/a\u003e\u003c/code\u003e.  A \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e is a\n quantity stripped of attributes related to its representation.  No\n floating point types are in a \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e; internally, a \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e consists\n of an integral significand and an integer representing the number\n of decimal places.  Though each \u003ccode\u003e\u003ca\u003eQtyRep\u003c/a\u003e\u003c/code\u003e is convertible to one and\n only one \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e, a single \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e can correspond to several \u003ccode\u003e\u003ca\u003eQtyRep\u003c/a\u003e\u003c/code\u003e.\n For example, each of the quantity representations shown above would\n return identical \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e after being converted with \u003ccode\u003e\u003ca\u003etoQty\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eYou can only perform arithmetic using \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e, not \u003ccode\u003e\u003ca\u003eQtyRep\u003c/a\u003e\u003c/code\u003e.  You can\n add or multiply \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e, which yields the result you would expect.\n You cannot perform ordinary subtraction on \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e, as this might\n yield a result which is less than or equal to zero; remember that\n \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e and \u003ccode\u003e\u003ca\u003eQtyRep\u003c/a\u003e\u003c/code\u003e are always greater than zero, even if\n infinitesimally so.  Instead, \u003ccode\u003e\u003ca\u003edifference\u003c/a\u003e\u003c/code\u003e will tell you if there\n is a difference between two \u003ccode\u003e\u003ca\u003eQty\u003c/a\u003e\u003c/code\u003e and, if so, which is greater and\n by how much.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Qty",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html",
          "type": "module"
        },
        "index": {
          "description": "Penny quantities quantity is simply count possibly fractional of something It does not have commodity or Debit Credit Quantities are always greater than zero even if infinitesimally so There are two main types in this module quantity representation or QtyRep and quantity or Qty To understand the difference consider these numbers These are all different ways to represent the same quantity Each is different quantity representation or QtyRep QtyRep stores information about each digit each digit grouping character which may be comma thin space or period and the radix point if present which may be period or comma QtyRep can be converted to Qty with toQty Qty is quantity stripped of attributes related to its representation No floating point types are in Qty internally Qty consists of an integral significand and an integer representing the number of decimal places Though each QtyRep is convertible to one and only one Qty single Qty can correspond to several QtyRep For example each of the quantity representations shown above would return identical Qty after being converted with toQty You can only perform arithmetic using Qty not QtyRep You can add or multiply Qty which yields the result you would expect You cannot perform ordinary subtraction on Qty as this might yield result which is less than or equal to zero remember that Qty and QtyRep are always greater than zero even if infinitesimally so Instead difference will tell you if there is difference between two Qty and if so which is greater and by how much",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Qty",
          "package": "penny",
          "partial": "Qty",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe digit grouping character when the radix is a comma.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "CommaGrp",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#CommaGrp",
          "type": "data"
        },
        "index": {
          "description": "The digit grouping character when the radix is comma",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "CommaGrp",
          "package": "penny",
          "partial": "Comma Grp",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:CommaGrp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Difference",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Difference",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Difference",
          "package": "penny",
          "partial": "Difference",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:Difference"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Digit",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Digit",
          "package": "penny",
          "partial": "Digit",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:Digit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "DigitList",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#DigitList",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "DigitList",
          "package": "penny",
          "partial": "Digit List",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:DigitList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Digits",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digits",
          "type": "class"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Digits",
          "package": "penny",
          "partial": "Digits",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:Digits"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll of the digits on a single side of a radix point. Typically\n this is parameterized on a type that represents the grouping\n character.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "GroupedDigits",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#GroupedDigits",
          "type": "data"
        },
        "index": {
          "description": "All of the digits on single side of radix point Typically this is parameterized on type that represents the grouping character",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "GroupedDigits",
          "package": "penny",
          "partial": "Grouped Digits",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:GroupedDigits"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConverting a type that represents a digit grouping character to\n the underlying character itself.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Grouper",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Grouper",
          "type": "class"
        },
        "index": {
          "description": "Converting type that represents digit grouping character to the underlying character itself",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Grouper",
          "package": "penny",
          "partial": "Grouper",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:Grouper"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "HasQty",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#HasQty",
          "type": "class"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "HasQty",
          "package": "penny",
          "partial": "Has Qty",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:HasQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "PartyVotes",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#PartyVotes",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "PartyVotes",
          "package": "penny",
          "partial": "Party Votes",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:PartyVotes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe digit grouping character when the radix is a period.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "PeriodGrp",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#PeriodGrp",
          "type": "data"
        },
        "index": {
          "description": "The digit grouping character when the radix is period",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "PeriodGrp",
          "package": "penny",
          "partial": "Period Grp",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:PeriodGrp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Places",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Places",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Places",
          "package": "penny",
          "partial": "Places",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:Places"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA quantity is always greater than zero. Various odd questions\n happen if quantities can be zero. For instance, what if you have a\n debit whose quantity is zero? Does it require a balancing credit\n that is also zero? And how can you have a debit of zero anyway?\n\u003c/p\u003e\u003cp\u003e\u003cem\u003eWARNING\u003c/em\u003e - before doing comparisons or equality tests\n\u003c/p\u003e\u003cp\u003eThe Eq instance is derived. Therefore q1 == q2 only if q1 and q2\n have both the same significand and the same number of places. You\n may instead want \u003ccode\u003e\u003ca\u003eequivalent\u003c/a\u003e\u003c/code\u003e. Similarly, the Ord instance is\n derived. It compares based on the integral value of the significand\n and of the exponent. You may instead want \u003ccode\u003e\u003ca\u003ecompareQty\u003c/a\u003e\u003c/code\u003e, which\n compares after equalizing the exponents.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Qty",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Qty",
          "type": "data"
        },
        "index": {
          "description": "quantity is always greater than zero Various odd questions happen if quantities can be zero For instance what if you have debit whose quantity is zero Does it require balancing credit that is also zero And how can you have debit of zero anyway WARNING before doing comparisons or equality tests The Eq instance is derived Therefore q1 q2 only if q1 and q2 have both the same significand and the same number of places You may instead want equivalent Similarly the Ord instance is derived It compares based on the integral value of the significand and of the exponent You may instead want compareQty which compares after equalizing the exponents",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Qty",
          "package": "penny",
          "partial": "Qty",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:Qty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "QtyRep",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#QtyRep",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "QtyRep",
          "package": "penny",
          "partial": "Qty Rep",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:QtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Radix",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Radix",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Radix",
          "package": "penny",
          "partial": "Radix",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:Radix"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "SeatsWon",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#SeatsWon",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "SeatsWon",
          "package": "penny",
          "partial": "Seats Won",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:SeatsWon"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Signif",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Signif",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Signif",
          "package": "penny",
          "partial": "Signif",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:Signif"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "TotSeats",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#TotSeats",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "TotSeats",
          "package": "penny",
          "partial": "Tot Seats",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:TotSeats"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA quantity representation that has both a whole number and a\n fractional part. Abstract because there must be a non-zero digit in\n here somewhere, which \u003ccode\u003e\u003ca\u003ewholeFrac\u003c/a\u003e\u003c/code\u003e checks for.  Typically this is\n parameterized on an instance of the Digits class, such as DigitList\n or GroupedDigits.  This allows separate types for values that\n cannot be grouped as well as those that can.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeFrac",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#WholeFrac",
          "type": "data"
        },
        "index": {
          "description": "quantity representation that has both whole number and fractional part Abstract because there must be non-zero digit in here somewhere which wholeFrac checks for Typically this is parameterized on an instance of the Digits class such as DigitList or GroupedDigits This allows separate types for values that cannot be grouped as well as those that can",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeFrac",
          "package": "penny",
          "partial": "Whole Frac",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:WholeFrac"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA quantity representation that has a whole part only. Abstract\n because there must be a non-zero digit in here somewhere, which\n \u003ccode\u003e\u003ca\u003ewholeOnly\u003c/a\u003e\u003c/code\u003e checks for.  Typically this is parameterized on an\n instance of the Digits class, such as DigitList or GroupedDigits.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeOnly",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#WholeOnly",
          "type": "data"
        },
        "index": {
          "description": "quantity representation that has whole part only Abstract because there must be non-zero digit in here somewhere which wholeOnly checks for Typically this is parameterized on an instance of the Digits class such as DigitList or GroupedDigits",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeOnly",
          "package": "penny",
          "partial": "Whole Only",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:WholeOnly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTypically this is parameterized on an instance of the Digits\n class, such as DigitList or GroupedDigits.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeOrFrac",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#WholeOrFrac",
          "type": "newtype"
        },
        "index": {
          "description": "Typically this is parameterized on an instance of the Digits class such as DigitList or GroupedDigits",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeOrFrac",
          "package": "penny",
          "partial": "Whole Or Frac",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:WholeOrFrac"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeOrFracResult",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#WholeOrFracResult",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeOrFracResult",
          "package": "penny",
          "partial": "Whole Or Frac Result",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#t:WholeOrFracResult"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D0",
          "package": "penny",
          "signature": "D0",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D0",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D0"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D1",
          "package": "penny",
          "signature": "D1",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D1",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D2",
          "package": "penny",
          "signature": "D2",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D2",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D2"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D3",
          "package": "penny",
          "signature": "D3",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D3",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D3"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D4",
          "package": "penny",
          "signature": "D4",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D4",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D4"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D5",
          "package": "penny",
          "signature": "D5",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D5",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D5"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D6",
          "package": "penny",
          "signature": "D6",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D6",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D6"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D7",
          "package": "penny",
          "signature": "D7",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D7",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D7"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D8",
          "package": "penny",
          "signature": "D8",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D8",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D8"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D9",
          "package": "penny",
          "signature": "D9",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "D9",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:D9"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "DigitList",
          "package": "penny",
          "signature": "DigitList",
          "source": "src/Penny-Lincoln-Bits-Qty.html#DigitList",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "DigitList",
          "package": "penny",
          "partial": "Digit List",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:DigitList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Equal",
          "package": "penny",
          "signature": "Equal",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Difference",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "Equal",
          "package": "penny",
          "partial": "Equal",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:Equal"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "GroupedDigits",
          "package": "penny",
          "signature": "GroupedDigits",
          "source": "src/Penny-Lincoln-Bits-Qty.html#GroupedDigits",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "GroupedDigits",
          "package": "penny",
          "partial": "Grouped Digits",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:GroupedDigits"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "LeftBiggerBy",
          "package": "penny",
          "signature": "LeftBiggerBy Qty",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Difference",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "LeftBiggerBy",
          "package": "penny",
          "partial": "Left Bigger By",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:LeftBiggerBy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "QGrouped",
          "package": "penny",
          "signature": "QGrouped (Either (WholeOrFrac (GroupedDigits PeriodGrp)) (WholeOrFrac (GroupedDigits CommaGrp)))",
          "source": "src/Penny-Lincoln-Bits-Qty.html#QtyRep",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "QGrouped",
          "package": "penny",
          "partial": "QGrouped",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:QGrouped"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "QNoGrouping",
          "package": "penny",
          "signature": "QNoGrouping (WholeOrFrac DigitList) Radix",
          "source": "src/Penny-Lincoln-Bits-Qty.html#QtyRep",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "QNoGrouping",
          "package": "penny",
          "partial": "QNo Grouping",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:QNoGrouping"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "RightBiggerBy",
          "package": "penny",
          "signature": "RightBiggerBy Qty",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Difference",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "RightBiggerBy",
          "package": "penny",
          "partial": "Right Bigger By",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:RightBiggerBy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeOrFrac",
          "package": "penny",
          "signature": "WholeOrFrac",
          "source": "src/Penny-Lincoln-Bits-Qty.html#WholeOrFrac",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "WholeOrFrac",
          "package": "penny",
          "partial": "Whole Or Frac",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:WholeOrFrac"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "add",
          "package": "penny",
          "signature": "Qty -\u003e Qty -\u003e Qty",
          "source": "src/Penny-Lincoln-Bits-Qty.html#add",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "add",
          "normalized": "Qty-\u003eQty-\u003eQty",
          "package": "penny",
          "signature": "Qty-\u003eQty-\u003eQty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:add"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAllocate a Qty proportionally so that the sum of the results adds\n up to a given Qty. Fails if the allocation cannot be made (e.g. if\n it is impossible to allocate without overflowing Decimal.) The\n result will always add up to the given sum.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "allocate",
          "package": "penny",
          "signature": "Qty -\u003e (Qty, [Qty]) -\u003e (Qty, [Qty])",
          "source": "src/Penny-Lincoln-Bits-Qty.html#allocate",
          "type": "function"
        },
        "index": {
          "description": "Allocate Qty proportionally so that the sum of the results adds up to given Qty Fails if the allocation cannot be made e.g if it is impossible to allocate without overflowing Decimal The result will always add up to the given sum",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "allocate",
          "normalized": "Qty-\u003e(Qty,[Qty])-\u003e(Qty,[Qty])",
          "package": "penny",
          "signature": "Qty-\u003e(Qty,[Qty])-\u003e(Qty,[Qty])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:allocate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven a list of QtyRep, determine the most common radix and\n grouping that are used.  If a single QtyRep is grouped, then the\n result is also grouped.  The most common grouping character\n determines which grouping character is used.\n\u003c/p\u003e\u003cp\u003eIf no QtyRep are grouped, then the most common radix point is used\n and the result is not grouped.\n\u003c/p\u003e\u003cp\u003eIf there is no radix point found, returns Nothing.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "bestRadGroup",
          "package": "penny",
          "signature": "[QtyRep] -\u003e Maybe (S3 Radix PeriodGrp CommaGrp)",
          "source": "src/Penny-Lincoln-Bits-Qty.html#bestRadGroup",
          "type": "function"
        },
        "index": {
          "description": "Given list of QtyRep determine the most common radix and grouping that are used If single QtyRep is grouped then the result is also grouped The most common grouping character determines which grouping character is used If no QtyRep are grouped then the most common radix point is used and the result is not grouped If there is no radix point found returns Nothing",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "bestRadGroup",
          "normalized": "[QtyRep]-\u003eMaybe(S Radix PeriodGrp CommaGrp)",
          "package": "penny",
          "partial": "Rad Group",
          "signature": "[QtyRep]-\u003eMaybe(S Radix PeriodGrp CommaGrp)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:bestRadGroup"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompares Qty after equalizing their exponents.\n\u003c/p\u003e\u003cpre\u003e compareQty (newQty 15 1) (newQty 1500 3) == EQ\n\u003c/pre\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "compareQty",
          "package": "penny",
          "signature": "Qty -\u003e Qty -\u003e Ordering",
          "source": "src/Penny-Lincoln-Bits-Qty.html#compareQty",
          "type": "function"
        },
        "index": {
          "description": "Compares Qty after equalizing their exponents compareQty newQty newQty EQ",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "compareQty",
          "normalized": "Qty-\u003eQty-\u003eOrdering",
          "package": "penny",
          "partial": "Qty",
          "signature": "Qty-\u003eQty-\u003eOrdering",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:compareQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSubtract the second Qty from the first, after equalizing their\n exponents.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "difference",
          "package": "penny",
          "signature": "Qty -\u003e Qty -\u003e Difference",
          "source": "src/Penny-Lincoln-Bits-Qty.html#difference",
          "type": "function"
        },
        "index": {
          "description": "Subtract the second Qty from the first after equalizing their exponents",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "difference",
          "normalized": "Qty-\u003eQty-\u003eDifference",
          "package": "penny",
          "signature": "Qty-\u003eQty-\u003eDifference",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:difference"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "digits",
          "package": "penny",
          "signature": "a -\u003e DigitList",
          "source": "src/Penny-Lincoln-Bits-Qty.html#digits",
          "type": "method"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "digits",
          "normalized": "a-\u003eDigitList",
          "package": "penny",
          "signature": "a-\u003eDigitList",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:digits"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDivision. There can be no division by zero errors, as a Qty is\n never zero.  Converting to a floating-point number destroys\n precision, so be sure this is what you want.  Sometimes it is\n useful where precision is not needed (e.g. percentages).\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "divide",
          "package": "penny",
          "signature": "Qty -\u003e Qty -\u003e a",
          "source": "src/Penny-Lincoln-Bits-Qty.html#divide",
          "type": "function"
        },
        "index": {
          "description": "Division There can be no division by zero errors as Qty is never zero Converting to floating-point number destroys precision so be sure this is what you want Sometimes it is useful where precision is not needed e.g percentages",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "divide",
          "normalized": "Qty-\u003eQty-\u003ea",
          "package": "penny",
          "signature": "Qty-\u003eQty-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:divide"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe first chunk of digits\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "dsFirstPart",
          "package": "penny",
          "signature": "DigitList",
          "source": "src/Penny-Lincoln-Bits-Qty.html#GroupedDigits",
          "type": "function"
        },
        "index": {
          "description": "The first chunk of digits",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "dsFirstPart",
          "package": "penny",
          "partial": "First Part",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:dsFirstPart"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOptional subsequent chunks of digits. Each is a grouping\n character followed by additional digits.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "dsNextParts",
          "package": "penny",
          "signature": "[(a, DigitList)]",
          "source": "src/Penny-Lincoln-Bits-Qty.html#GroupedDigits",
          "type": "function"
        },
        "index": {
          "description": "Optional subsequent chunks of digits Each is grouping character followed by additional digits",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "dsNextParts",
          "normalized": "[(a,DigitList)]",
          "package": "penny",
          "partial": "Next Parts",
          "signature": "[(a,DigitList)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:dsNextParts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "frac",
          "package": "penny",
          "signature": "WholeFrac a -\u003e a",
          "source": "src/Penny-Lincoln-Bits-Qty.html#frac",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "frac",
          "normalized": "WholeFrac a-\u003ea",
          "package": "penny",
          "signature": "WholeFrac a-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:frac"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "groupChar",
          "package": "penny",
          "signature": "a -\u003e Char",
          "source": "src/Penny-Lincoln-Bits-Qty.html#groupChar",
          "type": "method"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "groupChar",
          "normalized": "a-\u003eChar",
          "package": "penny",
          "partial": "Char",
          "signature": "a-\u003eChar",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:groupChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAllocates integers using the largest remainder method. This is\n the method used to allocate parliamentary seats in many countries,\n so the types are named accordingly.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "largestRemainderMethod",
          "package": "penny",
          "signature": "TotSeats-\u003e [PartyVotes]-\u003e [SeatsWon]",
          "type": "function"
        },
        "index": {
          "description": "Allocates integers using the largest remainder method This is the method used to allocate parliamentary seats in many countries so the types are named accordingly",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "largestRemainderMethod",
          "normalized": "TotSeats-\u003e[PartyVotes]-\u003e[SeatsWon]",
          "package": "penny",
          "partial": "Remainder Method",
          "signature": "TotSeats-\u003e[PartyVotes]-\u003e[SeatsWon]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:largestRemainderMethod"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMultiplication\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "mult",
          "package": "penny",
          "signature": "Qty -\u003e Qty -\u003e Qty",
          "source": "src/Penny-Lincoln-Bits-Qty.html#mult",
          "type": "function"
        },
        "index": {
          "description": "Multiplication",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "mult",
          "normalized": "Qty-\u003eQty-\u003eQty",
          "package": "penny",
          "signature": "Qty-\u003eQty-\u003eQty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:mult"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEnsures that the significand is greater than zero and the number\n of decimal places is at least zero.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "newQty",
          "package": "penny",
          "signature": "Signif -\u003e Places -\u003e Maybe Qty",
          "source": "src/Penny-Lincoln-Bits-Qty.html#newQty",
          "type": "function"
        },
        "index": {
          "description": "Ensures that the significand is greater than zero and the number of decimal places is at least zero",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "newQty",
          "normalized": "Signif-\u003ePlaces-\u003eMaybe Qty",
          "package": "penny",
          "partial": "Qty",
          "signature": "Signif-\u003ePlaces-\u003eMaybe Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:newQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe number of decimal places.  For instance, in \u003ccode\u003e1.500\u003c/code\u003e, the\n significand is 1500 and the number of places is 3.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "places",
          "package": "penny",
          "signature": "Qty -\u003e Integer",
          "source": "src/Penny-Lincoln-Bits-Qty.html#places",
          "type": "function"
        },
        "index": {
          "description": "The number of decimal places For instance in the significand is and the number of places is",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "places",
          "normalized": "Qty-\u003eInteger",
          "package": "penny",
          "signature": "Qty-\u003eInteger",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:places"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSignificand 1, exponent 0\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "qtyOne",
          "package": "penny",
          "signature": "Qty",
          "source": "src/Penny-Lincoln-Bits-Qty.html#qtyOne",
          "type": "function"
        },
        "index": {
          "description": "Significand exponent",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "qtyOne",
          "package": "penny",
          "partial": "One",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:qtyOne"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "qtyToRep",
          "package": "penny",
          "signature": "S3 Radix PeriodGrp CommaGrp -\u003e Qty -\u003e QtyRep",
          "source": "src/Penny-Lincoln-Bits-Qty.html#qtyToRep",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "qtyToRep",
          "normalized": "S Radix PeriodGrp CommaGrp-\u003eQty-\u003eQtyRep",
          "package": "penny",
          "partial": "To Rep",
          "signature": "S Radix PeriodGrp CommaGrp-\u003eQty-\u003eQtyRep",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:qtyToRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "qtyToRepGrouped",
          "package": "penny",
          "signature": "g -\u003e Qty -\u003e WholeOrFrac (GroupedDigits g)",
          "source": "src/Penny-Lincoln-Bits-Qty.html#qtyToRepGrouped",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "qtyToRepGrouped",
          "normalized": "a-\u003eQty-\u003eWholeOrFrac(GroupedDigits a)",
          "package": "penny",
          "partial": "To Rep Grouped",
          "signature": "g-\u003eQty-\u003eWholeOrFrac(GroupedDigits g)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:qtyToRepGrouped"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "qtyToRepNoGrouping",
          "package": "penny",
          "signature": "Qty -\u003e WholeOrFrac DigitList",
          "source": "src/Penny-Lincoln-Bits-Qty.html#qtyToRepNoGrouping",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "qtyToRepNoGrouping",
          "normalized": "Qty-\u003eWholeOrFrac DigitList",
          "package": "penny",
          "partial": "To Rep No Grouping",
          "signature": "Qty-\u003eWholeOrFrac DigitList",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:qtyToRepNoGrouping"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "showQtyRep",
          "package": "penny",
          "signature": "QtyRep -\u003e Text",
          "source": "src/Penny-Lincoln-Bits-Qty.html#showQtyRep",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "showQtyRep",
          "normalized": "QtyRep-\u003eText",
          "package": "penny",
          "partial": "Qty Rep",
          "signature": "QtyRep-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:showQtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "showRadix",
          "package": "penny",
          "signature": "Radix -\u003e Text",
          "source": "src/Penny-Lincoln-Bits-Qty.html#showRadix",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "showRadix",
          "normalized": "Radix-\u003eText",
          "package": "penny",
          "partial": "Radix",
          "signature": "Radix-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:showRadix"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe significand.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "signif",
          "package": "penny",
          "signature": "Qty -\u003e Integer",
          "source": "src/Penny-Lincoln-Bits-Qty.html#signif",
          "type": "function"
        },
        "index": {
          "description": "The significand",
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "signif",
          "normalized": "Qty-\u003eInteger",
          "package": "penny",
          "signature": "Qty-\u003eInteger",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:signif"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "toQty",
          "package": "penny",
          "signature": "a -\u003e Qty",
          "source": "src/Penny-Lincoln-Bits-Qty.html#toQty",
          "type": "method"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "toQty",
          "normalized": "a-\u003eQty",
          "package": "penny",
          "partial": "Qty",
          "signature": "a-\u003eQty",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:toQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "unDigitList",
          "package": "penny",
          "signature": "NonEmpty Digit",
          "source": "src/Penny-Lincoln-Bits-Qty.html#DigitList",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "unDigitList",
          "package": "penny",
          "partial": "Digit List",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:unDigitList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "unWholeOnly",
          "package": "penny",
          "signature": "WholeOnly a -\u003e a",
          "source": "src/Penny-Lincoln-Bits-Qty.html#unWholeOnly",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "unWholeOnly",
          "normalized": "WholeOnly a-\u003ea",
          "package": "penny",
          "partial": "Whole Only",
          "signature": "WholeOnly a-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:unWholeOnly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "unWholeOrFrac",
          "package": "penny",
          "signature": "Either (WholeOnly a) (WholeFrac a)",
          "source": "src/Penny-Lincoln-Bits-Qty.html#WholeOrFrac",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "unWholeOrFrac",
          "package": "penny",
          "partial": "Whole Or Frac",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:unWholeOrFrac"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "whole",
          "package": "penny",
          "signature": "WholeFrac a -\u003e a",
          "source": "src/Penny-Lincoln-Bits-Qty.html#whole",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "whole",
          "normalized": "WholeFrac a-\u003ea",
          "package": "penny",
          "signature": "WholeFrac a-\u003ea",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:whole"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "wholeFrac",
          "package": "penny",
          "signature": "a-\u003e a-\u003e Maybe (WholeFrac a)",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "wholeFrac",
          "normalized": "a-\u003ea-\u003eMaybe(WholeFrac a)",
          "package": "penny",
          "partial": "Frac",
          "signature": "a-\u003ea-\u003eMaybe(WholeFrac a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:wholeFrac"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "wholeOnly",
          "package": "penny",
          "signature": "a -\u003e Maybe (WholeOnly a)",
          "source": "src/Penny-Lincoln-Bits-Qty.html#wholeOnly",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "wholeOnly",
          "normalized": "a-\u003eMaybe(WholeOnly a)",
          "package": "penny",
          "partial": "Only",
          "signature": "a-\u003eMaybe(WholeOnly a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:wholeOnly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "wholeOrFrac",
          "package": "penny",
          "signature": "GroupedDigits a-\u003e Maybe (GroupedDigits a)-\u003e Maybe (WholeOrFracResult a)",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "wholeOrFrac",
          "normalized": "GroupedDigits a-\u003eMaybe(GroupedDigits a)-\u003eMaybe(WholeOrFracResult a)",
          "package": "penny",
          "partial": "Or Frac",
          "signature": "GroupedDigits a-\u003eMaybe(GroupedDigits a)-\u003eMaybe(WholeOrFracResult a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:wholeOrFrac"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "wholeOrFracToQtyRep",
          "package": "penny",
          "signature": "Either (WholeOrFracResult PeriodGrp) (WholeOrFracResult CommaGrp) -\u003e QtyRep",
          "source": "src/Penny-Lincoln-Bits-Qty.html#wholeOrFracToQtyRep",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits Qty",
          "module": "Penny.Lincoln.Bits.Qty",
          "name": "wholeOrFracToQtyRep",
          "normalized": "Either(WholeOrFracResult PeriodGrp)(WholeOrFracResult CommaGrp)-\u003eQtyRep",
          "package": "penny",
          "partial": "Or Frac To Qty Rep",
          "signature": "Either(WholeOrFracResult PeriodGrp)(WholeOrFracResult CommaGrp)-\u003eQtyRep",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits-Qty.html#v:wholeOrFracToQtyRep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eEssential data types used to make Transactions and Postings.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Bits",
          "name": "Bits",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits.html",
          "type": "module"
        },
        "index": {
          "description": "Essential data types used to make Transactions and Postings",
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "Bits",
          "package": "penny",
          "partial": "Bits",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll Postings have this data.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingCore",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "data"
        },
        "index": {
          "description": "All Postings have this data",
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingCore",
          "package": "penny",
          "partial": "Posting Core",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#t:PostingCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll the data that a Posting might have.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingData",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits.html#PostingData",
          "type": "data"
        },
        "index": {
          "description": "All the data that Posting might have",
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingData",
          "package": "penny",
          "partial": "Posting Data",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#t:PostingData"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePostings from files have this additional data.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingFileMeta",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits.html#PostingFileMeta",
          "type": "data"
        },
        "index": {
          "description": "Postings from files have this additional data",
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingFileMeta",
          "package": "penny",
          "partial": "Posting File Meta",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#t:PostingFileMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "PricePoint",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits.html#PricePoint",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "PricePoint",
          "package": "penny",
          "partial": "Price Point",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#t:PricePoint"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEvery TopLine has this data.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineCore",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits.html#TopLineCore",
          "type": "data"
        },
        "index": {
          "description": "Every TopLine has this data",
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineCore",
          "package": "penny",
          "partial": "Top Line Core",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#t:TopLineCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAll the data that a TopLine might have.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineData",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits.html#TopLineData",
          "type": "data"
        },
        "index": {
          "description": "All the data that TopLine might have",
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineData",
          "package": "penny",
          "partial": "Top Line Data",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#t:TopLineData"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTopLines from files have this metadata.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineFileMeta",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits.html#TopLineFileMeta",
          "type": "data"
        },
        "index": {
          "description": "TopLines from files have this metadata",
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineFileMeta",
          "package": "penny",
          "partial": "Top Line File Meta",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#t:TopLineFileMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "PostingCore",
          "package": "penny",
          "signature": "PostingCore",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingCore",
          "package": "penny",
          "partial": "Posting Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:PostingCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "PostingData",
          "package": "penny",
          "signature": "PostingData",
          "source": "src/Penny-Lincoln-Bits.html#PostingData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingData",
          "package": "penny",
          "partial": "Posting Data",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:PostingData"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "PostingFileMeta",
          "package": "penny",
          "signature": "PostingFileMeta",
          "source": "src/Penny-Lincoln-Bits.html#PostingFileMeta",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "PostingFileMeta",
          "package": "penny",
          "partial": "Posting File Meta",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:PostingFileMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "PricePoint",
          "package": "penny",
          "signature": "PricePoint",
          "source": "src/Penny-Lincoln-Bits.html#PricePoint",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "PricePoint",
          "package": "penny",
          "partial": "Price Point",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:PricePoint"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineCore",
          "package": "penny",
          "signature": "TopLineCore",
          "source": "src/Penny-Lincoln-Bits.html#TopLineCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineCore",
          "package": "penny",
          "partial": "Top Line Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:TopLineCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineData",
          "package": "penny",
          "signature": "TopLineData",
          "source": "src/Penny-Lincoln-Bits.html#TopLineData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineData",
          "package": "penny",
          "partial": "Top Line Data",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:TopLineData"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineFileMeta",
          "package": "penny",
          "signature": "TopLineFileMeta",
          "source": "src/Penny-Lincoln-Bits.html#TopLineFileMeta",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "TopLineFileMeta",
          "package": "penny",
          "partial": "Top Line File Meta",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:TopLineFileMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "dateTime",
          "package": "penny",
          "signature": "DateTime",
          "source": "src/Penny-Lincoln-Bits.html#PricePoint",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "dateTime",
          "package": "penny",
          "partial": "Time",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:dateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "emptyPostingCore",
          "package": "penny",
          "signature": "Account -\u003e PostingCore",
          "source": "src/Penny-Lincoln-Bits.html#emptyPostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "emptyPostingCore",
          "normalized": "Account-\u003ePostingCore",
          "package": "penny",
          "partial": "Posting Core",
          "signature": "Account-\u003ePostingCore",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:emptyPostingCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "emptyPostingData",
          "package": "penny",
          "signature": "Account -\u003e PostingData",
          "source": "src/Penny-Lincoln-Bits.html#emptyPostingData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "emptyPostingData",
          "normalized": "Account-\u003ePostingData",
          "package": "penny",
          "partial": "Posting Data",
          "signature": "Account-\u003ePostingData",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:emptyPostingData"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "emptyTopLineCore",
          "package": "penny",
          "signature": "DateTime -\u003e TopLineCore",
          "source": "src/Penny-Lincoln-Bits.html#emptyTopLineCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "emptyTopLineCore",
          "normalized": "DateTime-\u003eTopLineCore",
          "package": "penny",
          "partial": "Top Line Core",
          "signature": "DateTime-\u003eTopLineCore",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:emptyTopLineCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "emptyTopLineData",
          "package": "penny",
          "signature": "DateTime -\u003e TopLineData",
          "source": "src/Penny-Lincoln-Bits.html#emptyTopLineData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "emptyTopLineData",
          "normalized": "DateTime-\u003eTopLineData",
          "package": "penny",
          "partial": "Top Line Data",
          "signature": "DateTime-\u003eTopLineData",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:emptyTopLineData"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pAccount",
          "package": "penny",
          "signature": "Account",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pAccount",
          "package": "penny",
          "partial": "Account",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pAccount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pFilePosting",
          "package": "penny",
          "signature": "FilePosting",
          "source": "src/Penny-Lincoln-Bits.html#PostingFileMeta",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pFlag",
          "package": "penny",
          "signature": "Maybe Flag",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pFlag",
          "package": "penny",
          "partial": "Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pFlag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pMemo",
          "package": "penny",
          "signature": "Maybe Memo",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pMemo",
          "package": "penny",
          "partial": "Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pNumber",
          "package": "penny",
          "signature": "Maybe Number",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pNumber",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pPayee",
          "package": "penny",
          "signature": "Maybe Payee",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pPayee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pPostingLine",
          "package": "penny",
          "signature": "PostingLine",
          "source": "src/Penny-Lincoln-Bits.html#PostingFileMeta",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pPostingLine",
          "package": "penny",
          "partial": "Posting Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pPostingLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pSide",
          "package": "penny",
          "signature": "Maybe Side",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pSide",
          "package": "penny",
          "partial": "Side",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pSide"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pSpaceBetween",
          "package": "penny",
          "signature": "Maybe SpaceBetween",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pSpaceBetween",
          "package": "penny",
          "partial": "Space Between",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pSpaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pTags",
          "package": "penny",
          "signature": "Tags",
          "source": "src/Penny-Lincoln-Bits.html#PostingCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pTags",
          "package": "penny",
          "partial": "Tags",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pTags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pdCore",
          "package": "penny",
          "signature": "PostingCore",
          "source": "src/Penny-Lincoln-Bits.html#PostingData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pdCore",
          "package": "penny",
          "partial": "Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pdCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pdFileMeta",
          "package": "penny",
          "signature": "Maybe PostingFileMeta",
          "source": "src/Penny-Lincoln-Bits.html#PostingData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pdFileMeta",
          "package": "penny",
          "partial": "File Meta",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pdFileMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "pdGlobal",
          "package": "penny",
          "signature": "Maybe GlobalPosting",
          "source": "src/Penny-Lincoln-Bits.html#PostingData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "pdGlobal",
          "package": "penny",
          "partial": "Global",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:pdGlobal"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "ppSide",
          "package": "penny",
          "signature": "Maybe Side",
          "source": "src/Penny-Lincoln-Bits.html#PricePoint",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "ppSide",
          "package": "penny",
          "partial": "Side",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:ppSide"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "ppSpaceBetween",
          "package": "penny",
          "signature": "Maybe SpaceBetween",
          "source": "src/Penny-Lincoln-Bits.html#PricePoint",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "ppSpaceBetween",
          "package": "penny",
          "partial": "Space Between",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:ppSpaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "price",
          "package": "penny",
          "signature": "Price",
          "source": "src/Penny-Lincoln-Bits.html#PricePoint",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "price",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:price"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "priceLine",
          "package": "penny",
          "signature": "Maybe PriceLine",
          "source": "src/Penny-Lincoln-Bits.html#PricePoint",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "priceLine",
          "package": "penny",
          "partial": "Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:priceLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tDateTime",
          "package": "penny",
          "signature": "DateTime",
          "source": "src/Penny-Lincoln-Bits.html#TopLineCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tDateTime",
          "package": "penny",
          "partial": "Date Time",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tDateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tFileTransaction",
          "package": "penny",
          "signature": "FileTransaction",
          "source": "src/Penny-Lincoln-Bits.html#TopLineFileMeta",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tFilename",
          "package": "penny",
          "signature": "Filename",
          "source": "src/Penny-Lincoln-Bits.html#TopLineFileMeta",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tFilename",
          "package": "penny",
          "partial": "Filename",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tFilename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tFlag",
          "package": "penny",
          "signature": "Maybe Flag",
          "source": "src/Penny-Lincoln-Bits.html#TopLineCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tFlag",
          "package": "penny",
          "partial": "Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tFlag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tMemo",
          "package": "penny",
          "signature": "Maybe Memo",
          "source": "src/Penny-Lincoln-Bits.html#TopLineCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tMemo",
          "package": "penny",
          "partial": "Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tNumber",
          "package": "penny",
          "signature": "Maybe Number",
          "source": "src/Penny-Lincoln-Bits.html#TopLineCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tNumber",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tPayee",
          "package": "penny",
          "signature": "Maybe Payee",
          "source": "src/Penny-Lincoln-Bits.html#TopLineCore",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tPayee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tTopLineLine",
          "package": "penny",
          "signature": "TopLineLine",
          "source": "src/Penny-Lincoln-Bits.html#TopLineFileMeta",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tTopLineLine",
          "package": "penny",
          "partial": "Top Line Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tTopLineLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tTopMemoLine",
          "package": "penny",
          "signature": "Maybe TopMemoLine",
          "source": "src/Penny-Lincoln-Bits.html#TopLineFileMeta",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tTopMemoLine",
          "package": "penny",
          "partial": "Top Memo Line",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tTopMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tlCore",
          "package": "penny",
          "signature": "TopLineCore",
          "source": "src/Penny-Lincoln-Bits.html#TopLineData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tlCore",
          "package": "penny",
          "partial": "Core",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tlCore"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tlFileMeta",
          "package": "penny",
          "signature": "Maybe TopLineFileMeta",
          "source": "src/Penny-Lincoln-Bits.html#TopLineData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tlFileMeta",
          "package": "penny",
          "partial": "File Meta",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tlFileMeta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Bits",
          "name": "tlGlobal",
          "package": "penny",
          "signature": "Maybe GlobalTransaction",
          "source": "src/Penny-Lincoln-Bits.html#TopLineData",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Bits",
          "module": "Penny.Lincoln.Bits",
          "name": "tlGlobal",
          "package": "penny",
          "partial": "Global",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Bits.html#v:tlGlobal"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003ePartial functions that make common types in Lincoln. Some data\n types in Lincoln are deeply nested, with TextNonEmpty nested inside\n of a newtype, nested inside of a NonEmptyList, nested inside\n of... :) All the nesting ensures to the maximum extent possible\n that the type system reflects the restrictions that exist on\n Penny's data. For example, it would make no sense to have an empty\n account (that is, an account with no sub-accounts) or a sub-account\n whose name is an empty Text.\n\u003c/p\u003e\u003cp\u003eThe disadvantage of the nesting is that building these data types\n can be tedious if, for example, you want to build some data within\n a short custom Haskell program. Thus, this module.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Builders",
          "name": "Builders",
          "package": "penny",
          "source": "src/Penny-Lincoln-Builders.html",
          "type": "module"
        },
        "index": {
          "description": "Partial functions that make common types in Lincoln Some data types in Lincoln are deeply nested with TextNonEmpty nested inside of newtype nested inside of NonEmptyList nested inside of All the nesting ensures to the maximum extent possible that the type system reflects the restrictions that exist on Penny data For example it would make no sense to have an empty account that is an account with no sub-accounts or sub-account whose name is an empty Text The disadvantage of the nesting is that building these data types can be tedious if for example you want to build some data within short custom Haskell program Thus this module",
          "hierarchy": "Penny Lincoln Builders",
          "module": "Penny.Lincoln.Builders",
          "name": "Builders",
          "package": "penny",
          "partial": "Builders",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Builders.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCreate an Account. You supply a single Text, with colons to\n separate the different sub-accounts.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Builders",
          "name": "account",
          "package": "penny",
          "signature": "Text -\u003e Account",
          "source": "src/Penny-Lincoln-Builders.html#account",
          "type": "function"
        },
        "index": {
          "description": "Create an Account You supply single Text with colons to separate the different sub-accounts",
          "hierarchy": "Penny Lincoln Builders",
          "module": "Penny.Lincoln.Builders",
          "name": "account",
          "normalized": "Text-\u003eAccount",
          "package": "penny",
          "signature": "Text-\u003eAccount",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Builders.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eContainers for entries.\n\u003c/p\u003e\u003cp\u003eThis module is the key guardian of the core principle of\n double-entry accounting, which is that debits and credits must\n always balance. An \u003ccode\u003e\u003ca\u003eEnt\u003c/a\u003e\u003c/code\u003e is a container for an \u003ccode\u003eEntry\u003c/code\u003e. An \u003ccode\u003eEntry\u003c/code\u003e\n holds a \u003ccode\u003eDrCr\u003c/code\u003e and an \u003ccode\u003eAmount\u003c/code\u003e which, in turn, holds a \u003ccode\u003eCommodity\u003c/code\u003e\n and a \u003ccode\u003eQty\u003c/code\u003e. For a given \u003ccode\u003eCommodity\u003c/code\u003e in a particular transaction,\n the sum of the debits must always be equal to the sum of the\n credits.\n\u003c/p\u003e\u003cp\u003eIn addition to the \u003ccode\u003eEntry\u003c/code\u003e, the \u003ccode\u003e\u003ca\u003eEnt\u003c/a\u003e\u003c/code\u003e holds information about\n whether the particular \u003ccode\u003eEntry\u003c/code\u003e it holds is inferred or not. An Ent\n is \u003ccode\u003einferred\u003c/code\u003e if the user did not supply the entry, but Penny was\n able to deduce its \u003ccode\u003eEntry\u003c/code\u003e because proper entries were supplied for\n all the other postings in the transaction. The \u003ccode\u003e\u003ca\u003eEnt\u003c/a\u003e\u003c/code\u003e also holds\n arbitrary metadata--which will typically be other information about\n the particular posting, such as the payee, account, etc.\n\u003c/p\u003e\u003cp\u003eA collection of \u003ccode\u003e\u003ca\u003eEnt\u003c/a\u003e\u003c/code\u003e is an \u003ccode\u003e\u003ca\u003eEnts\u003c/a\u003e\u003c/code\u003e. This module will only create an\n \u003ccode\u003e\u003ca\u003eEnt\u003c/a\u003e\u003c/code\u003e as part of an \u003ccode\u003e\u003ca\u003eEnts\u003c/a\u003e\u003c/code\u003e (though you can later separate the \u003ccode\u003e\u003ca\u003eEnt\u003c/a\u003e\u003c/code\u003e\n from its other \u003ccode\u003e\u003ca\u003eEnts\u003c/a\u003e\u003c/code\u003e if you like.) In any given \u003ccode\u003e\u003ca\u003eEnts\u003c/a\u003e\u003c/code\u003e, all of the\n \u003ccode\u003e\u003ca\u003eEnt\u003c/a\u003e\u003c/code\u003e collectively have a zero balance.\n\u003c/p\u003e\u003cp\u003eThis module also contains type synonyms used to represent a\n Posting, which is an Ent bundled with its sibling Ents, and a\n Transaction.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "Ents",
          "package": "penny",
          "source": "src/Penny-Lincoln-Ents.html",
          "type": "module"
        },
        "index": {
          "description": "Containers for entries This module is the key guardian of the core principle of double-entry accounting which is that debits and credits must always balance An Ent is container for an Entry An Entry holds DrCr and an Amount which in turn holds Commodity and Qty For given Commodity in particular transaction the sum of the debits must always be equal to the sum of the credits In addition to the Entry the Ent holds information about whether the particular Entry it holds is inferred or not An Ent is inferred if the user did not supply the entry but Penny was able to deduce its Entry because proper entries were supplied for all the other postings in the transaction The Ent also holds arbitrary metadata--which will typically be other information about the particular posting such as the payee account etc collection of Ent is an Ents This module will only create an Ent as part of an Ents though you can later separate the Ent from its other Ents if you like In any given Ents all of the Ent collectively have zero balance This module also contains type synonyms used to represent Posting which is an Ent bundled with its sibling Ents and Transaction",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "Ents",
          "package": "penny",
          "partial": "Ents",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInformation about an entry, along with whether it is inferred and\n its metadata.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "Ent",
          "package": "penny",
          "source": "src/Penny-Lincoln-Ents.html#Ent",
          "type": "data"
        },
        "index": {
          "description": "Information about an entry along with whether it is inferred and its metadata",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "Ent",
          "package": "penny",
          "partial": "Ent",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#t:Ent"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Ents",
          "name": "Ents",
          "package": "penny",
          "source": "src/Penny-Lincoln-Ents.html#Ents",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "Ents",
          "package": "penny",
          "partial": "Ents",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#t:Ents"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIn a Posting, the Ent yielded by \u003ccode\u003e\u003ca\u003eheadEnt\u003c/a\u003e\u003c/code\u003e will be the posting of\n interest. The other sibling postings are also available for\n inspection.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "Posting",
          "package": "penny",
          "source": "src/Penny-Lincoln-Ents.html#Posting",
          "type": "newtype"
        },
        "index": {
          "description": "In Posting the Ent yielded by headEnt will be the posting of interest The other sibling postings are also available for inspection",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "Posting",
          "package": "penny",
          "partial": "Posting",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#t:Posting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA Transaction and a Posting are identical on the inside, but they\n have different semantic meanings so they are wrapped in newtypes.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "Transaction",
          "package": "penny",
          "source": "src/Penny-Lincoln-Ents.html#Transaction",
          "type": "newtype"
        },
        "index": {
          "description": "Transaction and Posting are identical on the inside but they have different semantic meanings so they are wrapped in newtypes",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "Transaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#t:Transaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Ents",
          "name": "Posting",
          "package": "penny",
          "signature": "Posting",
          "source": "src/Penny-Lincoln-Ents.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "Posting",
          "package": "penny",
          "partial": "Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:Posting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Ents",
          "name": "Transaction",
          "package": "penny",
          "signature": "Transaction",
          "source": "src/Penny-Lincoln-Ents.html#Transaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "Transaction",
          "package": "penny",
          "partial": "Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:Transaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe entry from an Ent.  If the Ent is inferred--that is, if the\n user did not supply an entry for it and Penny was able to infer\n the entry--this will be a Right with the inferred Entry.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "entry",
          "package": "penny",
          "signature": "Ent m -\u003e Either (Entry QtyRep) (Entry Qty)",
          "source": "src/Penny-Lincoln-Ents.html#entry",
          "type": "function"
        },
        "index": {
          "description": "The entry from an Ent If the Ent is inferred--that is if the user did not supply an entry for it and Penny was able to infer the entry--this will be Right with the inferred Entry",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "entry",
          "normalized": "Ent a-\u003eEither(Entry QtyRep)(Entry Qty)",
          "package": "penny",
          "signature": "Ent m-\u003eEither(Entry QtyRep)(Entry Qty)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:entry"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCreates an \u003ccode\u003e\u003ca\u003eEnts\u003c/a\u003e\u003c/code\u003e. At most, one of the Maybe Entry can be Nothing\n and this function will infer the remaining Entry. This function\n fails if it cannot create a balanced Ents.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "ents",
          "package": "penny",
          "signature": "[(Maybe (Either (Entry QtyRep) (Entry Qty)), m)] -\u003e Maybe (Ents m)",
          "source": "src/Penny-Lincoln-Ents.html#ents",
          "type": "function"
        },
        "index": {
          "description": "Creates an Ents At most one of the Maybe Entry can be Nothing and this function will infer the remaining Entry This function fails if it cannot create balanced Ents",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "ents",
          "normalized": "[(Maybe(Either(Entry QtyRep)(Entry Qty)),a)]-\u003eMaybe(Ents a)",
          "package": "penny",
          "signature": "[(Maybe(Either(Entry QtyRep)(Entry Qty)),m)]-\u003eMaybe(Ents m)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:ents"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet information from the head posting in the View, which is the\n one you are most likely interested in. This never fails, as every\n Ents has at least two postings.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "headEnt",
          "package": "penny",
          "signature": "Ents m -\u003e Ent m",
          "source": "src/Penny-Lincoln-Ents.html#headEnt",
          "type": "function"
        },
        "index": {
          "description": "Get information from the head posting in the View which is the one you are most likely interested in This never fails as every Ents has at least two postings",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "headEnt",
          "normalized": "Ents a-\u003eEnt a",
          "package": "penny",
          "partial": "Ent",
          "signature": "Ents m-\u003eEnt m",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:headEnt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTrue if the entry was inferred.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "inferred",
          "package": "penny",
          "signature": "Ent m -\u003e Bool",
          "source": "src/Penny-Lincoln-Ents.html#inferred",
          "type": "function"
        },
        "index": {
          "description": "True if the entry was inferred",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "inferred",
          "normalized": "Ent a-\u003eBool",
          "package": "penny",
          "signature": "Ent m-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:inferred"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlter the metadata Ents, while examining the Ents themselves. If\n you only want to change the metadata and you don't need to examine\n the other contents of the Ent, use the Functor instance. You cannot\n change non-metadata aspects of the Ent.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "mapEnts",
          "package": "penny",
          "signature": "(Ent a -\u003e b) -\u003e Ents a -\u003e Ents b",
          "source": "src/Penny-Lincoln-Ents.html#mapEnts",
          "type": "function"
        },
        "index": {
          "description": "Alter the metadata Ents while examining the Ents themselves If you only want to change the metadata and you don need to examine the other contents of the Ent use the Functor instance You cannot change non-metadata aspects of the Ent",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "mapEnts",
          "normalized": "(Ent a-\u003eb)-\u003eEnts a-\u003eEnts b",
          "package": "penny",
          "partial": "Ents",
          "signature": "(Ent a-\u003eb)-\u003eEnts a-\u003eEnts b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:mapEnts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe metadata accompanying an Ent\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "meta",
          "package": "penny",
          "signature": "Ent m -\u003e m",
          "source": "src/Penny-Lincoln-Ents.html#meta",
          "type": "function"
        },
        "index": {
          "description": "The metadata accompanying an Ent",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "meta",
          "normalized": "Ent a-\u003ea",
          "package": "penny",
          "signature": "Ent m-\u003em",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:meta"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCreates \u003ccode\u003e\u003ca\u003eEnts\u003c/a\u003e\u003c/code\u003e. Unlike \u003ccode\u003e\u003ca\u003eents\u003c/a\u003e\u003c/code\u003e this function never fails because\n you are restricted in the inputs that you can give it. It will\n always infer the last Entry. All Entries except one will have the\n same DrCr; the last, inferred one will have the opposite DrCr.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "rEnts",
          "package": "penny",
          "signature": "Commodity-\u003e DrCr-\u003e (Either QtyRep Qty, m)-\u003e [(Either QtyRep Qty, m)]-\u003e m-\u003e Ents m",
          "type": "function"
        },
        "index": {
          "description": "Creates Ents Unlike ents this function never fails because you are restricted in the inputs that you can give it It will always infer the last Entry All Entries except one will have the same DrCr the last inferred one will have the opposite DrCr",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "rEnts",
          "normalized": "Commodity-\u003eDrCr-\u003e(Either QtyRep Qty,a)-\u003e[(Either QtyRep Qty,a)]-\u003ea-\u003eEnts a",
          "package": "penny",
          "partial": "Ents",
          "signature": "Commodity-\u003eDrCr-\u003e(Either QtyRep Qty,m)-\u003e[(Either QtyRep Qty,m)]-\u003em-\u003eEnts m",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:rEnts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGet information on sibling Ents.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "tailEnts",
          "package": "penny",
          "signature": "Ents m -\u003e (Ent m, [Ent m])",
          "source": "src/Penny-Lincoln-Ents.html#tailEnts",
          "type": "function"
        },
        "index": {
          "description": "Get information on sibling Ents",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "tailEnts",
          "normalized": "Ents a-\u003e(Ent a,[Ent a])",
          "package": "penny",
          "partial": "Ents",
          "signature": "Ents m-\u003e(Ent m,[Ent m])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:tailEnts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSplits a Transaction into Postings.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "transactionToPostings",
          "package": "penny",
          "signature": "Transaction -\u003e [Posting]",
          "source": "src/Penny-Lincoln-Ents.html#transactionToPostings",
          "type": "function"
        },
        "index": {
          "description": "Splits Transaction into Postings",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "transactionToPostings",
          "normalized": "Transaction-\u003e[Posting]",
          "package": "penny",
          "partial": "To Postings",
          "signature": "Transaction-\u003e[Posting]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:transactionToPostings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlter the metadata of Ents while examing their contents. If you\n do not need to examine their contents, use the Traversable\n instance.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "traverseEnts",
          "package": "penny",
          "signature": "(Ent a -\u003e f b) -\u003e Ents a -\u003e f (Ents b)",
          "source": "src/Penny-Lincoln-Ents.html#traverseEnts",
          "type": "function"
        },
        "index": {
          "description": "Alter the metadata of Ents while examing their contents If you do not need to examine their contents use the Traversable instance",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "traverseEnts",
          "normalized": "(Ent a-\u003eb c)-\u003eEnts a-\u003eb(Ents c)",
          "package": "penny",
          "partial": "Ents",
          "signature": "(Ent a-\u003ef b)-\u003eEnts a-\u003ef(Ents b)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:traverseEnts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEvery Ents alwas contains at least two ents, and possibly\n additional ones.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "tupleEnts",
          "package": "penny",
          "signature": "Ents m -\u003e (Ent m, Ent m, [Ent m])",
          "source": "src/Penny-Lincoln-Ents.html#tupleEnts",
          "type": "function"
        },
        "index": {
          "description": "Every Ents alwas contains at least two ents and possibly additional ones",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "tupleEnts",
          "normalized": "Ents a-\u003e(Ent a,Ent a,[Ent a])",
          "package": "penny",
          "partial": "Ents",
          "signature": "Ents m-\u003e(Ent m,Ent m,[Ent m])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:tupleEnts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Ents",
          "name": "unEnts",
          "package": "penny",
          "signature": "Ents m -\u003e [Ent m]",
          "source": "src/Penny-Lincoln-Ents.html#unEnts",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "unEnts",
          "normalized": "Ents a-\u003e[Ent a]",
          "package": "penny",
          "partial": "Ents",
          "signature": "Ents m-\u003e[Ent m]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:unEnts"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Ents",
          "name": "unPosting",
          "package": "penny",
          "signature": "(TopLineData, Ents PostingData)",
          "source": "src/Penny-Lincoln-Ents.html#Posting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "unPosting",
          "normalized": "(TopLineData,Ents PostingData)",
          "package": "penny",
          "partial": "Posting",
          "signature": "(TopLineData,Ents PostingData)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:unPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Ents",
          "name": "unTransaction",
          "package": "penny",
          "signature": "(TopLineData, Ents PostingData)",
          "source": "src/Penny-Lincoln-Ents.html#Transaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "unTransaction",
          "normalized": "(TopLineData,Ents PostingData)",
          "package": "penny",
          "partial": "Transaction",
          "signature": "(TopLineData,Ents PostingData)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:unTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cpre\u003e unrollSnd (undefined, []) == []\n unrollSnd (1, [1,2,3]) = [(1,1), (1,2), (1,3)]\n\u003c/pre\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "unrollSnd",
          "package": "penny",
          "signature": "(a, [b]) -\u003e [(a, b)]",
          "source": "src/Penny-Lincoln-Ents.html#unrollSnd",
          "type": "function"
        },
        "index": {
          "description": "unrollSnd undefined unrollSnd",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "unrollSnd",
          "normalized": "(a,[b])-\u003e[(a,b)]",
          "package": "penny",
          "partial": "Snd",
          "signature": "(a,[b])-\u003e[(a,b)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:unrollSnd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIn a Posting, the Ent at the front of the list of Ents is the\n main posting. There are additional postings. This function\n rearranges the Ents multiple times so that each posting is at the\n head of the list exactly once.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Ents",
          "name": "views",
          "package": "penny",
          "signature": "Ents m -\u003e [Ents m]",
          "source": "src/Penny-Lincoln-Ents.html#views",
          "type": "function"
        },
        "index": {
          "description": "In Posting the Ent at the front of the list of Ents is the main posting There are additional postings This function rearranges the Ents multiple times so that each posting is at the head of the list exactly once",
          "hierarchy": "Penny Lincoln Ents",
          "module": "Penny.Lincoln.Ents",
          "name": "views",
          "normalized": "Ents a-\u003e[Ents a]",
          "package": "penny",
          "signature": "Ents m-\u003e[Ents m]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Ents.html#v:views"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Equivalent",
          "name": "Equivalent",
          "package": "penny",
          "source": "src/Penny-Lincoln-Equivalent.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Lincoln Equivalent",
          "module": "Penny.Lincoln.Equivalent",
          "name": "Equivalent",
          "package": "penny",
          "partial": "Equivalent",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Equivalent.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eComparisons for equivalency. Two items are equivalent if they\n have the same semantic meaning, even if the data in the two items\n is different.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Equivalent",
          "name": "Equivalent",
          "package": "penny",
          "source": "src/Penny-Lincoln-Equivalent.html#Equivalent",
          "type": "class"
        },
        "index": {
          "description": "Comparisons for equivalency Two items are equivalent if they have the same semantic meaning even if the data in the two items is different",
          "hierarchy": "Penny Lincoln Equivalent",
          "module": "Penny.Lincoln.Equivalent",
          "name": "Equivalent",
          "package": "penny",
          "partial": "Equivalent",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Equivalent.html#t:Equivalent"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Equivalent",
          "name": "(==~)",
          "package": "penny",
          "signature": "a -\u003e a -\u003e Bool",
          "source": "src/Penny-Lincoln-Equivalent.html#%3D%3D~",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Equivalent",
          "module": "Penny.Lincoln.Equivalent",
          "name": "(==~) ==~",
          "normalized": "a-\u003ea-\u003eBool",
          "package": "penny",
          "signature": "a-\u003ea-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Equivalent.html#v:-61--61--126-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCompares based on equivalency.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Equivalent",
          "name": "compareEv",
          "package": "penny",
          "signature": "a -\u003e a -\u003e Ordering",
          "source": "src/Penny-Lincoln-Equivalent.html#compareEv",
          "type": "method"
        },
        "index": {
          "description": "Compares based on equivalency",
          "hierarchy": "Penny Lincoln Equivalent",
          "module": "Penny.Lincoln.Equivalent",
          "name": "compareEv",
          "normalized": "a-\u003ea-\u003eOrdering",
          "package": "penny",
          "partial": "Ev",
          "signature": "a-\u003ea-\u003eOrdering",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Equivalent.html#v:compareEv"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Equivalent",
          "name": "equivalent",
          "package": "penny",
          "signature": "a -\u003e a -\u003e Bool",
          "source": "src/Penny-Lincoln-Equivalent.html#equivalent",
          "type": "method"
        },
        "index": {
          "hierarchy": "Penny Lincoln Equivalent",
          "module": "Penny.Lincoln.Equivalent",
          "name": "equivalent",
          "normalized": "a-\u003ea-\u003eBool",
          "package": "penny",
          "signature": "a-\u003ea-\u003eBool",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Equivalent.html#v:equivalent"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.HasText",
          "name": "HasText",
          "package": "penny",
          "source": "src/Penny-Lincoln-HasText.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "HasText",
          "package": "penny",
          "partial": "Has Text",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWraps instances of HasTextList and provides a delimiter; the\n result is an instance of HasText.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.HasText",
          "name": "Delimited",
          "package": "penny",
          "source": "src/Penny-Lincoln-HasText.html#Delimited",
          "type": "data"
        },
        "index": {
          "description": "Wraps instances of HasTextList and provides delimiter the result is an instance of HasText",
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "Delimited",
          "package": "penny",
          "partial": "Delimited",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#t:Delimited"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.HasText",
          "name": "HasText",
          "package": "penny",
          "source": "src/Penny-Lincoln-HasText.html#HasText",
          "type": "class"
        },
        "index": {
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "HasText",
          "package": "penny",
          "partial": "Has Text",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#t:HasText"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.HasText",
          "name": "HasTextList",
          "package": "penny",
          "source": "src/Penny-Lincoln-HasText.html#HasTextList",
          "type": "class"
        },
        "index": {
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "HasTextList",
          "package": "penny",
          "partial": "Has Text List",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#t:HasTextList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.HasText",
          "name": "Delimited",
          "package": "penny",
          "signature": "Delimited",
          "source": "src/Penny-Lincoln-HasText.html#Delimited",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "Delimited",
          "package": "penny",
          "partial": "Delimited",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#v:Delimited"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.HasText",
          "name": "delimited",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny-Lincoln-HasText.html#Delimited",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "delimited",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#v:delimited"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.HasText",
          "name": "delimiter",
          "package": "penny",
          "signature": "Text",
          "source": "src/Penny-Lincoln-HasText.html#Delimited",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "delimiter",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#v:delimiter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.HasText",
          "name": "text",
          "package": "penny",
          "signature": "a -\u003e Text",
          "source": "src/Penny-Lincoln-HasText.html#text",
          "type": "method"
        },
        "index": {
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "text",
          "normalized": "a-\u003eText",
          "package": "penny",
          "signature": "a-\u003eText",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#v:text"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.HasText",
          "name": "textList",
          "package": "penny",
          "signature": "a -\u003e [Text]",
          "source": "src/Penny-Lincoln-HasText.html#textList",
          "type": "method"
        },
        "index": {
          "hierarchy": "Penny Lincoln HasText",
          "module": "Penny.Lincoln.HasText",
          "name": "textList",
          "normalized": "a-\u003e[Text]",
          "package": "penny",
          "partial": "List",
          "signature": "a-\u003e[Text]",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-HasText.html#v:textList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eType synonyms for functions dealing with text matching.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Matchers",
          "name": "Matchers",
          "package": "penny",
          "source": "src/Penny-Lincoln-Matchers.html",
          "type": "module"
        },
        "index": {
          "description": "Type synonyms for functions dealing with text matching",
          "hierarchy": "Penny Lincoln Matchers",
          "module": "Penny.Lincoln.Matchers",
          "name": "Matchers",
          "package": "penny",
          "partial": "Matchers",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Matchers.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA function that makes Matchers.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Matchers",
          "name": "Factory",
          "package": "penny",
          "source": "src/Penny-Lincoln-Matchers.html#Factory",
          "type": "type"
        },
        "index": {
          "description": "function that makes Matchers",
          "hierarchy": "Penny Lincoln Matchers",
          "module": "Penny.Lincoln.Matchers",
          "name": "Factory",
          "package": "penny",
          "partial": "Factory",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Matchers.html#t:Factory"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eNatural numbers, either positive or non-zero.  These wrap Int\n rather than Integers so do not use them were unlimited precision is\n needed.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Natural",
          "name": "Natural",
          "package": "penny",
          "source": "src/Penny-Lincoln-Natural.html",
          "type": "module"
        },
        "index": {
          "description": "Natural numbers either positive or non-zero These wrap Int rather than Integers so do not use them were unlimited precision is needed",
          "hierarchy": "Penny Lincoln Natural",
          "module": "Penny.Lincoln.Natural",
          "name": "Natural",
          "package": "penny",
          "partial": "Natural",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Natural.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Natural",
          "name": "NonNegative",
          "package": "penny",
          "source": "src/Penny-Lincoln-Natural.html#NonNegative",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Natural",
          "module": "Penny.Lincoln.Natural",
          "name": "NonNegative",
          "package": "penny",
          "partial": "Non Negative",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Natural.html#t:NonNegative"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Natural",
          "name": "Positive",
          "package": "penny",
          "source": "src/Penny-Lincoln-Natural.html#Positive",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Natural",
          "module": "Penny.Lincoln.Natural",
          "name": "Positive",
          "package": "penny",
          "partial": "Positive",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Natural.html#t:Positive"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Natural",
          "name": "nonNegative",
          "package": "penny",
          "signature": "Int -\u003e Maybe NonNegative",
          "source": "src/Penny-Lincoln-Natural.html#nonNegative",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Natural",
          "module": "Penny.Lincoln.Natural",
          "name": "nonNegative",
          "normalized": "Int-\u003eMaybe NonNegative",
          "package": "penny",
          "partial": "Negative",
          "signature": "Int-\u003eMaybe NonNegative",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Natural.html#v:nonNegative"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Natural",
          "name": "positive",
          "package": "penny",
          "signature": "Int -\u003e Maybe Positive",
          "source": "src/Penny-Lincoln-Natural.html#positive",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Natural",
          "module": "Penny.Lincoln.Natural",
          "name": "positive",
          "normalized": "Int-\u003eMaybe Positive",
          "package": "penny",
          "signature": "Int-\u003eMaybe Positive",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Natural.html#v:positive"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eFunctions that return a boolean based upon some criterion that\n matches something, often a PostFam. Useful when filtering\n Postings.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "Siblings",
          "package": "penny",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html",
          "type": "module"
        },
        "index": {
          "description": "Functions that return boolean based upon some criterion that matches something often PostFam Useful when filtering Postings",
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "Siblings",
          "package": "penny",
          "partial": "Siblings",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "LPdct",
          "package": "penny",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#LPdct",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "LPdct",
          "package": "penny",
          "partial": "LPdct",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#t:LPdct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "MakePdct",
          "package": "penny",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#MakePdct",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "MakePdct",
          "package": "penny",
          "partial": "Make Pdct",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#t:MakePdct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "MakeSerialPdct",
          "package": "penny",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#MakeSerialPdct",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "MakeSerialPdct",
          "package": "penny",
          "partial": "Make Serial Pdct",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#t:MakeSerialPdct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "account",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#account",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "account",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "accountAny",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#accountAny",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "accountAny",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "partial": "Any",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:accountAny"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "accountLevel",
          "package": "penny",
          "signature": "Int -\u003e Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#accountLevel",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "accountLevel",
          "normalized": "Int-\u003eMatcher-\u003eLPdct",
          "package": "penny",
          "partial": "Level",
          "signature": "Int-\u003eMatcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:accountLevel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "backFilePosting",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#backFilePosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "backFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:backFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "backFileTransaction",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#backFileTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "backFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:backFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "backGlobalPosting",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#backGlobalPosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "backGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:backGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "backGlobalTransaction",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#backGlobalTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "backGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:backGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "commodity",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#commodity",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "commodity",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:commodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "credit",
          "package": "penny",
          "signature": "LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#credit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "credit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:credit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "debit",
          "package": "penny",
          "signature": "LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#debit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "debit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:debit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "drCr",
          "package": "penny",
          "signature": "DrCr -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#drCr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "drCr",
          "normalized": "DrCr-\u003eLPdct",
          "package": "penny",
          "partial": "Cr",
          "signature": "DrCr-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:drCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "flag",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#flag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "flag",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "fwdFilePosting",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#fwdFilePosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "fwdFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:fwdFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "fwdFileTransaction",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#fwdFileTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "fwdFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:fwdFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "fwdGlobalPosting",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#fwdGlobalPosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "fwdGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:fwdGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "fwdGlobalTransaction",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#fwdGlobalTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "fwdGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:fwdGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "number",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#number",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "number",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "parseQty",
          "package": "penny",
          "signature": "Text -\u003e Maybe (Qty -\u003e LPdct)",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#parseQty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "parseQty",
          "normalized": "Text-\u003eMaybe(Qty-\u003eLPdct)",
          "package": "penny",
          "partial": "Qty",
          "signature": "Text-\u003eMaybe(Qty-\u003eLPdct)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:parseQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "payee",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "payee",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "postingMemo",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#postingMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "postingMemo",
          "package": "penny",
          "partial": "Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:postingMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA Pdct that returns True if \u003ccode\u003ecompare subject qty\u003c/code\u003e returns the\n given Ordering.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "qty",
          "package": "penny",
          "signature": "Ordering -\u003e Qty -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#qty",
          "type": "function"
        },
        "index": {
          "description": "Pdct that returns True if compare subject qty returns the given Ordering",
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "qty",
          "normalized": "Ordering-\u003eQty-\u003eLPdct",
          "package": "penny",
          "signature": "Ordering-\u003eQty-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:qty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTrue if a posting is reconciled; that is, its flag is exactly\n \u003ccode\u003eR\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "reconciled",
          "package": "penny",
          "signature": "LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#reconciled",
          "type": "function"
        },
        "index": {
          "description": "True if posting is reconciled that is its flag is exactly",
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "reconciled",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:reconciled"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMakes Pdct based on comparisons against a particular serial.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "serialPdct",
          "package": "penny",
          "signature": "Text-\u003e ((TopLineData, Ent PostingData) -\u003e Maybe Int)-\u003e Int-\u003e Ordering-\u003e Pdct Posting",
          "type": "function"
        },
        "index": {
          "description": "Makes Pdct based on comparisons against particular serial",
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "serialPdct",
          "normalized": "Text-\u003e((TopLineData,Ent PostingData)-\u003eMaybe Int)-\u003eInt-\u003eOrdering-\u003ePdct Posting",
          "package": "penny",
          "partial": "Pdct",
          "signature": "Text-\u003e((TopLineData,Ent PostingData)-\u003eMaybe Int)-\u003eInt-\u003eOrdering-\u003ePdct Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:serialPdct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "tag",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates-Siblings.html#tag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates Siblings",
          "module": "Penny.Lincoln.Predicates.Siblings",
          "name": "tag",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates-Siblings.html#v:tag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eFunctions that return a boolean based upon some criterion that\n matches something, often a PostFam. Useful when filtering\n Postings.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Predicates",
          "name": "Predicates",
          "package": "penny",
          "source": "src/Penny-Lincoln-Predicates.html",
          "type": "module"
        },
        "index": {
          "description": "Functions that return boolean based upon some criterion that matches something often PostFam Useful when filtering Postings",
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "Predicates",
          "package": "penny",
          "partial": "Predicates",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "LPdct",
          "package": "penny",
          "source": "src/Penny-Lincoln-Predicates.html#LPdct",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "LPdct",
          "package": "penny",
          "partial": "LPdct",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#t:LPdct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "MakePdct",
          "package": "penny",
          "source": "src/Penny-Lincoln-Predicates.html#MakePdct",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "MakePdct",
          "package": "penny",
          "partial": "Make Pdct",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#t:MakePdct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "MakeSerialPdct",
          "package": "penny",
          "source": "src/Penny-Lincoln-Predicates.html#MakeSerialPdct",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "MakeSerialPdct",
          "package": "penny",
          "partial": "Make Serial Pdct",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#t:MakeSerialPdct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "account",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#account",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "account",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "accountAny",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#accountAny",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "accountAny",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "partial": "Any",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:accountAny"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "accountLevel",
          "package": "penny",
          "signature": "Int -\u003e Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#accountLevel",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "accountLevel",
          "normalized": "Int-\u003eMatcher-\u003eLPdct",
          "package": "penny",
          "partial": "Level",
          "signature": "Int-\u003eMatcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:accountLevel"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "backFilePosting",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates.html#backFilePosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "backFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:backFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "backFileTransaction",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates.html#backFileTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "backFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:backFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "backGlobalPosting",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates.html#backGlobalPosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "backGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:backGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "backGlobalTransaction",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates.html#backGlobalTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "backGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:backGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "commodity",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#commodity",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "commodity",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:commodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "credit",
          "package": "penny",
          "signature": "LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#credit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "credit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:credit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "date",
          "package": "penny",
          "signature": "Ordering -\u003e UTCTime -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#date",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "date",
          "normalized": "Ordering-\u003eUTCTime-\u003eLPdct",
          "package": "penny",
          "signature": "Ordering-\u003eUTCTime-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "debit",
          "package": "penny",
          "signature": "LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#debit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "debit",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:debit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "drCr",
          "package": "penny",
          "signature": "DrCr -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#drCr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "drCr",
          "normalized": "DrCr-\u003eLPdct",
          "package": "penny",
          "partial": "Cr",
          "signature": "DrCr-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:drCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "filename",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#filename",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "filename",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:filename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "flag",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates.html#flag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "flag",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "fwdFilePosting",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates.html#fwdFilePosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "fwdFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:fwdFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "fwdFileTransaction",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates.html#fwdFileTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "fwdFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:fwdFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "fwdGlobalPosting",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates.html#fwdGlobalPosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "fwdGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:fwdGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "fwdGlobalTransaction",
          "package": "penny",
          "signature": "MakeSerialPdct",
          "source": "src/Penny-Lincoln-Predicates.html#fwdGlobalTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "fwdGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:fwdGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "number",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates.html#number",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "number",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "payee",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates.html#payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "payee",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "postingMemo",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates.html#postingMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "postingMemo",
          "package": "penny",
          "partial": "Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:postingMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "qty",
          "package": "penny",
          "signature": "Ordering -\u003e Qty -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#qty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "qty",
          "normalized": "Ordering-\u003eQty-\u003eLPdct",
          "package": "penny",
          "signature": "Ordering-\u003eQty-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:qty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTrue if a posting is reconciled; that is, its flag is exactly\n \u003ccode\u003eR\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Predicates",
          "name": "reconciled",
          "package": "penny",
          "signature": "LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#reconciled",
          "type": "function"
        },
        "index": {
          "description": "True if posting is reconciled that is its flag is exactly",
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "reconciled",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:reconciled"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eMakes Pdct based on comparisons against a particular serial.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Predicates",
          "name": "serialPdct",
          "package": "penny",
          "signature": "Text-\u003e (a -\u003e Maybe Int)-\u003e Int-\u003e Ordering-\u003e Pdct a",
          "type": "function"
        },
        "index": {
          "description": "Makes Pdct based on comparisons against particular serial",
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "serialPdct",
          "normalized": "Text-\u003e(a-\u003eMaybe Int)-\u003eInt-\u003eOrdering-\u003ePdct a",
          "package": "penny",
          "partial": "Pdct",
          "signature": "Text-\u003e(a-\u003eMaybe Int)-\u003eInt-\u003eOrdering-\u003ePdct a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:serialPdct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "tag",
          "package": "penny",
          "signature": "Matcher -\u003e LPdct",
          "source": "src/Penny-Lincoln-Predicates.html#tag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "tag",
          "normalized": "Matcher-\u003eLPdct",
          "package": "penny",
          "signature": "Matcher-\u003eLPdct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:tag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Predicates",
          "name": "transactionMemo",
          "package": "penny",
          "signature": "MakePdct",
          "source": "src/Penny-Lincoln-Predicates.html#transactionMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Predicates",
          "module": "Penny.Lincoln.Predicates",
          "name": "transactionMemo",
          "package": "penny",
          "partial": "Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Predicates.html#v:transactionMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA database of price information. A PricePoint has a DateTime, a\n From commodity, a To commodity, and a QtyPerUnit. The PriceDb holds\n this information for several prices. You can query the database by\n supplying a from commodity, a to commodity, and a DateTime, and the\n database will give you the QtyPerUnit, if there is one.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.PriceDb",
          "name": "PriceDb",
          "package": "penny",
          "source": "src/Penny-Lincoln-PriceDb.html",
          "type": "module"
        },
        "index": {
          "description": "database of price information PricePoint has DateTime From commodity To commodity and QtyPerUnit The PriceDb holds this information for several prices You can query the database by supplying from commodity to commodity and DateTime and the database will give you the QtyPerUnit if there is one",
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "PriceDb",
          "package": "penny",
          "partial": "Price Db",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe PriceDb holds information about prices. Create an empty one\n using \u003ccode\u003e\u003ca\u003eemptyDb\u003c/a\u003e\u003c/code\u003e then fill it with values using foldl or similar.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.PriceDb",
          "name": "PriceDb",
          "package": "penny",
          "source": "src/Penny-Lincoln-PriceDb.html#PriceDb",
          "type": "data"
        },
        "index": {
          "description": "The PriceDb holds information about prices Create an empty one using emptyDb then fill it with values using foldl or similar",
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "PriceDb",
          "package": "penny",
          "partial": "Price Db",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#t:PriceDb"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGetting prices can fail; if it fails, an Error is returned.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.PriceDb",
          "name": "PriceDbError",
          "package": "penny",
          "source": "src/Penny-Lincoln-PriceDb.html#PriceDbError",
          "type": "data"
        },
        "index": {
          "description": "Getting prices can fail if it fails an Error is returned",
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "PriceDbError",
          "package": "penny",
          "partial": "Price Db Error",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#t:PriceDbError"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.PriceDb",
          "name": "CpuNotFound",
          "package": "penny",
          "signature": "CpuNotFound",
          "source": "src/Penny-Lincoln-PriceDb.html#PriceDbError",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "CpuNotFound",
          "package": "penny",
          "partial": "Cpu Not Found",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#v:CpuNotFound"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.PriceDb",
          "name": "FromNotFound",
          "package": "penny",
          "signature": "FromNotFound",
          "source": "src/Penny-Lincoln-PriceDb.html#PriceDbError",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "FromNotFound",
          "package": "penny",
          "partial": "From Not Found",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#v:FromNotFound"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.PriceDb",
          "name": "ToNotFound",
          "package": "penny",
          "signature": "ToNotFound",
          "source": "src/Penny-Lincoln-PriceDb.html#PriceDbError",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "ToNotFound",
          "package": "penny",
          "partial": "To Not Found",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#v:ToNotFound"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdd a single price to the PriceDb.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.PriceDb",
          "name": "addPrice",
          "package": "penny",
          "signature": "PriceDb -\u003e PricePoint -\u003e PriceDb",
          "source": "src/Penny-Lincoln-PriceDb.html#addPrice",
          "type": "function"
        },
        "index": {
          "description": "Add single price to the PriceDb",
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "addPrice",
          "normalized": "PriceDb-\u003ePricePoint-\u003ePriceDb",
          "package": "penny",
          "partial": "Price",
          "signature": "PriceDb-\u003ePricePoint-\u003ePriceDb",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#v:addPrice"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven an Amount and a Commodity to convert the amount to,\n converts the Amount to the given commodity. If the Amount given is\n already in the To commodity, simply returns what was passed in. Can\n fail and throw PriceDbError. Internally uses \u003ccode\u003e\u003ca\u003egetPrice\u003c/a\u003e\u003c/code\u003e, so read its\n documentation for details on how price lookup works.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.PriceDb",
          "name": "convertAsOf",
          "package": "penny",
          "signature": "PriceDb -\u003e DateTime -\u003e To -\u003e Amount q -\u003e Either PriceDbError Qty",
          "source": "src/Penny-Lincoln-PriceDb.html#convertAsOf",
          "type": "function"
        },
        "index": {
          "description": "Given an Amount and Commodity to convert the amount to converts the Amount to the given commodity If the Amount given is already in the To commodity simply returns what was passed in Can fail and throw PriceDbError Internally uses getPrice so read its documentation for details on how price lookup works",
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "convertAsOf",
          "normalized": "PriceDb-\u003eDateTime-\u003eTo-\u003eAmount a-\u003eEither PriceDbError Qty",
          "package": "penny",
          "partial": "As Of",
          "signature": "PriceDb-\u003eDateTime-\u003eTo-\u003eAmount q-\u003eEither PriceDbError Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#v:convertAsOf"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAn empty PriceDb\n\u003c/p\u003e",
          "module": "Penny.Lincoln.PriceDb",
          "name": "emptyDb",
          "package": "penny",
          "signature": "PriceDb",
          "source": "src/Penny-Lincoln-PriceDb.html#emptyDb",
          "type": "function"
        },
        "index": {
          "description": "An empty PriceDb",
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "emptyDb",
          "package": "penny",
          "partial": "Db",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#v:emptyDb"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eLooks up values from the PriceDb. Throws \u003ca\u003eError\u003c/a\u003e if something\n fails.\n\u003c/p\u003e\u003cp\u003eThe DateTime is the time at which to find a price. If a price\n exists for that exact DateTime, that price is returned. If no price\n exists for that exact DateTime, but there is a price for an earlier\n DateTime, the latest possible price is returned. If there are no\n earlier prices, CpuNotFound is thrown.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.PriceDb",
          "name": "getPrice",
          "package": "penny",
          "signature": "PriceDb -\u003e From -\u003e To -\u003e DateTime -\u003e Either PriceDbError CountPerUnit",
          "source": "src/Penny-Lincoln-PriceDb.html#getPrice",
          "type": "function"
        },
        "index": {
          "description": "Looks up values from the PriceDb Throws Error if something fails The DateTime is the time at which to find price If price exists for that exact DateTime that price is returned If no price exists for that exact DateTime but there is price for an earlier DateTime the latest possible price is returned If there are no earlier prices CpuNotFound is thrown",
          "hierarchy": "Penny Lincoln PriceDb",
          "module": "Penny.Lincoln.PriceDb",
          "name": "getPrice",
          "normalized": "PriceDb-\u003eFrom-\u003eTo-\u003eDateTime-\u003eEither PriceDbError CountPerUnit",
          "package": "penny",
          "partial": "Price",
          "signature": "PriceDb-\u003eFrom-\u003eTo-\u003eDateTime-\u003eEither PriceDbError CountPerUnit",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-PriceDb.html#v:getPrice"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eLike \u003ccode\u003e\u003ca\u003eQueries\u003c/a\u003e\u003c/code\u003e but instead of querying the main\n posting of the PostFam, queries the siblings. Therefore, these\n functions return a list, with each entry in the list containing the\n best answer for each sibling. There is one item in the list for\n each sibling, even if all these items contain the same data (for\n instance, a posting might have five siblings, but all five siblings\n might have the same payee. Nonetheless the \u003ccode\u003e\u003ca\u003epayee\u003c/a\u003e\u003c/code\u003e function will\n return a list of five items.)\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "Siblings",
          "package": "penny",
          "source": "src/Penny-Lincoln-Queries-Siblings.html",
          "type": "module"
        },
        "index": {
          "description": "Like Queries but instead of querying the main posting of the PostFam queries the siblings Therefore these functions return list with each entry in the list containing the best answer for each sibling There is one item in the list for each sibling even if all these items contain the same data for instance posting might have five siblings but all five siblings might have the same payee Nonetheless the payee function will return list of five items",
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "Siblings",
          "package": "penny",
          "partial": "Siblings",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "account",
          "package": "penny",
          "signature": "Posting -\u003e [Account]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#account",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "account",
          "normalized": "Posting-\u003e[Account]",
          "package": "penny",
          "signature": "Posting-\u003e[Account]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "amount",
          "package": "penny",
          "signature": "Posting -\u003e [Either (Amount QtyRep) (Amount Qty)]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#amount",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "amount",
          "normalized": "Posting-\u003e[Either(Amount QtyRep)(Amount Qty)]",
          "package": "penny",
          "signature": "Posting-\u003e[Either(Amount QtyRep)(Amount Qty)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "balance",
          "package": "penny",
          "signature": "Posting -\u003e [Balance]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#balance",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "balance",
          "normalized": "Posting-\u003e[Balance]",
          "package": "penny",
          "signature": "Posting-\u003e[Balance]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:balance"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFor all siblings, uses information from the Posting if it is set;\n otherwise, uses data from the TopLine.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "bestSibs",
          "package": "penny",
          "signature": "(PostingCore -\u003e Maybe a) -\u003e (TopLineCore -\u003e Maybe a) -\u003e Posting -\u003e [Maybe a]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#bestSibs",
          "type": "function"
        },
        "index": {
          "description": "For all siblings uses information from the Posting if it is set otherwise uses data from the TopLine",
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "bestSibs",
          "normalized": "(PostingCore-\u003eMaybe a)-\u003e(TopLineCore-\u003eMaybe a)-\u003ePosting-\u003e[Maybe a]",
          "package": "penny",
          "partial": "Sibs",
          "signature": "(PostingCore-\u003eMaybe a)-\u003e(TopLineCore-\u003eMaybe a)-\u003ePosting-\u003e[Maybe a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:bestSibs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "commodity",
          "package": "penny",
          "signature": "Posting -\u003e [Commodity]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#commodity",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "commodity",
          "normalized": "Posting-\u003e[Commodity]",
          "package": "penny",
          "signature": "Posting-\u003e[Commodity]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:commodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "drCr",
          "package": "penny",
          "signature": "Posting -\u003e [DrCr]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#drCr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "drCr",
          "normalized": "Posting-\u003e[DrCr]",
          "package": "penny",
          "partial": "Cr",
          "signature": "Posting-\u003e[DrCr]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:drCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "entry",
          "package": "penny",
          "signature": "Posting -\u003e [Either (Entry QtyRep) (Entry Qty)]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#entry",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "entry",
          "normalized": "Posting-\u003e[Either(Entry QtyRep)(Entry Qty)]",
          "package": "penny",
          "signature": "Posting-\u003e[Either(Entry QtyRep)(Entry Qty)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:entry"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "filePosting",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe FilePosting]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#filePosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "filePosting",
          "normalized": "Posting-\u003e[Maybe FilePosting]",
          "package": "penny",
          "partial": "Posting",
          "signature": "Posting-\u003e[Maybe FilePosting]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:filePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "flag",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe Flag]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#flag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "flag",
          "normalized": "Posting-\u003e[Maybe Flag]",
          "package": "penny",
          "signature": "Posting-\u003e[Maybe Flag]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "globalPosting",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe GlobalPosting]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#globalPosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "globalPosting",
          "normalized": "Posting-\u003e[Maybe GlobalPosting]",
          "package": "penny",
          "partial": "Posting",
          "signature": "Posting-\u003e[Maybe GlobalPosting]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:globalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "globalTransaction",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe GlobalTransaction]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#globalTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "globalTransaction",
          "normalized": "Posting-\u003e[Maybe GlobalTransaction]",
          "package": "penny",
          "partial": "Transaction",
          "signature": "Posting-\u003e[Maybe GlobalTransaction]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:globalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "number",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe Number]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#number",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "number",
          "normalized": "Posting-\u003e[Maybe Number]",
          "package": "penny",
          "signature": "Posting-\u003e[Maybe Number]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "payee",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe Payee]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "payee",
          "normalized": "Posting-\u003e[Maybe Payee]",
          "package": "penny",
          "signature": "Posting-\u003e[Maybe Payee]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "postingLine",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe PostingLine]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#postingLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "postingLine",
          "normalized": "Posting-\u003e[Maybe PostingLine]",
          "package": "penny",
          "partial": "Line",
          "signature": "Posting-\u003e[Maybe PostingLine]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:postingLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "postingMemo",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe Memo]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#postingMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "postingMemo",
          "normalized": "Posting-\u003e[Maybe Memo]",
          "package": "penny",
          "partial": "Memo",
          "signature": "Posting-\u003e[Maybe Memo]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:postingMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "qty",
          "package": "penny",
          "signature": "Posting -\u003e [Qty]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#qty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "qty",
          "normalized": "Posting-\u003e[Qty]",
          "package": "penny",
          "signature": "Posting-\u003e[Qty]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:qty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFor all siblings, get the information from the Posting if it\n exists; otherwise Nothing.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "sibs",
          "package": "penny",
          "signature": "(Ent PostingData -\u003e a) -\u003e Posting -\u003e [a]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#sibs",
          "type": "function"
        },
        "index": {
          "description": "For all siblings get the information from the Posting if it exists otherwise Nothing",
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "sibs",
          "normalized": "(Ent PostingData-\u003ea)-\u003ePosting-\u003e[a]",
          "package": "penny",
          "signature": "(Ent PostingData-\u003ea)-\u003ePosting-\u003e[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:sibs"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "side",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe Side]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#side",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "side",
          "normalized": "Posting-\u003e[Maybe Side]",
          "package": "penny",
          "signature": "Posting-\u003e[Maybe Side]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:side"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "spaceBetween",
          "package": "penny",
          "signature": "Posting -\u003e [Maybe SpaceBetween]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#spaceBetween",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "spaceBetween",
          "normalized": "Posting-\u003e[Maybe SpaceBetween]",
          "package": "penny",
          "partial": "Between",
          "signature": "Posting-\u003e[Maybe SpaceBetween]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:spaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "tags",
          "package": "penny",
          "signature": "Posting -\u003e [Tags]",
          "source": "src/Penny-Lincoln-Queries-Siblings.html#tags",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries Siblings",
          "module": "Penny.Lincoln.Queries.Siblings",
          "name": "tags",
          "normalized": "Posting-\u003e[Tags]",
          "package": "penny",
          "signature": "Posting-\u003e[Tags]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries-Siblings.html#v:tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eExamining a Posting for a particular component of the main\n posting (as opposed to the sibling postings) in the Posting. For\n some components, such as the payee, the posting might have one\n piece of data while the TopLine has something else. These functions\n will examine the Posting first and, if it has no information, use\n the data from the TopLine if it is there.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln.Queries",
          "name": "Queries",
          "package": "penny",
          "source": "src/Penny-Lincoln-Queries.html",
          "type": "module"
        },
        "index": {
          "description": "Examining Posting for particular component of the main posting as opposed to the sibling postings in the Posting For some components such as the payee the posting might have one piece of data while the TopLine has something else These functions will examine the Posting first and if it has no information use the data from the TopLine if it is there",
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "Queries",
          "package": "penny",
          "partial": "Queries",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "account",
          "package": "penny",
          "signature": "Posting -\u003e Account",
          "source": "src/Penny-Lincoln-Queries.html#account",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "account",
          "normalized": "Posting-\u003eAccount",
          "package": "penny",
          "signature": "Posting-\u003eAccount",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "amount",
          "package": "penny",
          "signature": "Posting -\u003e Either (Amount QtyRep) (Amount Qty)",
          "source": "src/Penny-Lincoln-Queries.html#amount",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "amount",
          "normalized": "Posting-\u003eEither(Amount QtyRep)(Amount Qty)",
          "package": "penny",
          "signature": "Posting-\u003eEither(Amount QtyRep)(Amount Qty)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:amount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "balance",
          "package": "penny",
          "signature": "Posting -\u003e Balance",
          "source": "src/Penny-Lincoln-Queries.html#balance",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "balance",
          "normalized": "Posting-\u003eBalance",
          "package": "penny",
          "signature": "Posting-\u003eBalance",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:balance"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUses the data from the Posting if it is set; otherwise, use the\n data from the TopLine.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Queries",
          "name": "best",
          "package": "penny",
          "signature": "(TopLineData -\u003e Maybe a) -\u003e (Ents PostingData -\u003e Maybe a) -\u003e Posting -\u003e Maybe a",
          "source": "src/Penny-Lincoln-Queries.html#best",
          "type": "function"
        },
        "index": {
          "description": "Uses the data from the Posting if it is set otherwise use the data from the TopLine",
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "best",
          "normalized": "(TopLineData-\u003eMaybe a)-\u003e(Ents PostingData-\u003eMaybe a)-\u003ePosting-\u003eMaybe a",
          "package": "penny",
          "signature": "(TopLineData-\u003eMaybe a)-\u003e(Ents PostingData-\u003eMaybe a)-\u003ePosting-\u003eMaybe a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:best"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "commodity",
          "package": "penny",
          "signature": "Posting -\u003e Commodity",
          "source": "src/Penny-Lincoln-Queries.html#commodity",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "commodity",
          "normalized": "Posting-\u003eCommodity",
          "package": "penny",
          "signature": "Posting-\u003eCommodity",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:commodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "dateTime",
          "package": "penny",
          "signature": "Posting -\u003e DateTime",
          "source": "src/Penny-Lincoln-Queries.html#dateTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "dateTime",
          "normalized": "Posting-\u003eDateTime",
          "package": "penny",
          "partial": "Time",
          "signature": "Posting-\u003eDateTime",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:dateTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "drCr",
          "package": "penny",
          "signature": "Posting -\u003e DrCr",
          "source": "src/Penny-Lincoln-Queries.html#drCr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "drCr",
          "normalized": "Posting-\u003eDrCr",
          "package": "penny",
          "partial": "Cr",
          "signature": "Posting-\u003eDrCr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:drCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "eiQty",
          "package": "penny",
          "signature": "Posting -\u003e Either QtyRep Qty",
          "source": "src/Penny-Lincoln-Queries.html#eiQty",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "eiQty",
          "normalized": "Posting-\u003eEither QtyRep Qty",
          "package": "penny",
          "partial": "Qty",
          "signature": "Posting-\u003eEither QtyRep Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:eiQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "entry",
          "package": "penny",
          "signature": "Posting -\u003e Either (Entry QtyRep) (Entry Qty)",
          "source": "src/Penny-Lincoln-Queries.html#entry",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "entry",
          "normalized": "Posting-\u003eEither(Entry QtyRep)(Entry Qty)",
          "package": "penny",
          "signature": "Posting-\u003eEither(Entry QtyRep)(Entry Qty)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:entry"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "filePosting",
          "package": "penny",
          "signature": "Posting -\u003e Maybe FilePosting",
          "source": "src/Penny-Lincoln-Queries.html#filePosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "filePosting",
          "normalized": "Posting-\u003eMaybe FilePosting",
          "package": "penny",
          "partial": "Posting",
          "signature": "Posting-\u003eMaybe FilePosting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:filePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "fileTransaction",
          "package": "penny",
          "signature": "Posting -\u003e Maybe FileTransaction",
          "source": "src/Penny-Lincoln-Queries.html#fileTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "fileTransaction",
          "normalized": "Posting-\u003eMaybe FileTransaction",
          "package": "penny",
          "partial": "Transaction",
          "signature": "Posting-\u003eMaybe FileTransaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:fileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "filename",
          "package": "penny",
          "signature": "Posting -\u003e Maybe Filename",
          "source": "src/Penny-Lincoln-Queries.html#filename",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "filename",
          "normalized": "Posting-\u003eMaybe Filename",
          "package": "penny",
          "signature": "Posting-\u003eMaybe Filename",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:filename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "flag",
          "package": "penny",
          "signature": "Posting -\u003e Maybe Flag",
          "source": "src/Penny-Lincoln-Queries.html#flag",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "flag",
          "normalized": "Posting-\u003eMaybe Flag",
          "package": "penny",
          "signature": "Posting-\u003eMaybe Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "globalPosting",
          "package": "penny",
          "signature": "Posting -\u003e Maybe GlobalPosting",
          "source": "src/Penny-Lincoln-Queries.html#globalPosting",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "globalPosting",
          "normalized": "Posting-\u003eMaybe GlobalPosting",
          "package": "penny",
          "partial": "Posting",
          "signature": "Posting-\u003eMaybe GlobalPosting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:globalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "globalTransaction",
          "package": "penny",
          "signature": "Posting -\u003e Maybe GlobalTransaction",
          "source": "src/Penny-Lincoln-Queries.html#globalTransaction",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "globalTransaction",
          "normalized": "Posting-\u003eMaybe GlobalTransaction",
          "package": "penny",
          "partial": "Transaction",
          "signature": "Posting-\u003eMaybe GlobalTransaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:globalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "localDay",
          "package": "penny",
          "signature": "Posting -\u003e Day",
          "source": "src/Penny-Lincoln-Queries.html#localDay",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "localDay",
          "normalized": "Posting-\u003eDay",
          "package": "penny",
          "partial": "Day",
          "signature": "Posting-\u003eDay",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:localDay"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "number",
          "package": "penny",
          "signature": "Posting -\u003e Maybe Number",
          "source": "src/Penny-Lincoln-Queries.html#number",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "number",
          "normalized": "Posting-\u003eMaybe Number",
          "package": "penny",
          "signature": "Posting-\u003eMaybe Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "payee",
          "package": "penny",
          "signature": "Posting -\u003e Maybe Payee",
          "source": "src/Penny-Lincoln-Queries.html#payee",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "payee",
          "normalized": "Posting-\u003eMaybe Payee",
          "package": "penny",
          "signature": "Posting-\u003eMaybe Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "postingLine",
          "package": "penny",
          "signature": "Posting -\u003e Maybe PostingLine",
          "source": "src/Penny-Lincoln-Queries.html#postingLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "postingLine",
          "normalized": "Posting-\u003eMaybe PostingLine",
          "package": "penny",
          "partial": "Line",
          "signature": "Posting-\u003eMaybe PostingLine",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:postingLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "postingMemo",
          "package": "penny",
          "signature": "Posting -\u003e Maybe Memo",
          "source": "src/Penny-Lincoln-Queries.html#postingMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "postingMemo",
          "normalized": "Posting-\u003eMaybe Memo",
          "package": "penny",
          "partial": "Memo",
          "signature": "Posting-\u003eMaybe Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:postingMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEvery Posting either has a Qty or it can be computed from its QtyRep.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Queries",
          "name": "qty",
          "package": "penny",
          "signature": "Posting -\u003e Qty",
          "source": "src/Penny-Lincoln-Queries.html#qty",
          "type": "function"
        },
        "index": {
          "description": "Every Posting either has Qty or it can be computed from its QtyRep",
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "qty",
          "normalized": "Posting-\u003eQty",
          "package": "penny",
          "signature": "Posting-\u003eQty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:qty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "side",
          "package": "penny",
          "signature": "Posting -\u003e Maybe Side",
          "source": "src/Penny-Lincoln-Queries.html#side",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "side",
          "normalized": "Posting-\u003eMaybe Side",
          "package": "penny",
          "signature": "Posting-\u003eMaybe Side",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:side"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "spaceBetween",
          "package": "penny",
          "signature": "Posting -\u003e Maybe SpaceBetween",
          "source": "src/Penny-Lincoln-Queries.html#spaceBetween",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "spaceBetween",
          "normalized": "Posting-\u003eMaybe SpaceBetween",
          "package": "penny",
          "partial": "Between",
          "signature": "Posting-\u003eMaybe SpaceBetween",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:spaceBetween"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "tags",
          "package": "penny",
          "signature": "Posting -\u003e Tags",
          "source": "src/Penny-Lincoln-Queries.html#tags",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "tags",
          "normalized": "Posting-\u003eTags",
          "package": "penny",
          "signature": "Posting-\u003eTags",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:tags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "topLineLine",
          "package": "penny",
          "signature": "Posting -\u003e Maybe TopLineLine",
          "source": "src/Penny-Lincoln-Queries.html#topLineLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "topLineLine",
          "normalized": "Posting-\u003eMaybe TopLineLine",
          "package": "penny",
          "partial": "Line Line",
          "signature": "Posting-\u003eMaybe TopLineLine",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:topLineLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "topMemoLine",
          "package": "penny",
          "signature": "Posting -\u003e Maybe TopMemoLine",
          "source": "src/Penny-Lincoln-Queries.html#topMemoLine",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "topMemoLine",
          "normalized": "Posting-\u003eMaybe TopMemoLine",
          "package": "penny",
          "partial": "Memo Line",
          "signature": "Posting-\u003eMaybe TopMemoLine",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:topMemoLine"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Queries",
          "name": "transactionMemo",
          "package": "penny",
          "signature": "Posting -\u003e Maybe Memo",
          "source": "src/Penny-Lincoln-Queries.html#transactionMemo",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Queries",
          "module": "Penny.Lincoln.Queries",
          "name": "transactionMemo",
          "normalized": "Posting-\u003eMaybe Memo",
          "package": "penny",
          "partial": "Memo",
          "signature": "Posting-\u003eMaybe Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Queries.html#v:transactionMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Serial",
          "name": "Serial",
          "package": "penny",
          "source": "src/Penny-Lincoln-Serial.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Penny Lincoln Serial",
          "module": "Penny.Lincoln.Serial",
          "name": "Serial",
          "package": "penny",
          "partial": "Serial",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Serial.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Serial",
          "name": "Serial",
          "package": "penny",
          "source": "src/Penny-Lincoln-Serial.html#Serial",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Lincoln Serial",
          "module": "Penny.Lincoln.Serial",
          "name": "Serial",
          "package": "penny",
          "partial": "Serial",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Serial.html#t:Serial"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Serial",
          "name": "backward",
          "package": "penny",
          "signature": "Serial -\u003e Int",
          "source": "src/Penny-Lincoln-Serial.html#backward",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Serial",
          "module": "Penny.Lincoln.Serial",
          "name": "backward",
          "normalized": "Serial-\u003eInt",
          "package": "penny",
          "signature": "Serial-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Serial.html#v:backward"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Serial",
          "name": "forward",
          "package": "penny",
          "signature": "Serial -\u003e Int",
          "source": "src/Penny-Lincoln-Serial.html#forward",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Serial",
          "module": "Penny.Lincoln.Serial",
          "name": "forward",
          "normalized": "Serial-\u003eInt",
          "package": "penny",
          "signature": "Serial-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Serial.html#v:forward"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Serial",
          "name": "serialItems",
          "package": "penny",
          "signature": "(Serial -\u003e a -\u003e b) -\u003e [a] -\u003e [b]",
          "source": "src/Penny-Lincoln-Serial.html#serialItems",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Serial",
          "module": "Penny.Lincoln.Serial",
          "name": "serialItems",
          "normalized": "(Serial-\u003ea-\u003eb)-\u003e[a]-\u003e[b]",
          "package": "penny",
          "partial": "Items",
          "signature": "(Serial-\u003ea-\u003eb)-\u003e[a]-\u003e[b]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Serial.html#v:serialItems"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdds serials to items that are nested within other items.\n\u003c/p\u003e",
          "module": "Penny.Lincoln.Serial",
          "name": "serialNestedItems",
          "package": "penny",
          "signature": "(a -\u003e Either b (f c, Serial -\u003e c -\u003e d, f d -\u003e b))-\u003e [a]-\u003e [b]",
          "type": "function"
        },
        "index": {
          "description": "Adds serials to items that are nested within other items",
          "hierarchy": "Penny Lincoln Serial",
          "module": "Penny.Lincoln.Serial",
          "name": "serialNestedItems",
          "normalized": "(a-\u003eEither b(c d,Serial-\u003ed-\u003ee,c e-\u003eb))-\u003e[a]-\u003e[b]",
          "package": "penny",
          "partial": "Nested Items",
          "signature": "(a-\u003eEither b(f c,Serial-\u003ec-\u003ed,f d-\u003eb))-\u003e[a]-\u003e[b]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Serial.html#v:serialNestedItems"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Lincoln.Serial",
          "name": "serialSomeItems",
          "package": "penny",
          "signature": "(a -\u003e Either b (Serial -\u003e b)) -\u003e [a] -\u003e [b]",
          "source": "src/Penny-Lincoln-Serial.html#serialSomeItems",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Lincoln Serial",
          "module": "Penny.Lincoln.Serial",
          "name": "serialSomeItems",
          "normalized": "(a-\u003eEither b(Serial-\u003eb))-\u003e[a]-\u003e[b]",
          "package": "penny",
          "partial": "Some Items",
          "signature": "(a-\u003eEither b(Serial-\u003eb))-\u003e[a]-\u003e[b]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln-Serial.html#v:serialSomeItems"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eLincoln - the Penny core\n\u003c/p\u003e\u003cp\u003ePenny's core types and classes are here. This module re-exports the\n most useful things. For more details you will want to look at the\n sub-modules. Also, not all types and functions are re-exported due\n to naming conflicts. In particular, neither\n \u003ca\u003ePenny.Lincoln.Predicates\u003c/a\u003e nor \u003ca\u003ePenny.Lincoln.Queries\u003c/a\u003e is exported\n from here due to the blizzard of name conflicts that would result.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Lincoln",
          "name": "Lincoln",
          "package": "penny",
          "source": "src/Penny-Lincoln.html",
          "type": "module"
        },
        "index": {
          "description": "Lincoln the Penny core Penny core types and classes are here This module re-exports the most useful things For more details you will want to look at the sub-modules Also not all types and functions are re-exported due to naming conflicts In particular neither Penny.Lincoln.Predicates nor Penny.Lincoln.Queries is exported from here due to the blizzard of name conflicts that would result",
          "hierarchy": "Penny Lincoln",
          "module": "Penny.Lincoln",
          "name": "Lincoln",
          "package": "penny",
          "partial": "Lincoln",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDisplays a PostFam in a one line format.\n\u003c/p\u003e\u003cp\u003eFormat:\n\u003c/p\u003e\u003cp\u003eFile LineNo Date Payee Acct DrCr Cmdty Qty\n\u003c/p\u003e",
          "module": "Penny.Lincoln",
          "name": "display",
          "package": "penny",
          "signature": "(Amount Qty -\u003e Text)-\u003e Posting-\u003e Text",
          "type": "function"
        },
        "index": {
          "description": "Displays PostFam in one line format Format File LineNo Date Payee Acct DrCr Cmdty Qty",
          "hierarchy": "Penny Lincoln",
          "module": "Penny.Lincoln",
          "name": "display",
          "normalized": "(Amount Qty-\u003eText)-\u003ePosting-\u003eText",
          "package": "penny",
          "signature": "(Amount Qty-\u003eText)-\u003ePosting-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Lincoln.html#v:display"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eShield - the Penny runtime environment\n\u003c/p\u003e\u003cp\u003eBoth Cabin and Copper can benefit from knowing information about\n the Penny runtime environment, such as environment variables and\n whether standard output is a terminal. That information is provided\n by the Runtime type. In the future this module may also provide\n information about the POSIX locale configuration. For now, that\n information would require reaching into the FFI and so it is not\n implemented.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Shield",
          "name": "Shield",
          "package": "penny",
          "source": "src/Penny-Shield.html",
          "type": "module"
        },
        "index": {
          "description": "Shield the Penny runtime environment Both Cabin and Copper can benefit from knowing information about the Penny runtime environment such as environment variables and whether standard output is terminal That information is provided by the Runtime type In the future this module may also provide information about the POSIX locale configuration For now that information would require reaching into the FFI and so it is not implemented",
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "Shield",
          "package": "penny",
          "partial": "Shield",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "Output",
          "package": "penny",
          "source": "src/Penny-Shield.html#Output",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "Output",
          "package": "penny",
          "partial": "Output",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#t:Output"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInformation about the runtime environment.\n\u003c/p\u003e",
          "module": "Penny.Shield",
          "name": "Runtime",
          "package": "penny",
          "source": "src/Penny-Shield.html#Runtime",
          "type": "data"
        },
        "index": {
          "description": "Information about the runtime environment",
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "Runtime",
          "package": "penny",
          "partial": "Runtime",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#t:Runtime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "ScreenLines",
          "package": "penny",
          "source": "src/Penny-Shield.html#ScreenLines",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "ScreenLines",
          "package": "penny",
          "partial": "Screen Lines",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#t:ScreenLines"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "ScreenWidth",
          "package": "penny",
          "source": "src/Penny-Shield.html#ScreenWidth",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "ScreenWidth",
          "package": "penny",
          "partial": "Screen Width",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#t:ScreenWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "Term",
          "package": "penny",
          "source": "src/Penny-Shield.html#Term",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "Term",
          "package": "penny",
          "partial": "Term",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#t:Term"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "IsTTY",
          "package": "penny",
          "signature": "IsTTY",
          "source": "src/Penny-Shield.html#Output",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "IsTTY",
          "package": "penny",
          "partial": "Is TTY",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:IsTTY"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "NotTTY",
          "package": "penny",
          "signature": "NotTTY",
          "source": "src/Penny-Shield.html#Output",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "NotTTY",
          "package": "penny",
          "partial": "Not TTY",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:NotTTY"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDetermines which Chunk Term to use based on whether standard\n output is a terminal. Uses Dumb if standard output is not a\n terminal; otherwise, uses the TERM environment variable.\n\u003c/p\u003e",
          "module": "Penny.Shield",
          "name": "autoTerm",
          "package": "penny",
          "signature": "Runtime -\u003e Term",
          "source": "src/Penny-Shield.html#autoTerm",
          "type": "function"
        },
        "index": {
          "description": "Determines which Chunk Term to use based on whether standard output is terminal Uses Dumb if standard output is not terminal otherwise uses the TERM environment variable",
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "autoTerm",
          "normalized": "Runtime-\u003eTerm",
          "package": "penny",
          "partial": "Term",
          "signature": "Runtime-\u003eTerm",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:autoTerm"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "currentTime",
          "package": "penny",
          "signature": "Runtime -\u003e DateTime",
          "source": "src/Penny-Shield.html#currentTime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "currentTime",
          "normalized": "Runtime-\u003eDateTime",
          "package": "penny",
          "partial": "Time",
          "signature": "Runtime-\u003eDateTime",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:currentTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Shield\",\"Penny\"]",
          "name": "environment",
          "package": "penny",
          "signature": "Runtime -\u003e [(String, String)]",
          "source": "src/Penny-Shield.html#environment",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:environment\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:environment\"]"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "environment",
          "normalized": "Runtime-\u003e[(String,String)]",
          "package": "penny",
          "signature": "Runtime-\u003e[(String,String)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:environment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "output",
          "package": "penny",
          "signature": "Runtime -\u003e Output",
          "source": "src/Penny-Shield.html#output",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "output",
          "normalized": "Runtime-\u003eOutput",
          "package": "penny",
          "signature": "Runtime-\u003eOutput",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:output"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "runtime",
          "package": "penny",
          "signature": "IO Runtime",
          "source": "src/Penny-Shield.html#runtime",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "runtime",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:runtime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "screenLines",
          "package": "penny",
          "signature": "Runtime -\u003e Maybe ScreenLines",
          "source": "src/Penny-Shield.html#screenLines",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "screenLines",
          "normalized": "Runtime-\u003eMaybe ScreenLines",
          "package": "penny",
          "partial": "Lines",
          "signature": "Runtime-\u003eMaybe ScreenLines",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:screenLines"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "screenWidth",
          "package": "penny",
          "signature": "Runtime -\u003e Maybe ScreenWidth",
          "source": "src/Penny-Shield.html#screenWidth",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "screenWidth",
          "normalized": "Runtime-\u003eMaybe ScreenWidth",
          "package": "penny",
          "partial": "Width",
          "signature": "Runtime-\u003eMaybe ScreenWidth",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:screenWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "term",
          "package": "penny",
          "signature": "Runtime -\u003e Maybe Term",
          "source": "src/Penny-Shield.html#term",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "term",
          "normalized": "Runtime-\u003eMaybe Term",
          "package": "penny",
          "signature": "Runtime-\u003eMaybe Term",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:term"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDetermines which Chunk Term to use based on the TERM environment\n variable, regardless of whether standard output is a terminal. Uses\n Dumb if TERM is not set.\n\u003c/p\u003e",
          "module": "Penny.Shield",
          "name": "termFromEnv",
          "package": "penny",
          "signature": "Runtime -\u003e Term",
          "source": "src/Penny-Shield.html#termFromEnv",
          "type": "function"
        },
        "index": {
          "description": "Determines which Chunk Term to use based on the TERM environment variable regardless of whether standard output is terminal Uses Dumb if TERM is not set",
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "termFromEnv",
          "normalized": "Runtime-\u003eTerm",
          "package": "penny",
          "partial": "From Env",
          "signature": "Runtime-\u003eTerm",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:termFromEnv"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "unScreenLines",
          "package": "penny",
          "signature": "ScreenLines -\u003e Int",
          "source": "src/Penny-Shield.html#unScreenLines",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "unScreenLines",
          "normalized": "ScreenLines-\u003eInt",
          "package": "penny",
          "partial": "Screen Lines",
          "signature": "ScreenLines-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:unScreenLines"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Shield",
          "name": "unScreenWidth",
          "package": "penny",
          "signature": "ScreenWidth -\u003e Int",
          "source": "src/Penny-Shield.html#unScreenWidth",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Shield",
          "module": "Penny.Shield",
          "name": "unScreenWidth",
          "normalized": "ScreenWidth-\u003eInt",
          "package": "penny",
          "partial": "Screen Width",
          "signature": "ScreenWidth-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Shield.html#v:unScreenWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eSteel - independent Penny utilities\n\u003c/p\u003e\u003cp\u003eCurrently there are no modules in Steel, as they have been\n shipped off in separate packages such as anonymous-sums and\n prednote; however, Steel remains if needed in the future.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Steel",
          "name": "Steel",
          "package": "penny",
          "source": "src/Penny-Steel.html",
          "type": "module"
        },
        "index": {
          "description": "Steel independent Penny utilities Currently there are no modules in Steel as they have been shipped off in separate packages such as anonymous-sums and prednote however Steel remains if needed in the future",
          "hierarchy": "Penny Steel",
          "module": "Penny.Steel",
          "name": "Steel",
          "package": "penny",
          "partial": "Steel",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Steel.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eWheat - Penny ledger tests\n\u003c/p\u003e\u003cp\u003eWheat helps you build tests to check all the postings in your\n ledger. Perhaps you want to make sure all the account names are\n valid, or that your checking account has no unreconciled\n transactions. With Wheat you can easily build a command line\n program that will check all the postings in a ledger for you\n against criteria that you specify.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Wheat",
          "name": "Wheat",
          "package": "penny",
          "source": "src/Penny-Wheat.html",
          "type": "module"
        },
        "index": {
          "description": "Wheat Penny ledger tests Wheat helps you build tests to check all the postings in your ledger Perhaps you want to make sure all the account names are valid or that your checking account has no unreconciled transactions With Wheat you can easily build command line program that will check all the postings in ledger for you against criteria that you specify",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "Wheat",
          "package": "penny",
          "partial": "Wheat",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRecord holding all data to configure Wheat.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "WheatConf",
          "package": "penny",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "data"
        },
        "index": {
          "description": "Record holding all data to configure Wheat",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "WheatConf",
          "package": "penny",
          "partial": "Wheat Conf",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#t:WheatConf"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Wheat",
          "name": "WheatConf",
          "package": "penny",
          "signature": "WheatConf",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "WheatConf",
          "package": "penny",
          "partial": "Wheat Conf",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:WheatConf"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePasses if at least a particular number of postings is True.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "atLeastNPostings",
          "package": "penny",
          "signature": "Int-\u003e Name-\u003e Pdct Posting-\u003e Test Posting",
          "type": "function"
        },
        "index": {
          "description": "Passes if at least particular number of postings is True",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "atLeastNPostings",
          "normalized": "Int-\u003eName-\u003ePdct Posting-\u003eTest Posting",
          "package": "penny",
          "partial": "Least NPostings",
          "signature": "Int-\u003eName-\u003ePdct Posting-\u003eTest Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:atLeastNPostings"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTests may use this date and time as they wish; see\n \u003ccode\u003e\u003ca\u003etests\u003c/a\u003e\u003c/code\u003e. Typically you will set this to the current instant.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "baseTime",
          "package": "penny",
          "signature": "UTCTime",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "Tests may use this date and time as they wish see tests Typically you will set this to the current instant",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "baseTime",
          "package": "penny",
          "partial": "Time",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:baseTime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis is displayed at the beginning of the online help. It\n should be a one-line description of what this program does--for\n example, what it checks for.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "briefDescription",
          "package": "penny",
          "signature": "String",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "This is displayed at the beginning of the online help It should be one-line description of what this program does--for example what it checks for",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "briefDescription",
          "package": "penny",
          "partial": "Description",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:briefDescription"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUse colors even if stdout is not a file?\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "colorToFile",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "Use colors even if stdout is not file",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "colorToFile",
          "package": "penny",
          "partial": "To File",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:colorToFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePasses only if each posting is True.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "eachPostingMustBeTrue",
          "package": "penny",
          "signature": "Name -\u003e Pdct Posting -\u003e Test Posting",
          "source": "src/Penny-Wheat.html#eachPostingMustBeTrue",
          "type": "function"
        },
        "index": {
          "description": "Passes only if each posting is True",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "eachPostingMustBeTrue",
          "normalized": "Name-\u003ePdct Posting-\u003eTest Posting",
          "package": "penny",
          "partial": "Posting Must Be True",
          "signature": "Name-\u003ePdct Posting-\u003eTest Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:eachPostingMustBeTrue"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow to format quantities\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "formatQty",
          "package": "penny",
          "signature": "[LedgerItem] -\u003e Amount Qty -\u003e Text",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "How to format quantities",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "formatQty",
          "normalized": "[LedgerItem]-\u003eAmount Qty-\u003eText",
          "package": "penny",
          "partial": "Qty",
          "signature": "[LedgerItem]-\u003eAmount Qty-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:formatQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA non-terminating list of starting with the first day of the\n first month following the given day, followed by successive first\n days of the month.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "futureFirstsOfTheMonth",
          "package": "penny",
          "signature": "Day -\u003e [Day]",
          "source": "src/Penny-Wheat.html#futureFirstsOfTheMonth",
          "type": "function"
        },
        "index": {
          "description": "non-terminating list of starting with the first day of the first month following the given day followed by successive first days of the month",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "futureFirstsOfTheMonth",
          "normalized": "Day-\u003e[Day]",
          "package": "penny",
          "partial": "Firsts Of The Month",
          "signature": "Day-\u003e[Day]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:futureFirstsOfTheMonth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow many spaces to indent each level in a tree of tests.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "indentAmt",
          "package": "penny",
          "signature": "IndentAmt",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "How many spaces to indent each level in tree of tests",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "indentAmt",
          "package": "penny",
          "partial": "Amt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:indentAmt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eRuns Wheat tests. Prints the result to standard output. Exits\n unsuccessfully if the user gave bad command line options or if at\n least a single test failed; exits successfully if all tests\n succeeded. Shows the version number and exits successfully if that\n was requested.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "main",
          "package": "penny",
          "signature": "Version-\u003e (Runtime -\u003e WheatConf)-\u003e IO ()",
          "type": "function"
        },
        "index": {
          "description": "Runs Wheat tests Prints the result to standard output Exits unsuccessfully if the user gave bad command line options or if at least single test failed exits successfully if all tests succeeded Shows the version number and exits successfully if that was requested",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "main",
          "normalized": "Version-\u003e(Runtime-\u003eWheatConf)-\u003eIO()",
          "package": "penny",
          "signature": "Version-\u003e(Runtime-\u003eWheatConf)-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:main"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDisplayed at the end of the online help. It should be a list\n of lines, wich each line not terminated by a newline\n character. It is displayed at the end of the online help.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "moreHelp",
          "package": "penny",
          "signature": "[String]",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "Displayed at the end of the online help It should be list of lines wich each line not terminated by newline character It is displayed at the end of the online help",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "moreHelp",
          "normalized": "[String]",
          "package": "penny",
          "partial": "Help",
          "signature": "[String]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:moreHelp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf True, then tests will stop running immediately after a\n single test fails. If False, all tests are always run.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "stopOnFail",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "If True then tests will stop running immediately after single test fails If False all tests are always run",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "stopOnFail",
          "package": "penny",
          "partial": "On Fail",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:stopOnFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTest names are filtered with this function; a test is only\n run if this function returns True.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "testPred",
          "package": "penny",
          "signature": "Name -\u003e Bool",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "Test names are filtered with this function test is only run if this function returns True",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "testPred",
          "normalized": "Name-\u003eBool",
          "package": "penny",
          "partial": "Pred",
          "signature": "Name-\u003eBool",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:testPred"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe actual tests to run. The UTCTime is the \u003ccode\u003ebase time\u003c/code\u003e. Each\n test may decide what to do with the base time--for example, the\n test might say that all postings have to have a date on or\n before that date. Or the test might just ignore the base time.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "tests",
          "package": "penny",
          "signature": "[UTCTime -\u003e Test Posting]",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "The actual tests to run The UTCTime is the base time Each test may decide what to do with the base time--for example the test might say that all postings have to have date on or before that date Or the test might just ignore the base time",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "tests",
          "normalized": "[UTCTime-\u003eTest Posting]",
          "package": "penny",
          "signature": "[UTCTime-\u003eTest Posting]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:tests"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf Just, use this verbosity. If Nothing, use the default\n verbosity provided by the tests themselves.\n\u003c/p\u003e",
          "module": "Penny.Wheat",
          "name": "verbosity",
          "package": "penny",
          "signature": "Maybe TestVerbosity",
          "source": "src/Penny-Wheat.html#WheatConf",
          "type": "function"
        },
        "index": {
          "description": "If Just use this verbosity If Nothing use the default verbosity provided by the tests themselves",
          "hierarchy": "Penny Wheat",
          "module": "Penny.Wheat",
          "name": "verbosity",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Wheat.html#v:verbosity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eZinc - the Penny command-line interface\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny.Zinc",
          "name": "Zinc",
          "package": "penny",
          "source": "src/Penny-Zinc.html",
          "type": "module"
        },
        "index": {
          "description": "Zinc the Penny command-line interface",
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Zinc",
          "package": "penny",
          "partial": "Zinc",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhether to use color when standard output is not a terminal.\n\u003c/p\u003e",
          "module": "Penny.Zinc",
          "name": "ColorToFile",
          "package": "penny",
          "source": "src/Penny-Zinc.html#ColorToFile",
          "type": "newtype"
        },
        "index": {
          "description": "Whether to use color when standard output is not terminal",
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "ColorToFile",
          "package": "penny",
          "partial": "Color To File",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#t:ColorToFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "Defaults",
          "package": "penny",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Defaults",
          "package": "penny",
          "partial": "Defaults",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#t:Defaults"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "Matcher",
          "package": "penny",
          "source": "src/Penny-Zinc.html#Matcher",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Matcher",
          "package": "penny",
          "partial": "Matcher",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#t:Matcher"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "SortField",
          "package": "penny",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "SortField",
          "package": "penny",
          "partial": "Sort Field",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#t:SortField"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Account",
          "package": "penny",
          "signature": "Account",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Account\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Account\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Account",
          "package": "penny",
          "partial": "Account",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Account"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "ColorToFile",
          "package": "penny",
          "signature": "ColorToFile",
          "source": "src/Penny-Zinc.html#ColorToFile",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "ColorToFile",
          "package": "penny",
          "partial": "Color To File",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:ColorToFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Commodity",
          "package": "penny",
          "signature": "Commodity",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Commodity\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Commodity\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Commodity",
          "package": "penny",
          "partial": "Commodity",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Commodity"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Date",
          "package": "penny",
          "signature": "Date",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Date\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Date\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Date",
          "package": "penny",
          "partial": "Date",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Date"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "Defaults",
          "package": "penny",
          "signature": "Defaults",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Defaults",
          "package": "penny",
          "partial": "Defaults",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Defaults"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "DrCr",
          "package": "penny",
          "signature": "DrCr",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:DrCr\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:DrCr\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "DrCr",
          "package": "penny",
          "partial": "Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:DrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Exact",
          "package": "penny",
          "signature": "Exact",
          "source": "src/Penny-Zinc.html#Matcher",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Exact\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Exact\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Exact",
          "package": "penny",
          "partial": "Exact",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Exact"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Flag",
          "package": "penny",
          "signature": "Flag",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Flag\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Flag\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Flag",
          "package": "penny",
          "partial": "Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Flag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Number",
          "package": "penny",
          "signature": "Number",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Number\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Number\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Number",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Number"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "PCRE",
          "package": "penny",
          "signature": "PCRE",
          "source": "src/Penny-Zinc.html#Matcher",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:PCRE\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:PCRE\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "PCRE",
          "package": "penny",
          "partial": "PCRE",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:PCRE"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Payee",
          "package": "penny",
          "signature": "Payee",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Payee\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Payee\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Payee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Payee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "PostingMemo",
          "package": "penny",
          "signature": "PostingMemo",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:PostingMemo\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:PostingMemo\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "PostingMemo",
          "package": "penny",
          "partial": "Posting Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:PostingMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Qty",
          "package": "penny",
          "signature": "Qty",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Qty\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Qty\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Qty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Qty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "TransactionMemo",
          "package": "penny",
          "signature": "TransactionMemo",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:TransactionMemo\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:TransactionMemo\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "TransactionMemo",
          "package": "penny",
          "partial": "Transaction Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:TransactionMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Penny.Zinc\",\"Penny\"]",
          "name": "Within",
          "package": "penny",
          "signature": "Within",
          "source": "src/Penny-Zinc.html#Matcher",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Within\",\"http://hackage.haskell.org/package/penny/docs/Penny.html#v:Within\"]"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "Within",
          "package": "penny",
          "partial": "Within",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:Within"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "colorToFile",
          "package": "penny",
          "signature": "ColorToFile",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "colorToFile",
          "package": "penny",
          "partial": "To File",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:colorToFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf Nothing, no default scheme. If the user does not pick a\n scheme, no colors are used.\n\u003c/p\u003e",
          "module": "Penny.Zinc",
          "name": "defaultScheme",
          "package": "penny",
          "signature": "Maybe Scheme",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "If Nothing no default scheme If the user does not pick scheme no colors are used",
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "defaultScheme",
          "package": "penny",
          "partial": "Scheme",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:defaultScheme"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "exprDesc",
          "package": "penny",
          "signature": "ExprDesc",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "exprDesc",
          "package": "penny",
          "partial": "Desc",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:exprDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "formatQty",
          "package": "penny",
          "signature": "[LedgerItem] -\u003e Amount Qty -\u003e Text",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "formatQty",
          "normalized": "[LedgerItem]-\u003eAmount Qty-\u003eText",
          "package": "penny",
          "partial": "Qty",
          "signature": "[LedgerItem]-\u003eAmount Qty-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:formatQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "matcher",
          "package": "penny",
          "signature": "Matcher",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "matcher",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:matcher"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "moreSchemes",
          "package": "penny",
          "signature": "[Scheme]",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "moreSchemes",
          "normalized": "[Scheme]",
          "package": "penny",
          "partial": "Schemes",
          "signature": "[Scheme]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:moreSchemes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "runZinc",
          "package": "penny",
          "signature": "Version-\u003e Defaults-\u003e Runtime-\u003e [Report]-\u003e IO ()",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "runZinc",
          "normalized": "Version-\u003eDefaults-\u003eRuntime-\u003e[Report]-\u003eIO()",
          "package": "penny",
          "partial": "Zinc",
          "signature": "Version-\u003eDefaults-\u003eRuntime-\u003e[Report]-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:runZinc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "sensitive",
          "package": "penny",
          "signature": "CaseSensitive",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "sensitive",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:sensitive"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFor example, to sort by date and then by payee if the dates\n are equal, use\n\u003c/p\u003e\u003cpre\u003e [(Date, Ascending), (Payee, Ascending)]\n\u003c/pre\u003e",
          "module": "Penny.Zinc",
          "name": "sorter",
          "package": "penny",
          "signature": "[(SortField, SortOrder)]",
          "source": "src/Penny-Zinc.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "For example to sort by date and then by payee if the dates are equal use Date Ascending Payee Ascending",
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "sorter",
          "normalized": "[(SortField,SortOrder)]",
          "package": "penny",
          "signature": "[(SortField,SortOrder)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:sorter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny.Zinc",
          "name": "unColorToFile",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny-Zinc.html#ColorToFile",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny Zinc",
          "module": "Penny.Zinc",
          "name": "unColorToFile",
          "package": "penny",
          "partial": "Color To File",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny-Zinc.html#v:unColorToFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003ePenny - extensible double-entry accounting system\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Penny",
          "name": "Penny",
          "package": "penny",
          "source": "src/Penny.html",
          "type": "module"
        },
        "index": {
          "description": "Penny extensible double-entry accounting system",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Penny",
          "package": "penny",
          "partial": "Penny",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Changers",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#Changers",
          "type": "type"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Changers",
          "package": "penny",
          "partial": "Changers",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Changers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe digit grouping character when the radix is a comma.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "CommaGrp",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#CommaGrp",
          "type": "data"
        },
        "index": {
          "description": "The digit grouping character when the radix is comma",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "CommaGrp",
          "package": "penny",
          "partial": "Comma Grp",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:CommaGrp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis type contains settings for all the reports, as well as\n default settings for the global options. Some of these can be\n overridden on the command line.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "Defaults",
          "package": "penny",
          "source": "src/Penny.html#Defaults",
          "type": "data"
        },
        "index": {
          "description": "This type contains settings for all the reports as well as default settings for the global options Some of these can be overridden on the command line",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Defaults",
          "package": "penny",
          "partial": "Defaults",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Defaults"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "EvenAndOdd",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#EvenAndOdd",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "EvenAndOdd",
          "package": "penny",
          "partial": "Even And Odd",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:EvenAndOdd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIs this an infix or RPN expression?\n\u003c/p\u003e",
          "module": "Penny",
          "name": "ExprDesc",
          "package": "penny",
          "type": "data"
        },
        "index": {
          "description": "Is this an infix or RPN expression",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "ExprDesc",
          "package": "penny",
          "partial": "Expr Desc",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:ExprDesc"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Fields",
          "package": "penny",
          "source": "src/Penny.html#Fields",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA function used to format quantities.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "FormatQty",
          "package": "penny",
          "source": "src/Penny.html#FormatQty",
          "type": "type"
        },
        "index": {
          "description": "function used to format quantities",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "FormatQty",
          "package": "penny",
          "partial": "Format Qty",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:FormatQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Labels",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#Labels",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Labels",
          "package": "penny",
          "partial": "Labels",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Labels"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Matcher",
          "package": "penny",
          "source": "src/Penny-Zinc.html#Matcher",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Matcher",
          "package": "penny",
          "partial": "Matcher",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Matcher"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe digit grouping character when the radix is a period.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "PeriodGrp",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#PeriodGrp",
          "type": "data"
        },
        "index": {
          "description": "The digit grouping character when the radix is period",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "PeriodGrp",
          "package": "penny",
          "partial": "Period Grp",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:PeriodGrp"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Radix",
          "package": "penny",
          "source": "src/Penny-Lincoln-Bits-Qty.html#Radix",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Radix",
          "package": "penny",
          "partial": "Radix",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Radix"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eInformation about the runtime environment.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "Runtime",
          "package": "penny",
          "source": "src/Penny-Shield.html#Runtime",
          "type": "data"
        },
        "index": {
          "description": "Information about the runtime environment",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Runtime",
          "package": "penny",
          "partial": "Runtime",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Runtime"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "S3",
          "package": "penny",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "S3",
          "package": "penny",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:S3"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Scheme",
          "package": "penny",
          "source": "src/Penny-Cabin-Scheme.html#Scheme",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Scheme",
          "package": "penny",
          "partial": "Scheme",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Scheme"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "SortBy",
          "package": "penny",
          "source": "src/Penny-Cabin-Balance-Convert-Parser.html#SortBy",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "SortBy",
          "package": "penny",
          "partial": "Sort By",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:SortBy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "SortField",
          "package": "penny",
          "source": "src/Penny-Zinc.html#SortField",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "SortField",
          "package": "penny",
          "partial": "Sort Field",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:SortField"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "SortOrder",
          "package": "penny",
          "source": "src/Penny-Cabin-Parsers.html#SortOrder",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "SortOrder",
          "package": "penny",
          "partial": "Sort Order",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:SortOrder"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Spacers",
          "package": "penny",
          "source": "src/Penny.html#Spacers",
          "type": "data"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Spacers",
          "package": "penny",
          "partial": "Spacers",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Spacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe commodity to which to convert the commodities in the convert\n report.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "Target",
          "package": "penny",
          "source": "src/Penny.html#Target",
          "type": "data"
        },
        "index": {
          "description": "The commodity to which to convert the commodities in the convert report",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Target",
          "package": "penny",
          "partial": "Target",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Target"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA space efficient, packed, unboxed Unicode text type.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "Text",
          "package": "penny",
          "type": "data"
        },
        "index": {
          "description": "space efficient packed unboxed Unicode text type",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Text",
          "package": "penny",
          "partial": "Text",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Text"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA \u003ccode\u003e\u003ca\u003eVersion\u003c/a\u003e\u003c/code\u003e represents the version of a software entity.  \n\u003c/p\u003e\u003cp\u003eAn instance of \u003ccode\u003e\u003ca\u003eEq\u003c/a\u003e\u003c/code\u003e is provided, which implements exact equality\nmodulo reordering of the tags in the \u003ccode\u003e\u003ca\u003eversionTags\u003c/a\u003e\u003c/code\u003e field.\n\u003c/p\u003e\u003cp\u003eAn instance of \u003ccode\u003e\u003ca\u003eOrd\u003c/a\u003e\u003c/code\u003e is also provided, which gives lexicographic\nordering on the \u003ccode\u003e\u003ca\u003eversionBranch\u003c/a\u003e\u003c/code\u003e fields (i.e. 2.1 \u003e 2.0, 1.2.3 \u003e 1.2.2,\netc.).  This is expected to be sufficient for many uses, but note that\nyou may need to use a more specific ordering for your versioning\nscheme.  For example, some versioning schemes may include pre-releases\nwhich have tags \u003ccode\u003e\"pre1\"\u003c/code\u003e, \u003ccode\u003e\"pre2\"\u003c/code\u003e, and so on, and these would need to\nbe taken into account when determining ordering.  In some cases, date\nordering may be more appropriate, so the application would have to\nlook for \u003ccode\u003edate\u003c/code\u003e tags in the \u003ccode\u003e\u003ca\u003eversionTags\u003c/a\u003e\u003c/code\u003e field and compare those.\nThe bottom line is, don't always assume that \u003ccode\u003e\u003ca\u003ecompare\u003c/a\u003e\u003c/code\u003e and other \u003ccode\u003e\u003ca\u003eOrd\u003c/a\u003e\u003c/code\u003e\noperations are the right thing for every \u003ccode\u003e\u003ca\u003eVersion\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eSimilarly, concrete representations of versions may differ.  One\npossible concrete representation is provided (see \u003ccode\u003e\u003ca\u003eshowVersion\u003c/a\u003e\u003c/code\u003e and\n\u003ccode\u003e\u003ca\u003eparseVersion\u003c/a\u003e\u003c/code\u003e), but depending on the application a different concrete\nrepresentation may be more appropriate.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "Version",
          "package": "penny",
          "type": "data"
        },
        "index": {
          "description": "Version represents the version of software entity An instance of Eq is provided which implements exact equality modulo reordering of the tags in the versionTags field An instance of Ord is also provided which gives lexicographic ordering on the versionBranch fields i.e etc This is expected to be sufficient for many uses but note that you may need to use more specific ordering for your versioning scheme For example some versioning schemes may include pre-releases which have tags pre1 pre2 and so on and these would need to be taken into account when determining ordering In some cases date ordering may be more appropriate so the application would have to look for date tags in the versionTags field and compare those The bottom line is don always assume that compare and other Ord operations are the right thing for every Version Similarly concrete representations of versions may differ One possible concrete representation is provided see showVersion and parseVersion but depending on the application different concrete representation may be more appropriate",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Version",
          "package": "penny",
          "partial": "Version",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#t:Version"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSelects a target commodity automatically, based on which\n commodity is the most common target commodity in the prices in\n your ledger files. If there is a tie for most common target\n commodity, the target that appears later in your ledger files\n is used.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "AutoTarget",
          "package": "penny",
          "signature": "AutoTarget",
          "source": "src/Penny.html#Target",
          "type": "function"
        },
        "index": {
          "description": "Selects target commodity automatically based on which commodity is the most common target commodity in the prices in your ledger files If there is tie for most common target commodity the target that appears later in your ledger files is used",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "AutoTarget",
          "package": "penny",
          "partial": "Auto Target",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:AutoTarget"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Defaults",
          "package": "penny",
          "signature": "Defaults",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Defaults",
          "package": "penny",
          "partial": "Defaults",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:Defaults"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Fields",
          "package": "penny",
          "signature": "Fields",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Fields",
          "package": "penny",
          "partial": "Fields",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:Fields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Infix",
          "package": "penny",
          "signature": "Infix",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Infix",
          "package": "penny",
          "partial": "Infix",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:Infix"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAlways uses the commodity named by the string given.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "ManualTarget",
          "package": "penny",
          "signature": "ManualTarget String",
          "source": "src/Penny.html#Target",
          "type": "function"
        },
        "index": {
          "description": "Always uses the commodity named by the string given",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "ManualTarget",
          "package": "penny",
          "partial": "Manual Target",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:ManualTarget"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "RPN",
          "package": "penny",
          "signature": "RPN",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "RPN",
          "package": "penny",
          "partial": "RPN",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:RPN"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Spacers",
          "package": "penny",
          "signature": "Spacers",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Spacers",
          "package": "penny",
          "partial": "Spacers",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:Spacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "Version",
          "package": "penny",
          "signature": "Version",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "Version",
          "package": "penny",
          "partial": "Version",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:Version"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAdditional color schemes the user can pick from on the\n command line.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "additionalSchemes",
          "package": "penny",
          "signature": "[Scheme]",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Additional color schemes the user can pick from on the command line",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "additionalSchemes",
          "normalized": "[Scheme]",
          "package": "penny",
          "partial": "Schemes",
          "signature": "[Scheme]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:additionalSchemes"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhether to sort the accounts in ascending or descending order\n by account name in the balance report.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "balanceOrder",
          "package": "penny",
          "signature": "SortOrder",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Whether to sort the accounts in ascending or descending order by account name in the balance report",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "balanceOrder",
          "package": "penny",
          "partial": "Order",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:balanceOrder"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShow zero balances in the balance report? If True, show them;\n if False, hide them.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "balanceShowZeroBalances",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Show zero balances in the balance report If True show them if False hide them",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "balanceShowZeroBalances",
          "package": "penny",
          "partial": "Show Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:balanceShowZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhether the matcher is case sensitive by default\n\u003c/p\u003e",
          "module": "Penny",
          "name": "caseSensitive",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Whether the matcher is case sensitive by default",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "caseSensitive",
          "package": "penny",
          "partial": "Sensitive",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:caseSensitive"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUse colors when standard output is not a terminal?\n\u003c/p\u003e",
          "module": "Penny",
          "name": "colorToFile",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Use colors when standard output is not terminal",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "colorToFile",
          "package": "penny",
          "partial": "To File",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:colorToFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSort the convert report in ascending or descending order.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "convertOrder",
          "package": "penny",
          "signature": "SortOrder",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Sort the convert report in ascending or descending order",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "convertOrder",
          "package": "penny",
          "partial": "Order",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:convertOrder"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShow zero balances in the convert report? If True, show them;\n if False, hide them.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "convertShowZeroBalances",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Show zero balances in the convert report If True show them if False hide them",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "convertShowZeroBalances",
          "package": "penny",
          "partial": "Show Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:convertShowZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSort by account or by quantity in the convert report.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "convertSortBy",
          "package": "penny",
          "signature": "SortBy",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Sort by account or by quantity in the convert report",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "convertSortBy",
          "package": "penny",
          "partial": "Sort By",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:convertSortBy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe commodity to which to convert the commodities in the\n convert report.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "convertTarget",
          "package": "penny",
          "signature": "Target",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "The commodity to which to convert the commodities in the convert report",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "convertTarget",
          "package": "penny",
          "partial": "Target",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:convertTarget"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault color scheme. If Nothing, there is no default color\n scheme. If there is no default color scheme and the user does\n not pick one on the command line, no colors will be used.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "defaultScheme",
          "package": "penny",
          "signature": "Maybe Scheme",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Default color scheme If Nothing there is no default color scheme If there is no default color scheme and the user does not pick one on the command line no colors will be used",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "defaultScheme",
          "package": "penny",
          "partial": "Scheme",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:defaultScheme"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUse RPN or infix expressions? This affects both the posting\n filter and the filter for the Postings report.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "expressionType",
          "package": "penny",
          "signature": "ExprDesc",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Use RPN or infix expressions This affects both the posting filter and the filter for the Postings report",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "expressionType",
          "package": "penny",
          "partial": "Type",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:expressionType"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fAccount",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fAccount",
          "package": "penny",
          "partial": "Account",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fAccount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fDate",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fDate",
          "package": "penny",
          "partial": "Date",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fDate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fFilePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fFileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fFilename",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fFilename",
          "package": "penny",
          "partial": "Filename",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fFilename"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fFiltered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fFiltered",
          "package": "penny",
          "partial": "Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fFlag",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fFlag",
          "package": "penny",
          "partial": "Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fFlag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fGlobalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fGlobalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fLineNum",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fLineNum",
          "package": "penny",
          "partial": "Line Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fLineNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fMemo",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fMemo",
          "package": "penny",
          "partial": "Memo",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fMemo"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fNumber",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fNumber",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fPayee",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fPayee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fPostingCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fPostingCmdty",
          "package": "penny",
          "partial": "Posting Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fPostingCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fPostingDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fPostingDrCr",
          "package": "penny",
          "partial": "Posting Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fPostingDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fPostingQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fPostingQty",
          "package": "penny",
          "partial": "Posting Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fPostingQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fRevFilePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fRevFilePosting",
          "package": "penny",
          "partial": "Rev File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fRevFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fRevFileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fRevFileTransaction",
          "package": "penny",
          "partial": "Rev File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fRevFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fRevFiltered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fRevFiltered",
          "package": "penny",
          "partial": "Rev Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fRevFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fRevGlobalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fRevGlobalPosting",
          "package": "penny",
          "partial": "Rev Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fRevGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fRevGlobalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fRevGlobalTransaction",
          "package": "penny",
          "partial": "Rev Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fRevGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fRevSorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fRevSorted",
          "package": "penny",
          "partial": "Rev Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fRevSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fRevVisible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fRevVisible",
          "package": "penny",
          "partial": "Rev Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fRevVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fSorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fSorted",
          "package": "penny",
          "partial": "Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fTags",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fTags",
          "package": "penny",
          "partial": "Tags",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fTags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fTotalCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fTotalCmdty",
          "package": "penny",
          "partial": "Total Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fTotalCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fTotalDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fTotalDrCr",
          "package": "penny",
          "partial": "Total Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fTotalDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fTotalQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fTotalQty",
          "package": "penny",
          "partial": "Total Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fTotalQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "fVisible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Fields",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "fVisible",
          "package": "penny",
          "partial": "Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:fVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow to format quantities. This affects only quantities that\n are not parsed from the ledger.  Examples include calculated\n totals and inferred quantities.  Affects all reports.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "formatQty",
          "package": "penny",
          "signature": "FormatQty",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "How to format quantities This affects only quantities that are not parsed from the ledger Examples include calculated totals and inferred quantities Affects all reports",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "formatQty",
          "package": "penny",
          "partial": "Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:formatQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eObtains radix and grouping information for a particular commodity\n and quantity, but does not actually perform the formatting.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "getQtyFormat",
          "package": "penny",
          "signature": "S3 Radix PeriodGrp CommaGrp-\u003e [LedgerItem]-\u003e Amount Qty-\u003e S3 Radix PeriodGrp CommaGrp",
          "type": "function"
        },
        "index": {
          "description": "Obtains radix and grouping information for particular commodity and quantity but does not actually perform the formatting",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "getQtyFormat",
          "normalized": "S Radix PeriodGrp CommaGrp-\u003e[LedgerItem]-\u003eAmount Qty-\u003eS Radix PeriodGrp CommaGrp",
          "package": "penny",
          "partial": "Qty Format",
          "signature": "S Radix PeriodGrp CommaGrp-\u003e[LedgerItem]-\u003eAmount Qty-\u003eS Radix PeriodGrp CommaGrp",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:getQtyFormat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhich matcher to use\n\u003c/p\u003e",
          "module": "Penny",
          "name": "matcher",
          "package": "penny",
          "signature": "Matcher",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Which matcher to use",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "matcher",
          "package": "penny",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:matcher"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003cem\u003eO(n)\u003c/em\u003e Convert a \u003ccode\u003e\u003ca\u003eString\u003c/a\u003e\u003c/code\u003e into a \u003ccode\u003e\u003ca\u003eText\u003c/a\u003e\u003c/code\u003e.  Subject to\n fusion.  Performs replacement on invalid scalar values.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "pack",
          "package": "penny",
          "signature": "String -\u003e Text",
          "type": "function"
        },
        "index": {
          "description": "Convert String into Text Subject to fusion Performs replacement on invalid scalar values",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "pack",
          "normalized": "String-\u003eText",
          "package": "penny",
          "signature": "String-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:pack"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSee postingsPayeeAllocation above for an explanation\n\u003c/p\u003e",
          "module": "Penny",
          "name": "postingsAccountAllocation",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "See postingsPayeeAllocation above for an explanation",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "postingsAccountAllocation",
          "package": "penny",
          "partial": "Account Allocation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:postingsAccountAllocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHow to format dates in the postings report.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "postingsDateFormat",
          "package": "penny",
          "signature": "(PostMeta, Posting) -\u003e Text",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "How to format dates in the postings report",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "postingsDateFormat",
          "normalized": "(PostMeta,Posting)-\u003eText",
          "package": "penny",
          "partial": "Date Format",
          "signature": "(PostMeta,Posting)-\u003eText",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:postingsDateFormat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFields to show by default in the postings report.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "postingsFields",
          "package": "penny",
          "signature": "Fields Bool",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Fields to show by default in the postings report",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "postingsFields",
          "package": "penny",
          "partial": "Fields",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:postingsFields"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003epostingsPayeeAllocation and postingsAccountAllocation\n determine how much space is allotted to the payee and account\n fields in the postings report. These fields are variable\n width. After space for most other fields is allotted, space is\n allotted for these two fields. The two fields divide the space\n proportionally depending on postingsPayeeAllocation and\n postingsAccountAllocation. For example, if\n postingsPayeeAllocation is 60 and postingsAccountAllocation is\n 40, then the payee field gets 60 percent of the leftover space\n and the account field gets 40 percent of the leftover space.\n\u003c/p\u003e\u003cp\u003eBoth postingsPayeeAllocation and postingsAccountAllocation\n must be positive integers; if either one is less than 1, your\n program will crash at runtime.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "postingsPayeeAllocation",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "postingsPayeeAllocation and postingsAccountAllocation determine how much space is allotted to the payee and account fields in the postings report These fields are variable width After space for most other fields is allotted space is allotted for these two fields The two fields divide the space proportionally depending on postingsPayeeAllocation and postingsAccountAllocation For example if postingsPayeeAllocation is and postingsAccountAllocation is then the payee field gets percent of the leftover space and the account field gets percent of the leftover space Both postingsPayeeAllocation and postingsAccountAllocation must be positive integers if either one is less than your program will crash at runtime",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "postingsPayeeAllocation",
          "package": "penny",
          "partial": "Payee Allocation",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:postingsPayeeAllocation"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eShow zero balances in the postings report? If True, show\n them; if False, hide them.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "postingsShowZeroBalances",
          "package": "penny",
          "signature": "Bool",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Show zero balances in the postings report If True show them if False hide them",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "postingsShowZeroBalances",
          "package": "penny",
          "partial": "Show Zero Balances",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:postingsShowZeroBalances"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDetermines the number of spaces that appears to the right of\n each named field; for example, sPayee indicates how many spaces\n will appear to the right of the payee field. Each field of the\n Spacers should be a non-negative integer (although currently\n the absolute value of the field is taken.)\n\u003c/p\u003e",
          "module": "Penny",
          "name": "postingsSpacers",
          "package": "penny",
          "signature": "Spacers Int",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Determines the number of spaces that appears to the right of each named field for example sPayee indicates how many spaces will appear to the right of the payee field Each field of the Spacers should be non-negative integer although currently the absolute value of the field is taken",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "postingsSpacers",
          "package": "penny",
          "partial": "Spacers",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:postingsSpacers"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAccount names in the postings report are shortened if\n necessary in order to help the report fit within the allotted\n width (see postingsWidth). Account names are only shortened as\n much as is necessary for them to fit; however, each sub-account\n name will not be shortened any more than the amount given here.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "postingsSubAccountLength",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Account names in the postings report are shortened if necessary in order to help the report fit within the allotted width see postingsWidth Account names are only shortened as much as is necessary for them to fit however each sub-account name will not be shortened any more than the amount given here",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "postingsSubAccountLength",
          "package": "penny",
          "partial": "Sub Account Length",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:postingsSubAccountLength"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe postings report is roughly this wide by\n default. Typically this will be as wide as your terminal.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "postingsWidth",
          "package": "penny",
          "signature": "Int",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "The postings report is roughly this wide by default Typically this will be as wide as your terminal",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "postingsWidth",
          "package": "penny",
          "partial": "Width",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:postingsWidth"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eProvides a function to use in the \u003ccode\u003e\u003ca\u003eformatQty\u003c/a\u003e\u003c/code\u003e field. This formats\n quantities that were not parsed in the ledger.  It first consults a\n list of all items that were parsed from the ledger.  It examines\n these items to determine if another item with the same commodity\n already exists in the ledger.\n\u003c/p\u003e\u003cp\u003eIf other items with the same commodity exist in the ledger, the\n radix point most frequently occurring amongst those items is\n used. If at least one of these items (with this radix point) also\n has grouped digits, then the quantity will be formatted with\n grouped digits; otherwise, no digit grouping is performed. If digit\n grouping is performed, it is done according to the following rules:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e only digits to the left of the radix point are grouped\n\u003c/li\u003e\u003cli\u003e grouping is performed only if the number has at least five\n digits. Therefore, 1234 is not grouped, but 1,234.5 is grouped, as\n is 12,345\n\u003c/li\u003e\u003cli\u003e the character most frequently appearing as a grouping character\n (for this particular commodity and radix point) is used to perform\n grouping\n\u003c/li\u003e\u003cli\u003e digits are grouped into groups of 3 digits\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf a radix point cannot be determined from the quantities for a\n given commodity, then the radix point appearing most frequently for\n all commodities is used.  If it's impossible to determine a radix\n point from all commodities, then the given default radix point and\n digit grouping (if desired) is used.\n\u003c/p\u003e\u003cp\u003eThis function builds a map internally which holds all the\n formatting information; it might be expensive to build, so the\n function is written to be partially applied.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "qtyFormatter",
          "package": "penny",
          "signature": "S3 Radix PeriodGrp CommaGrp-\u003e FormatQty",
          "type": "function"
        },
        "index": {
          "description": "Provides function to use in the formatQty field This formats quantities that were not parsed in the ledger It first consults list of all items that were parsed from the ledger It examines these items to determine if another item with the same commodity already exists in the ledger If other items with the same commodity exist in the ledger the radix point most frequently occurring amongst those items is used If at least one of these items with this radix point also has grouped digits then the quantity will be formatted with grouped digits otherwise no digit grouping is performed If digit grouping is performed it is done according to the following rules only digits to the left of the radix point are grouped grouping is performed only if the number has at least five digits Therefore is not grouped but is grouped as is the character most frequently appearing as grouping character for this particular commodity and radix point is used to perform grouping digits are grouped into groups of digits If radix point cannot be determined from the quantities for given commodity then the radix point appearing most frequently for all commodities is used If it impossible to determine radix point from all commodities then the given default radix point and digit grouping if desired is used This function builds map internally which holds all the formatting information it might be expensive to build so the function is written to be partially applied",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "qtyFormatter",
          "normalized": "S Radix PeriodGrp CommaGrp-\u003eFormatQty",
          "package": "penny",
          "partial": "Formatter",
          "signature": "S Radix PeriodGrp CommaGrp-\u003eFormatQty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:qtyFormatter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCreates an IO action that you can use for the main function.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "runPenny",
          "package": "penny",
          "signature": "Version-\u003e (Runtime -\u003e Defaults)-\u003e IO ()",
          "type": "function"
        },
        "index": {
          "description": "Creates an IO action that you can use for the main function",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "runPenny",
          "normalized": "Version-\u003e(Runtime-\u003eDefaults)-\u003eIO()",
          "package": "penny",
          "partial": "Penny",
          "signature": "Version-\u003e(Runtime-\u003eDefaults)-\u003eIO()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:runPenny"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sAccount",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sAccount",
          "package": "penny",
          "partial": "Account",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sAccount"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sDate",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sDate",
          "package": "penny",
          "partial": "Date",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sDate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sFilePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sFilePosting",
          "package": "penny",
          "partial": "File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sFileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sFileTransaction",
          "package": "penny",
          "partial": "File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sFiltered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sFiltered",
          "package": "penny",
          "partial": "Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sFlag",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sFlag",
          "package": "penny",
          "partial": "Flag",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sFlag"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sGlobalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sGlobalPosting",
          "package": "penny",
          "partial": "Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sGlobalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sGlobalTransaction",
          "package": "penny",
          "partial": "Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sLineNum",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sLineNum",
          "package": "penny",
          "partial": "Line Num",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sLineNum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sNumber",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sNumber",
          "package": "penny",
          "partial": "Number",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sNumber"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sPayee",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sPayee",
          "package": "penny",
          "partial": "Payee",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sPayee"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sPostingCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sPostingCmdty",
          "package": "penny",
          "partial": "Posting Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sPostingCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sPostingDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sPostingDrCr",
          "package": "penny",
          "partial": "Posting Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sPostingDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sPostingQty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sPostingQty",
          "package": "penny",
          "partial": "Posting Qty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sPostingQty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sRevFilePosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sRevFilePosting",
          "package": "penny",
          "partial": "Rev File Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sRevFilePosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sRevFileTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sRevFileTransaction",
          "package": "penny",
          "partial": "Rev File Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sRevFileTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sRevFiltered",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sRevFiltered",
          "package": "penny",
          "partial": "Rev Filtered",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sRevFiltered"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sRevGlobalPosting",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sRevGlobalPosting",
          "package": "penny",
          "partial": "Rev Global Posting",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sRevGlobalPosting"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sRevGlobalTransaction",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sRevGlobalTransaction",
          "package": "penny",
          "partial": "Rev Global Transaction",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sRevGlobalTransaction"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sRevSorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sRevSorted",
          "package": "penny",
          "partial": "Rev Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sRevSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sRevVisible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sRevVisible",
          "package": "penny",
          "partial": "Rev Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sRevVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sSorted",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sSorted",
          "package": "penny",
          "partial": "Sorted",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sSorted"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sTotalCmdty",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sTotalCmdty",
          "package": "penny",
          "partial": "Total Cmdty",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sTotalCmdty"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sTotalDrCr",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sTotalDrCr",
          "package": "penny",
          "partial": "Total Dr Cr",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sTotalDrCr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Penny",
          "name": "sVisible",
          "package": "penny",
          "signature": "a",
          "source": "src/Penny.html#Spacers",
          "type": "function"
        },
        "index": {
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sVisible",
          "package": "penny",
          "partial": "Visible",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sVisible"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePostings are sorted in this order by default. For example, if\n the first pair is (Date, Ascending), then postings are first\n sorted by date in ascending order. If the second pair is\n (Payee, Ascending), then postings with the same date are then\n sorted by payee.\n\u003c/p\u003e\u003cp\u003eIf this list is empty, then by default postings are left in the\n same order as they appear in the ledger files.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "sorter",
          "package": "penny",
          "signature": "[(SortField, SortOrder)]",
          "source": "src/Penny.html#Defaults",
          "type": "function"
        },
        "index": {
          "description": "Postings are sorted in this order by default For example if the first pair is Date Ascending then postings are first sorted by date in ascending order If the second pair is Payee Ascending then postings with the same date are then sorted by payee If this list is empty then by default postings are left in the same order as they appear in the ledger files",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "sorter",
          "normalized": "[(SortField,SortOrder)]",
          "package": "penny",
          "signature": "[(SortField,SortOrder)]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:sorter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe numeric branch for this version.  This reflects the\n fact that most software versions are tree-structured; there\n is a main trunk which is tagged with versions at various\n points (1,2,3...), and the first branch off the trunk after\n version 3 is 3.1, the second branch off the trunk after\n version 3 is 3.2, and so on.  The tree can be branched\n arbitrarily, just by adding more digits.\n\u003c/p\u003e\u003cp\u003eWe represent the branch as a list of \u003ccode\u003e\u003ca\u003eInt\u003c/a\u003e\u003c/code\u003e, so\n version 3.2.1 becomes [3,2,1].  Lexicographic ordering\n (i.e. the default instance of \u003ccode\u003e\u003ca\u003eOrd\u003c/a\u003e\u003c/code\u003e for \u003ccode\u003e[Int]\u003c/code\u003e) gives\n the natural ordering of branches.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "versionBranch",
          "package": "penny",
          "signature": "[Int]",
          "type": "function"
        },
        "index": {
          "description": "The numeric branch for this version This reflects the fact that most software versions are tree-structured there is main trunk which is tagged with versions at various points and the first branch off the trunk after version is the second branch off the trunk after version is and so on The tree can be branched arbitrarily just by adding more digits We represent the branch as list of Int so version becomes Lexicographic ordering i.e the default instance of Ord for Int gives the natural ordering of branches",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "versionBranch",
          "normalized": "[Int]",
          "package": "penny",
          "partial": "Branch",
          "signature": "[Int]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:versionBranch"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA version can be tagged with an arbitrary list of strings.\n The interpretation of the list of tags is entirely dependent\n on the entity that this version applies to.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "versionTags",
          "package": "penny",
          "signature": "[String]",
          "type": "function"
        },
        "index": {
          "description": "version can be tagged with an arbitrary list of strings The interpretation of the list of tags is entirely dependent on the entity that this version applies to",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "versionTags",
          "normalized": "[String]",
          "package": "penny",
          "partial": "Tags",
          "signature": "[String]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:versionTags"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGets the current screen width from the runtime. If the COLUMNS\n environment variable is not set, uses 80.\n\u003c/p\u003e",
          "module": "Penny",
          "name": "widthFromRuntime",
          "package": "penny",
          "signature": "Runtime -\u003e Int",
          "source": "src/Penny.html#widthFromRuntime",
          "type": "function"
        },
        "index": {
          "description": "Gets the current screen width from the runtime If the COLUMNS environment variable is not set uses",
          "hierarchy": "Penny",
          "module": "Penny",
          "name": "widthFromRuntime",
          "normalized": "Runtime-\u003eInt",
          "package": "penny",
          "partial": "From Runtime",
          "signature": "Runtime-\u003eInt",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/penny/docs/Penny.html#v:widthFromRuntime"
      }
    }
  ]
]