[
  {
    "cmd": "delete-by-query",
    "query": {
      "contexts": [
        "package"
      ],
      "query": {
        "op": "case",
        "type": "word",
        "word": "polyparse"
      },
      "type": "context"
    }
  },
  [
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse.ByteString",
          "name": "ByteString",
          "package": "polyparse",
          "source": "src/Text-Parse-ByteString.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "ByteString",
          "package": "polyparse",
          "partial": "Byte String",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe class \u003ccode\u003eParse\u003c/code\u003e is a replacement for \u003ccode\u003eRead\u003c/code\u003e, operating over String input.\n   Essentially, it permits better error messages for why something failed to\n   parse.  It is rather important that \u003ccode\u003eparse\u003c/code\u003e can read back exactly what\n   is generated by the corresponding instance of \u003ccode\u003eshow\u003c/code\u003e.  To apply a parser\n   to some text, use \u003ccode\u003erunParser\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "Parse",
          "package": "polyparse",
          "source": "src/Text-Parse-ByteString.html#Parse",
          "type": "class"
        },
        "index": {
          "description": "The class Parse is replacement for Read operating over String input Essentially it permits better error messages for why something failed to parse It is rather important that parse can read back exactly what is generated by the corresponding instance of show To apply parser to some text use runParser",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "Parse",
          "package": "polyparse",
          "partial": "Parse",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#t:Parse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA synonym for a ByteString Parser, i.e. bytestring input (no state)\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "TextParser",
          "package": "polyparse",
          "source": "src/Text-Parse-ByteString.html#TextParser",
          "type": "type"
        },
        "index": {
          "description": "synonym for ByteString Parser i.e bytestring input no state",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "TextParser",
          "package": "polyparse",
          "partial": "Text Parser",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#t:TextParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the remaining input ByteString.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "allAsByteString",
          "package": "polyparse",
          "signature": "TextParser ByteString",
          "source": "src/Text-Parse-ByteString.html#allAsByteString",
          "type": "function"
        },
        "index": {
          "description": "Simply return the remaining input ByteString",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "allAsByteString",
          "package": "polyparse",
          "partial": "As Byte String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:allAsByteString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the remaining input as a String.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "allAsString",
          "package": "polyparse",
          "signature": "TextParser String",
          "source": "src/Text-Parse-ByteString.html#allAsString",
          "type": "function"
        },
        "index": {
          "description": "Simply return the remaining input as String",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "allAsString",
          "package": "polyparse",
          "partial": "As String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:allAsString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse one of a bunch of alternative constructors.  In the list argument,\n   the first element of the pair is the constructor name, and\n   the second is the parser for the rest of the value.  The first matching\n   parse is returned.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "constructors",
          "package": "polyparse",
          "signature": "[(String, TextParser a)] -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#constructors",
          "type": "function"
        },
        "index": {
          "description": "Parse one of bunch of alternative constructors In the list argument the first element of the pair is the constructor name and the second is the parser for the rest of the value The first matching parse is returned",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "constructors",
          "normalized": "[(String,TextParser a)]-\u003eTextParser a",
          "package": "polyparse",
          "signature": "[(String,TextParser a)]-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:constructors"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse one of the given nullary constructors (an enumeration).\n   The string argument is the name of the type, and the list argument\n   should contain all of the possible enumeration values.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "enumeration",
          "package": "polyparse",
          "signature": "String -\u003e [a] -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#enumeration",
          "type": "function"
        },
        "index": {
          "description": "Parse one of the given nullary constructors an enumeration The string argument is the name of the type and the list argument should contain all of the possible enumeration values",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "enumeration",
          "normalized": "String-\u003e[a]-\u003eTextParser a",
          "package": "polyparse",
          "signature": "String-\u003e[a]-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:enumeration"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeal with named field syntax.  The string argument is the field name,\n   and the parser returns the value of the field.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "field",
          "package": "polyparse",
          "signature": "String -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#field",
          "type": "function"
        },
        "index": {
          "description": "Deal with named field syntax The string argument is the field name and the parser returns the value of the field",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "field",
          "normalized": "String-\u003eTextParser a",
          "package": "polyparse",
          "signature": "String-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:field"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEnsure that the next input word is the given string.  (Note the input\n   is lexed as haskell, so wordbreaks at spaces, symbols, etc.)\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "isWord",
          "package": "polyparse",
          "signature": "String -\u003e TextParser String",
          "source": "src/Text-Parse-ByteString.html#isWord",
          "type": "function"
        },
        "index": {
          "description": "Ensure that the next input word is the given string Note the input is lexed as haskell so wordbreaks at spaces symbols etc",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "isWord",
          "normalized": "String-\u003eTextParser String",
          "package": "polyparse",
          "partial": "Word",
          "signature": "String-\u003eTextParser String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:isWord"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAllow optional nested string parens around an item.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "optionalParens",
          "package": "polyparse",
          "signature": "TextParser a -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#optionalParens",
          "type": "function"
        },
        "index": {
          "description": "Allow optional nested string parens around an item",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "optionalParens",
          "normalized": "TextParser a-\u003eTextParser a",
          "package": "polyparse",
          "partial": "Parens",
          "signature": "TextParser a-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:optionalParens"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAllow nested parens around an item (one set required when Bool is True).\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parens",
          "package": "polyparse",
          "signature": "Bool -\u003e TextParser a -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#parens",
          "type": "function"
        },
        "index": {
          "description": "Allow nested parens around an item one set required when Bool is True",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parens",
          "normalized": "Bool-\u003eTextParser a-\u003eTextParser a",
          "package": "polyparse",
          "signature": "Bool-\u003eTextParser a-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parens"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA straightforward parser for an item.  (A minimal definition of\n   a class instance requires either |parse| or |parsePrec|.  In general,\n   for a type that never needs parens, you should define |parse|, but\n   for a type that _may_ need parens, you should define |parsePrec|.)\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parse",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse-ByteString.html#parse",
          "type": "method"
        },
        "index": {
          "description": "straightforward parser for an item minimal definition of class instance requires either parse or parsePrec In general for type that never needs parens you should define parse but for type that may need parens you should define parsePrec",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parse",
          "package": "polyparse",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf there already exists a Read instance for a type, then we can make\n   a Parser for it, but with only poor error-reporting.  The string argument\n   is the expected type or value (for error-reporting only).  Use of this\n   wrapper function is NOT recommended with ByteString, because there\n   is a lot of inefficiency in repeated conversions to/from String.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseByRead",
          "package": "polyparse",
          "signature": "String -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#parseByRead",
          "type": "function"
        },
        "index": {
          "description": "If there already exists Read instance for type then we can make Parser for it but with only poor error-reporting The string argument is the expected type or value for error-reporting only Use of this wrapper function is NOT recommended with ByteString because there is lot of inefficiency in repeated conversions to from String",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseByRead",
          "normalized": "String-\u003eTextParser a",
          "package": "polyparse",
          "partial": "By Read",
          "signature": "String-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseByRead"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a decimal, octal, or hexadecimal (unsigned) Integral numeric literal.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseDec",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse-ByteString.html#parseDec",
          "type": "function"
        },
        "index": {
          "description": "Parse decimal octal or hexadecimal unsigned Integral numeric literal",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseDec",
          "package": "polyparse",
          "partial": "Dec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseDec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse any (unsigned) Floating numeric literal, e.g. Float or Double.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseFloat",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse-ByteString.html#parseFloat",
          "type": "function"
        },
        "index": {
          "description": "Parse any unsigned Floating numeric literal e.g Float or Double",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseFloat",
          "package": "polyparse",
          "partial": "Float",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseFloat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a decimal, octal, or hexadecimal (unsigned) Integral numeric literal.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseHex",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse-ByteString.html#parseHex",
          "type": "function"
        },
        "index": {
          "description": "Parse decimal octal or hexadecimal unsigned Integral numeric literal",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseHex",
          "package": "polyparse",
          "partial": "Hex",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseHex"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse any (unsigned) Integral numeric literal.\n   Needs a base, radix, isDigit predicate,\n   and digitToInt converter, appropriate to the result type.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseInt",
          "package": "polyparse",
          "signature": "String -\u003e a -\u003e (Char -\u003e Bool) -\u003e (Char -\u003e Int) -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#parseInt",
          "type": "function"
        },
        "index": {
          "description": "Parse any unsigned Integral numeric literal Needs base radix isDigit predicate and digitToInt converter appropriate to the result type",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseInt",
          "normalized": "String-\u003ea-\u003e(Char-\u003eBool)-\u003e(Char-\u003eInt)-\u003eTextParser a",
          "package": "polyparse",
          "partial": "Int",
          "signature": "String-\u003ea-\u003e(Char-\u003eBool)-\u003e(Char-\u003eInt)-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseInt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParsing a list of items by default accepts the [] and comma syntax,\n   except when the list is really a character string using \"\".\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseList",
          "package": "polyparse",
          "signature": "TextParser [a]",
          "source": "src/Text-Parse-ByteString.html#parseList",
          "type": "method"
        },
        "index": {
          "description": "Parsing list of items by default accepts the and comma syntax except when the list is really character string using",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseList",
          "normalized": "TextParser[a]",
          "package": "polyparse",
          "partial": "List",
          "signature": "TextParser[a]",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a Haskell character literal.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseLitChar",
          "package": "polyparse",
          "signature": "TextParser Char",
          "source": "src/Text-Parse-ByteString.html#parseLitChar",
          "type": "function"
        },
        "index": {
          "description": "Parse Haskell character literal",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseLitChar",
          "package": "polyparse",
          "partial": "Lit Char",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseLitChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a decimal, octal, or hexadecimal (unsigned) Integral numeric literal.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseOct",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse-ByteString.html#parseOct",
          "type": "function"
        },
        "index": {
          "description": "Parse decimal octal or hexadecimal unsigned Integral numeric literal",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseOct",
          "package": "polyparse",
          "partial": "Oct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseOct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA straightforward parser for an item, given the precedence of\n   any surrounding expression.  (Precedence determines whether\n   parentheses are mandatory or optional.)\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parsePrec",
          "package": "polyparse",
          "signature": "Int -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#parsePrec",
          "type": "method"
        },
        "index": {
          "description": "straightforward parser for an item given the precedence of any surrounding expression Precedence determines whether parentheses are mandatory or optional",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parsePrec",
          "normalized": "Int-\u003eTextParser a",
          "package": "polyparse",
          "partial": "Prec",
          "signature": "Int-\u003eTextParser a",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parsePrec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFor any numeric parser, permit a negation sign in front of it.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseSigned",
          "package": "polyparse",
          "signature": "TextParser a -\u003e TextParser a",
          "source": "src/Text-Parse-ByteString.html#parseSigned",
          "type": "function"
        },
        "index": {
          "description": "For any numeric parser permit negation sign in front of it",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseSigned",
          "normalized": "TextParser a-\u003eTextParser a",
          "package": "polyparse",
          "partial": "Signed",
          "signature": "TextParser a-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseSigned"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eparseUnsignedInteger uses the underlying ByteString readInteger, so\n   will be a lot faster than the generic character-by-character parseInt.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "parseUnsignedInteger",
          "package": "polyparse",
          "signature": "TextParser Integer",
          "source": "src/Text-Parse-ByteString.html#parseUnsignedInteger",
          "type": "function"
        },
        "index": {
          "description": "parseUnsignedInteger uses the underlying ByteString readInteger so will be lot faster than the generic character-by-character parseInt",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "parseUnsignedInteger",
          "package": "polyparse",
          "partial": "Unsigned Integer",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:parseUnsignedInteger"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf you have a TextParser for a type, you can easily make it into\n   a Read instance, by throwing away any error messages.  Use of this\n   wrapper function is NOT recommended with ByteString, because there\n   is a lot of inefficiency in conversions to/from String.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "readByParse",
          "package": "polyparse",
          "signature": "TextParser a -\u003e ReadS a",
          "source": "src/Text-Parse-ByteString.html#readByParse",
          "type": "function"
        },
        "index": {
          "description": "If you have TextParser for type you can easily make it into Read instance by throwing away any error messages Use of this wrapper function is NOT recommended with ByteString because there is lot of inefficiency in conversions to from String",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "readByParse",
          "normalized": "TextParser a-\u003eReadS a",
          "package": "polyparse",
          "partial": "By Parse",
          "signature": "TextParser a-\u003eReadS a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:readByParse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf you have a TextParser for a type, you can easily make it into\n   a Read instance, by throwing away any error messages.  Use of this\n   wrapper function is NOT recommended with ByteString, because there\n   is a lot of inefficiency in conversions to/from String.\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "readsPrecByParsePrec",
          "package": "polyparse",
          "signature": "(Int -\u003e TextParser a) -\u003e Int -\u003e ReadS a",
          "source": "src/Text-Parse-ByteString.html#readsPrecByParsePrec",
          "type": "function"
        },
        "index": {
          "description": "If you have TextParser for type you can easily make it into Read instance by throwing away any error messages Use of this wrapper function is NOT recommended with ByteString because there is lot of inefficiency in conversions to from String",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "readsPrecByParsePrec",
          "normalized": "(Int-\u003eTextParser a)-\u003eInt-\u003eReadS a",
          "package": "polyparse",
          "partial": "Prec By Parse Prec",
          "signature": "(Int-\u003eTextParser a)-\u003eInt-\u003eReadS a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:readsPrecByParsePrec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOne lexical chunk (Haskell-style lexing).\n\u003c/p\u003e",
          "module": "Text.Parse.ByteString",
          "name": "word",
          "package": "polyparse",
          "signature": "TextParser String",
          "source": "src/Text-Parse-ByteString.html#word",
          "type": "function"
        },
        "index": {
          "description": "One lexical chunk Haskell-style lexing",
          "hierarchy": "Text Parse ByteString",
          "module": "Text.Parse.ByteString",
          "name": "word",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse-ByteString.html#v:word"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse",
          "name": "Parse",
          "package": "polyparse",
          "source": "src/Text-Parse.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "Parse",
          "package": "polyparse",
          "partial": "Parse",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe class \u003ccode\u003eParse\u003c/code\u003e is a replacement for \u003ccode\u003eRead\u003c/code\u003e, operating over String input.\n   Essentially, it permits better error messages for why something failed to\n   parse.  It is rather important that \u003ccode\u003eparse\u003c/code\u003e can read back exactly what\n   is generated by the corresponding instance of \u003ccode\u003eshow\u003c/code\u003e.  To apply a parser\n   to some text, use \u003ccode\u003erunParser\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "Parse",
          "package": "polyparse",
          "source": "src/Text-Parse.html#Parse",
          "type": "class"
        },
        "index": {
          "description": "The class Parse is replacement for Read operating over String input Essentially it permits better error messages for why something failed to parse It is rather important that parse can read back exactly what is generated by the corresponding instance of show To apply parser to some text use runParser",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "Parse",
          "package": "polyparse",
          "partial": "Parse",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#t:Parse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA synonym for Parser Char, i.e. string input (no state)\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "TextParser",
          "package": "polyparse",
          "source": "src/Text-Parse.html#TextParser",
          "type": "type"
        },
        "index": {
          "description": "synonym for Parser Char i.e string input no state",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "TextParser",
          "package": "polyparse",
          "partial": "Text Parser",
          "type": "type"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#t:TextParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the entire remaining input String.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "allAsString",
          "package": "polyparse",
          "signature": "TextParser String",
          "source": "src/Text-Parse.html#allAsString",
          "type": "function"
        },
        "index": {
          "description": "Simply return the entire remaining input String",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "allAsString",
          "package": "polyparse",
          "partial": "As String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:allAsString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse one of a bunch of alternative constructors.  In the list argument,\n   the first element of the pair is the constructor name, and\n   the second is the parser for the rest of the value.  The first matching\n   parse is returned.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "constructors",
          "package": "polyparse",
          "signature": "[(String, TextParser a)] -\u003e TextParser a",
          "source": "src/Text-Parse.html#constructors",
          "type": "function"
        },
        "index": {
          "description": "Parse one of bunch of alternative constructors In the list argument the first element of the pair is the constructor name and the second is the parser for the rest of the value The first matching parse is returned",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "constructors",
          "normalized": "[(String,TextParser a)]-\u003eTextParser a",
          "package": "polyparse",
          "signature": "[(String,TextParser a)]-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:constructors"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse one of the given nullary constructors (an enumeration).\n   The string argument is the name of the type, and the list argument\n   should contain all of the possible enumeration values.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "enumeration",
          "package": "polyparse",
          "signature": "String -\u003e [a] -\u003e TextParser a",
          "source": "src/Text-Parse.html#enumeration",
          "type": "function"
        },
        "index": {
          "description": "Parse one of the given nullary constructors an enumeration The string argument is the name of the type and the list argument should contain all of the possible enumeration values",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "enumeration",
          "normalized": "String-\u003e[a]-\u003eTextParser a",
          "package": "polyparse",
          "signature": "String-\u003e[a]-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:enumeration"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeal with named field syntax.  The string argument is the field name,\n   and the parser returns the value of the field.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "field",
          "package": "polyparse",
          "signature": "String -\u003e TextParser a",
          "source": "src/Text-Parse.html#field",
          "type": "function"
        },
        "index": {
          "description": "Deal with named field syntax The string argument is the field name and the parser returns the value of the field",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "field",
          "normalized": "String-\u003eTextParser a",
          "package": "polyparse",
          "signature": "String-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:field"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eEnsure that the next input word is the given string.  (Note the input\n   is lexed as haskell, so wordbreaks at spaces, symbols, etc.)\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "isWord",
          "package": "polyparse",
          "signature": "String -\u003e TextParser String",
          "source": "src/Text-Parse.html#isWord",
          "type": "function"
        },
        "index": {
          "description": "Ensure that the next input word is the given string Note the input is lexed as haskell so wordbreaks at spaces symbols etc",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "isWord",
          "normalized": "String-\u003eTextParser String",
          "package": "polyparse",
          "partial": "Word",
          "signature": "String-\u003eTextParser String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:isWord"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAllow nested parens around an item.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "optionalParens",
          "package": "polyparse",
          "signature": "TextParser a -\u003e TextParser a",
          "source": "src/Text-Parse.html#optionalParens",
          "type": "function"
        },
        "index": {
          "description": "Allow nested parens around an item",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "optionalParens",
          "normalized": "TextParser a-\u003eTextParser a",
          "package": "polyparse",
          "partial": "Parens",
          "signature": "TextParser a-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:optionalParens"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAllow nested parens around an item (one set required when Bool is True).\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "parens",
          "package": "polyparse",
          "signature": "Bool -\u003e TextParser a -\u003e TextParser a",
          "source": "src/Text-Parse.html#parens",
          "type": "function"
        },
        "index": {
          "description": "Allow nested parens around an item one set required when Bool is True",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parens",
          "normalized": "Bool-\u003eTextParser a-\u003eTextParser a",
          "package": "polyparse",
          "signature": "Bool-\u003eTextParser a-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parens"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA straightforward parser for an item.  (A minimal definition of\n   a class instance requires either |parse| or |parsePrec|.)\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "parse",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse.html#parse",
          "type": "method"
        },
        "index": {
          "description": "straightforward parser for an item minimal definition of class instance requires either parse or parsePrec",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parse",
          "package": "polyparse",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf there already exists a Read instance for a type, then we can make\n   a Parser for it, but with only poor error-reporting.  The string argument\n   is the expected type or value (for error-reporting only).\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "parseByRead",
          "package": "polyparse",
          "signature": "String -\u003e TextParser a",
          "source": "src/Text-Parse.html#parseByRead",
          "type": "function"
        },
        "index": {
          "description": "If there already exists Read instance for type then we can make Parser for it but with only poor error-reporting The string argument is the expected type or value for error-reporting only",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseByRead",
          "normalized": "String-\u003eTextParser a",
          "package": "polyparse",
          "partial": "By Read",
          "signature": "String-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseByRead"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse",
          "name": "parseDec",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse.html#parseDec",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseDec",
          "package": "polyparse",
          "partial": "Dec",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseDec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse",
          "name": "parseFloat",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse.html#parseFloat",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseFloat",
          "package": "polyparse",
          "partial": "Float",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseFloat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse",
          "name": "parseHex",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse.html#parseHex",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseHex",
          "package": "polyparse",
          "partial": "Hex",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseHex"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse",
          "name": "parseInt",
          "package": "polyparse",
          "signature": "String -\u003e a -\u003e (Char -\u003e Bool) -\u003e (Char -\u003e Int) -\u003e TextParser a",
          "source": "src/Text-Parse.html#parseInt",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseInt",
          "normalized": "String-\u003ea-\u003e(Char-\u003eBool)-\u003e(Char-\u003eInt)-\u003eTextParser a",
          "package": "polyparse",
          "partial": "Int",
          "signature": "String-\u003ea-\u003e(Char-\u003eBool)-\u003e(Char-\u003eInt)-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseInt"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParsing a list of items by default accepts the [] and comma syntax,\n   except when the list is really a character string using \"\".\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "parseList",
          "package": "polyparse",
          "signature": "TextParser [a]",
          "source": "src/Text-Parse.html#parseList",
          "type": "method"
        },
        "index": {
          "description": "Parsing list of items by default accepts the and comma syntax except when the list is really character string using",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseList",
          "normalized": "TextParser[a]",
          "package": "polyparse",
          "partial": "List",
          "signature": "TextParser[a]",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseList"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse",
          "name": "parseLitChar",
          "package": "polyparse",
          "signature": "TextParser Char",
          "source": "src/Text-Parse.html#parseLitChar",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseLitChar",
          "package": "polyparse",
          "partial": "Lit Char",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseLitChar"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse",
          "name": "parseOct",
          "package": "polyparse",
          "signature": "TextParser a",
          "source": "src/Text-Parse.html#parseOct",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseOct",
          "package": "polyparse",
          "partial": "Oct",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseOct"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA straightforward parser for an item, given the precedence of\n   any surrounding expression.  (Precedence determines whether\n   parentheses are mandatory or optional.)\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "parsePrec",
          "package": "polyparse",
          "signature": "Int -\u003e TextParser a",
          "source": "src/Text-Parse.html#parsePrec",
          "type": "method"
        },
        "index": {
          "description": "straightforward parser for an item given the precedence of any surrounding expression Precedence determines whether parentheses are mandatory or optional",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parsePrec",
          "normalized": "Int-\u003eTextParser a",
          "package": "polyparse",
          "partial": "Prec",
          "signature": "Int-\u003eTextParser a",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parsePrec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.Parse",
          "name": "parseSigned",
          "package": "polyparse",
          "signature": "TextParser a -\u003e TextParser a",
          "source": "src/Text-Parse.html#parseSigned",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "parseSigned",
          "normalized": "TextParser a-\u003eTextParser a",
          "package": "polyparse",
          "partial": "Signed",
          "signature": "TextParser a-\u003eTextParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:parseSigned"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf you have a TextParser for a type, you can easily make it into\n   a Read instance, by throwing away any error messages.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "readByParse",
          "package": "polyparse",
          "signature": "TextParser a -\u003e ReadS a",
          "source": "src/Text-Parse.html#readByParse",
          "type": "function"
        },
        "index": {
          "description": "If you have TextParser for type you can easily make it into Read instance by throwing away any error messages",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "readByParse",
          "normalized": "TextParser a-\u003eReadS a",
          "package": "polyparse",
          "partial": "By Parse",
          "signature": "TextParser a-\u003eReadS a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:readByParse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf you have a TextParser for a type, you can easily make it into\n   a Read instance, by throwing away any error messages.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "readsPrecByParsePrec",
          "package": "polyparse",
          "signature": "(Int -\u003e TextParser a) -\u003e Int -\u003e ReadS a",
          "source": "src/Text-Parse.html#readsPrecByParsePrec",
          "type": "function"
        },
        "index": {
          "description": "If you have TextParser for type you can easily make it into Read instance by throwing away any error messages",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "readsPrecByParsePrec",
          "normalized": "(Int-\u003eTextParser a)-\u003eInt-\u003eReadS a",
          "package": "polyparse",
          "partial": "Prec By Parse Prec",
          "signature": "(Int-\u003eTextParser a)-\u003eInt-\u003eReadS a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:readsPrecByParsePrec"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eOne lexical chunk.  This is Haskell'98-style lexing - the result\n   should match Prelude.lex apart from better error-reporting.\n\u003c/p\u003e",
          "module": "Text.Parse",
          "name": "word",
          "package": "polyparse",
          "signature": "TextParser String",
          "source": "src/Text-Parse.html#word",
          "type": "function"
        },
        "index": {
          "description": "One lexical chunk This is Haskell style lexing the result should match Prelude.lex apart from better error-reporting",
          "hierarchy": "Text Parse",
          "module": "Text.Parse",
          "name": "word",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-Parse.html#v:word"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThis Haskell script defines a library of parser combinators, and is\n taken from sections 1-6 of our article \u003ca\u003eMonadic Parser Combinators\u003c/a\u003e.\n Some changes to the library have been made in the move from Gofer\n to Haskell:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e Do notation is used in place of monad comprehension notation;\n\u003c/li\u003e\u003cli\u003e The parser datatype is defined using \u003ca\u003enewtype\u003c/a\u003e, to avoid the overhead\n      of tagging and untagging parsers with the P constructor.\n\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "HuttonMeijer",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html",
          "type": "module"
        },
        "index": {
          "description": "This Haskell script defines library of parser combinators and is taken from sections of our article Monadic Parser Combinators Some changes to the library have been made in the move from Gofer to Haskell Do notation is used in place of monad comprehension notation The parser datatype is defined using newtype to avoid the overhead of tagging and untagging parsers with the constructor",
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "HuttonMeijer",
          "package": "polyparse",
          "partial": "Hutton Meijer",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe parser monad\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "The parser monad",
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "(+++)",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#%2B%2B%2B",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "(+++) +++",
          "normalized": "Parser a-\u003eParser a-\u003eParser a",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser a-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:-43--43--43-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "P",
          "package": "polyparse",
          "signature": "P ([Token] -\u003e [(a, [Token])])",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#Parser",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "P",
          "normalized": "P([Token]-\u003e[(a,[Token])])",
          "package": "polyparse",
          "signature": "P([Token]-\u003e[(a,[Token])])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "alphanum",
          "package": "polyparse",
          "signature": "Parser Char",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#alphanum",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "alphanum",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:alphanum"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "bracket",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser b -\u003e Parser c -\u003e Parser b",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#bracket",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "bracket",
          "normalized": "Parser a-\u003eParser b-\u003eParser c-\u003eParser b",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser b-\u003eParser c-\u003eParser b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:bracket"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "chainl",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#chainl",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "chainl",
          "normalized": "Parser a-\u003eParser(a-\u003ea-\u003ea)-\u003ea-\u003eParser a",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser(a-\u003ea-\u003ea)-\u003ea-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:chainl"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "chainl1",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e Parser a",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#chainl1",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "chainl1",
          "normalized": "Parser a-\u003eParser(a-\u003ea-\u003ea)-\u003eParser a",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser(a-\u003ea-\u003ea)-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:chainl1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "chainr",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#chainr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "chainr",
          "normalized": "Parser a-\u003eParser(a-\u003ea-\u003ea)-\u003ea-\u003eParser a",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser(a-\u003ea-\u003ea)-\u003ea-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:chainr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "chainr1",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser (a -\u003e a -\u003e a) -\u003e Parser a",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#chainr1",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "chainr1",
          "normalized": "Parser a-\u003eParser(a-\u003ea-\u003ea)-\u003eParser a",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser(a-\u003ea-\u003ea)-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:chainr1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "char",
          "package": "polyparse",
          "signature": "Char -\u003e Parser Char",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#char",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "char",
          "normalized": "Char-\u003eParser Char",
          "package": "polyparse",
          "signature": "Char-\u003eParser Char",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:char"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "comment",
          "package": "polyparse",
          "signature": "Parser ()",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#comment",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "comment",
          "normalized": "Parser()",
          "package": "polyparse",
          "signature": "Parser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:comment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "digit",
          "package": "polyparse",
          "signature": "Parser Char",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#digit",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "digit",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:digit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "first",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#first",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "first",
          "normalized": "Parser a-\u003eParser a",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:first"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "ident",
          "package": "polyparse",
          "signature": "Parser String",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#ident",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "ident",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:ident"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "identifier",
          "package": "polyparse",
          "signature": "[String] -\u003e Parser String",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#identifier",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "identifier",
          "normalized": "[String]-\u003eParser String",
          "package": "polyparse",
          "signature": "[String]-\u003eParser String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:identifier"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "int",
          "package": "polyparse",
          "signature": "Parser Int",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#int",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "int",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:int"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "integer",
          "package": "polyparse",
          "signature": "Parser Int",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#integer",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "integer",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:integer"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "item",
          "package": "polyparse",
          "signature": "Parser Token",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#item",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "item",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:item"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "junk",
          "package": "polyparse",
          "signature": "Parser ()",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#junk",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "junk",
          "normalized": "Parser()",
          "package": "polyparse",
          "signature": "Parser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:junk"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "letter",
          "package": "polyparse",
          "signature": "Parser Char",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#letter",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "letter",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:letter"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "lower",
          "package": "polyparse",
          "signature": "Parser Char",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#lower",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "lower",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:lower"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "many",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser [a]",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#many",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "many",
          "normalized": "Parser a-\u003eParser[a]",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:many"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "many1",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser [a]",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#many1",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "many1",
          "normalized": "Parser a-\u003eParser[a]",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:many1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "nat",
          "package": "polyparse",
          "signature": "Parser Int",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#nat",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "nat",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:nat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "natural",
          "package": "polyparse",
          "signature": "Parser Int",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#natural",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "natural",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:natural"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "ops",
          "package": "polyparse",
          "signature": "[(Parser a, b)] -\u003e Parser b",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#ops",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "ops",
          "normalized": "[(Parser a,b)]-\u003eParser b",
          "package": "polyparse",
          "signature": "[(Parser a,b)]-\u003eParser b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:ops"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "papply",
          "package": "polyparse",
          "signature": "Parser a -\u003e [Token] -\u003e [(a, [Token])]",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#papply",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "papply",
          "normalized": "Parser a-\u003e[Token]-\u003e[(a,[Token])]",
          "package": "polyparse",
          "signature": "Parser a-\u003e[Token]-\u003e[(a,[Token])]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:papply"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "sat",
          "package": "polyparse",
          "signature": "(Token -\u003e Bool) -\u003e Parser Token",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#sat",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "sat",
          "normalized": "(Token-\u003eBool)-\u003eParser Token",
          "package": "polyparse",
          "signature": "(Token-\u003eBool)-\u003eParser Token",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:sat"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "sepby",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser b -\u003e Parser [a]",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#sepby",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "sepby",
          "normalized": "Parser a-\u003eParser b-\u003eParser[a]",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser b-\u003eParser[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:sepby"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "sepby1",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser b -\u003e Parser [a]",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#sepby1",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "sepby1",
          "normalized": "Parser a-\u003eParser b-\u003eParser[a]",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser b-\u003eParser[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:sepby1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "skip",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#skip",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "skip",
          "normalized": "Parser a-\u003eParser a",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:skip"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "spaces",
          "package": "polyparse",
          "signature": "Parser ()",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#spaces",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "spaces",
          "normalized": "Parser()",
          "package": "polyparse",
          "signature": "Parser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:spaces"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "string",
          "package": "polyparse",
          "signature": "String -\u003e Parser String",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#string",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "string",
          "normalized": "String-\u003eParser String",
          "package": "polyparse",
          "signature": "String-\u003eParser String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:string"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "symbol",
          "package": "polyparse",
          "signature": "String -\u003e Parser String",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#symbol",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "symbol",
          "normalized": "String-\u003eParser String",
          "package": "polyparse",
          "signature": "String-\u003eParser String",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:symbol"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "token",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#token",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "token",
          "normalized": "Parser a-\u003eParser a",
          "package": "polyparse",
          "signature": "Parser a-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:token"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "upper",
          "package": "polyparse",
          "signature": "Parser Char",
          "source": "src/Text-ParserCombinators-HuttonMeijer.html#upper",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijer",
          "module": "Text.ParserCombinators.HuttonMeijer",
          "name": "upper",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijer.html#v:upper"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThis library of monadic parser combinators is based on the ones\n   defined by Graham Hutton and Erik Meijer.  It has been extended by\n   Malcolm Wallace to use an abstract token type (no longer just a\n   string) as input, and to incorporate state in the monad, useful\n   for symbol tables, macros, and so on.  Basic facilities for error\n   reporting have also been added, and later extended by Graham Klyne\n   to return the errors through an \u003ccode\u003eEither\u003c/code\u003e type, rather than just\n   calling \u003ccode\u003eerror\u003c/code\u003e.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "HuttonMeijerWallace",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html",
          "type": "module"
        },
        "index": {
          "description": "This library of monadic parser combinators is based on the ones defined by Graham Hutton and Erik Meijer It has been extended by Malcolm Wallace to use an abstract token type no longer just string as input and to incorporate state in the monad useful for symbol tables macros and so on Basic facilities for error reporting have also been added and later extended by Graham Klyne to return the errors through an Either type rather than just calling error",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "HuttonMeijerWallace",
          "package": "polyparse",
          "partial": "Hutton Meijer Wallace",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#Parser",
          "type": "newtype"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA choice between parsers.  Keep only the first success.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "(+++)",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e a -\u003e Parser s t e a",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#%2B%2B%2B",
          "type": "function"
        },
        "index": {
          "description": "choice between parsers Keep only the first success",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "(+++) +++",
          "normalized": "Parser a b c d-\u003eParser a b c d-\u003eParser a b c d",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e a-\u003eParser s t e a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:-43--43--43-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe parser type is parametrised on the types of the state \u003ccode\u003es\u003c/code\u003e,\n   the input tokens \u003ccode\u003et\u003c/code\u003e, error-type \u003ccode\u003ee\u003c/code\u003e, and the result value \u003ccode\u003ea\u003c/code\u003e.\n   The state and remaining input are threaded through the monad.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "P",
          "package": "polyparse",
          "signature": "P (s -\u003e [Either e t] -\u003e ParseResult s t e a)",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#Parser",
          "type": "function"
        },
        "index": {
          "description": "The parser type is parametrised on the types of the state the input tokens error-type and the result value The state and remaining input are threaded through the monad",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "P",
          "normalized": "P(a-\u003e[Either b c]-\u003eParseResult a c b d)",
          "package": "polyparse",
          "signature": "P(s-\u003e[Either e t]-\u003eParseResult s t e a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "bracket",
          "package": "polyparse",
          "signature": "Parser s (p, t) e a -\u003e Parser s (p, t) e b -\u003e Parser s (p, t) e c -\u003e Parser s (p, t) e b",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#bracket",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "bracket",
          "normalized": "Parser a(b,c)d e-\u003eParser a(b,c)d f-\u003eParser a(b,c)d g-\u003eParser a(b,c)d f",
          "package": "polyparse",
          "signature": "Parser s(p,t)e a-\u003eParser s(p,t)e b-\u003eParser s(p,t)e c-\u003eParser s(p,t)e b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:bracket"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "chainl",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e (a -\u003e a -\u003e a) -\u003e a -\u003e Parser s t e a",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#chainl",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "chainl",
          "normalized": "Parser a b c d-\u003eParser a b c(d-\u003ed-\u003ed)-\u003ed-\u003eParser a b c d",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e(a-\u003ea-\u003ea)-\u003ea-\u003eParser s t e a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:chainl"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "chainl1",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e (a -\u003e a -\u003e a) -\u003e Parser s t e a",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#chainl1",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "chainl1",
          "normalized": "Parser a b c d-\u003eParser a b c(d-\u003ed-\u003ed)-\u003eParser a b c d",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e(a-\u003ea-\u003ea)-\u003eParser s t e a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:chainl1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "chainr",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e (a -\u003e a -\u003e a) -\u003e a -\u003e Parser s t e a",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#chainr",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "chainr",
          "normalized": "Parser a b c d-\u003eParser a b c(d-\u003ed-\u003ed)-\u003ed-\u003eParser a b c d",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e(a-\u003ea-\u003ea)-\u003ea-\u003eParser s t e a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:chainr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "chainr1",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e (a -\u003e a -\u003e a) -\u003e Parser s t e a",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#chainr1",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "chainr1",
          "normalized": "Parser a b c d-\u003eParser a b c(d-\u003ed-\u003ed)-\u003eParser a b c d",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e(a-\u003ea-\u003ea)-\u003eParser s t e a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:chainr1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf the parser fails, generate an error message.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "elserror",
          "package": "polyparse",
          "signature": "Parser s (p, t) String a -\u003e String -\u003e Parser s (p, t) String a",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#elserror",
          "type": "function"
        },
        "index": {
          "description": "If the parser fails generate an error message",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "elserror",
          "normalized": "Parser a(b,c)String d-\u003eString-\u003eParser a(b,c)String d",
          "package": "polyparse",
          "signature": "Parser s(p,t)String a-\u003eString-\u003eParser s(p,t)String a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:elserror"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eFail if end of input is not reached\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser s (p, t) String ()",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#eof",
          "type": "function"
        },
        "index": {
          "description": "Fail if end of input is not reached",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "eof",
          "normalized": "Parser a(b,c)String()",
          "package": "polyparse",
          "signature": "Parser s(p,t)String()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver the first remaining token.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "item",
          "package": "polyparse",
          "signature": "Parser s t e t",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#item",
          "type": "function"
        },
        "index": {
          "description": "Deliver the first remaining token",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "item",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:item"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver zero or more values of \u003ccode\u003ea\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "many",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e [a]",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#many",
          "type": "function"
        },
        "index": {
          "description": "Deliver zero or more values of",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "many",
          "normalized": "Parser a b c d-\u003eParser a b c[d]",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:many"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver one or more values of \u003ccode\u003ea\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "many1",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e [a]",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#many1",
          "type": "function"
        },
        "index": {
          "description": "Deliver one or more values of",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "many1",
          "normalized": "Parser a b c d-\u003eParser a b c[d]",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:many1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver the first token if it does not equal the argument.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "nottok",
          "package": "polyparse",
          "signature": "[t] -\u003e Parser s (p, t) e t",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#nottok",
          "type": "function"
        },
        "index": {
          "description": "Deliver the first token if it does not equal the argument",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "nottok",
          "normalized": "[a]-\u003eParser b(c,a)d a",
          "package": "polyparse",
          "signature": "[t]-\u003eParser s(p,t)e t",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:nottok"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "ops",
          "package": "polyparse",
          "signature": "[(Parser s t e a, b)] -\u003e Parser s t e b",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#ops",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "ops",
          "normalized": "[(Parser a b c d,e)]-\u003eParser a b c e",
          "package": "polyparse",
          "signature": "[(Parser s t e a,b)]-\u003eParser s t e b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:ops"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply the parser to some real input, given an initial state value.\n   If the parser fails, raise \u003ccode\u003e\u003ca\u003eerror\u003c/a\u003e\u003c/code\u003e to halt the program.\n   (This is the original exported behaviour - to allow the caller to\n   deal with the error differently, see \u003ccode\u003epapply'\u003c/code\u003e.)\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "papply",
          "package": "polyparse",
          "signature": "Parser s t String a -\u003e s -\u003e [Either String t] -\u003e [(a, s, [Either String t])]",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#papply",
          "type": "function"
        },
        "index": {
          "description": "Apply the parser to some real input given an initial state value If the parser fails raise error to halt the program This is the original exported behaviour to allow the caller to deal with the error differently see papply",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "papply",
          "normalized": "Parser a b String c-\u003ea-\u003e[Either String b]-\u003e[(c,a,[Either String b])]",
          "package": "polyparse",
          "signature": "Parser s t String a-\u003es-\u003e[Either String t]-\u003e[(a,s,[Either String t])]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:papply"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply the parser to some real input, given an initial state value.\n   If the parser fails, return a diagnostic message to the caller.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "papply'",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e s -\u003e [Either e t] -\u003e Either e [(a, s, [Either e t])]",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#papply%27",
          "type": "function"
        },
        "index": {
          "description": "Apply the parser to some real input given an initial state value If the parser fails return diagnostic message to the caller",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "papply'",
          "normalized": "Parser a b c d-\u003ea-\u003e[Either c b]-\u003eEither c[(d,a,[Either c b])]",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003es-\u003e[Either e t]-\u003eEither e[(a,s,[Either e t])]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:papply-39-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis is useful for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "reparse",
          "package": "polyparse",
          "signature": "[Either e t] -\u003e Parser s t e ()",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#reparse",
          "type": "function"
        },
        "index": {
          "description": "This is useful for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "reparse",
          "normalized": "[Either a b]-\u003eParser c b a()",
          "package": "polyparse",
          "signature": "[Either e t]-\u003eParser s t e()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver zero or more values of \u003ccode\u003ea\u003c/code\u003e separated by \u003ccode\u003eb\u003c/code\u003e's.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "sepby",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e b -\u003e Parser s t e [a]",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#sepby",
          "type": "function"
        },
        "index": {
          "description": "Deliver zero or more values of separated by",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "sepby",
          "normalized": "Parser a b c d-\u003eParser a b c e-\u003eParser a b c[d]",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e b-\u003eParser s t e[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:sepby"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver one or more values of \u003ccode\u003ea\u003c/code\u003e separated by \u003ccode\u003eb\u003c/code\u003e's.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "sepby1",
          "package": "polyparse",
          "signature": "Parser s t e a -\u003e Parser s t e b -\u003e Parser s t e [a]",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#sepby1",
          "type": "function"
        },
        "index": {
          "description": "Deliver one or more values of separated by",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "sepby1",
          "normalized": "Parser a b c d-\u003eParser a b c e-\u003eParser a b c[d]",
          "package": "polyparse",
          "signature": "Parser s t e a-\u003eParser s t e b-\u003eParser s t e[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:sepby1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver the entire internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "stget",
          "package": "polyparse",
          "signature": "Parser s t e s",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#stget",
          "type": "function"
        },
        "index": {
          "description": "Deliver the entire internal state",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "stget",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:stget"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eQuery the internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "stquery",
          "package": "polyparse",
          "signature": "(s -\u003e a) -\u003e Parser s t e a",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#stquery",
          "type": "function"
        },
        "index": {
          "description": "Query the internal state",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "stquery",
          "normalized": "(a-\u003eb)-\u003eParser a c d b",
          "package": "polyparse",
          "signature": "(s-\u003ea)-\u003eParser s t e a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:stquery"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUpdate the internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "stupd",
          "package": "polyparse",
          "signature": "(s -\u003e s) -\u003e Parser s t e ()",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#stupd",
          "type": "function"
        },
        "index": {
          "description": "Update the internal state",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "stupd",
          "normalized": "(a-\u003ea)-\u003eParser a b c()",
          "package": "polyparse",
          "signature": "(s-\u003es)-\u003eParser s t e()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:stupd"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eAccept a complete parse of the input only, no partial parses.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "toEOF",
          "package": "polyparse",
          "signature": "Parser s (p, t) String a -\u003e Parser s (p, t) String a",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#toEOF",
          "type": "function"
        },
        "index": {
          "description": "Accept complete parse of the input only no partial parses",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "toEOF",
          "normalized": "Parser a(b,c)String d-\u003eParser a(b,c)String d",
          "package": "polyparse",
          "partial": "EOF",
          "signature": "Parser s(p,t)String a-\u003eParser s(p,t)String a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:toEOF"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver the first token if it equals the argument.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "tok",
          "package": "polyparse",
          "signature": "t -\u003e Parser s (p, t) e t",
          "source": "src/Text-ParserCombinators-HuttonMeijerWallace.html#tok",
          "type": "function"
        },
        "index": {
          "description": "Deliver the first token if it equals the argument",
          "hierarchy": "Text ParserCombinators HuttonMeijerWallace",
          "module": "Text.ParserCombinators.HuttonMeijerWallace",
          "name": "tok",
          "normalized": "a-\u003eParser b(c,a)d a",
          "package": "polyparse",
          "signature": "t-\u003eParser s(p,t)e t",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-HuttonMeijerWallace.html#v:tok"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "Base",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Base.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "Base",
          "package": "polyparse",
          "partial": "Base",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe \u003ccode\u003eCommitment\u003c/code\u003e class is an abstraction over all the current\n   concrete representations of monadic/applicative parser combinators in this\n   package.  The common feature is two-level error-handling.\n   Some primitives must be implemented specific to each parser type\n   (e.g. depending on whether the parser has a running state, or\n   whether it is lazy).  But given those primitives, large numbers of\n   combinators do not depend any further on the internal structure of\n   the particular parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "Commitment",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Base.html#Commitment",
          "type": "class"
        },
        "index": {
          "description": "The Commitment class is an abstraction over all the current concrete representations of monadic applicative parser combinators in this package The common feature is two-level error-handling Some primitives must be implemented specific to each parser type e.g depending on whether the parser has running state or whether it is lazy But given those primitives large numbers of combinators do not depend any further on the internal structure of the particular parser",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "Commitment",
          "package": "polyparse",
          "partial": "Commitment",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#t:Commitment"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe \u003ccode\u003ePolyParse\u003c/code\u003e class is an abstraction gathering all of the common\n   features that a two-level error-handling parser requires:\n   the applicative parsing interface, the monadic interface, and commitment.\n\u003c/p\u003e\u003cp\u003eThere are two additional basic combinators that we expect to be implemented\n   afresh for every concrete type, but which (for technical reasons)\n   cannot be class methods.  They are \u003ccode\u003enext\u003c/code\u003e and \u003ccode\u003esatisfy\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "PolyParse",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Base.html#PolyParse",
          "type": "class"
        },
        "index": {
          "description": "The PolyParse class is an abstraction gathering all of the common features that two-level error-handling parser requires the applicative parsing interface the monadic interface and commitment There are two additional basic combinators that we expect to be implemented afresh for every concrete type but which for technical reasons cannot be class methods They are next and satisfy",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "PolyParse",
          "package": "polyparse",
          "partial": "Poly Parse",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#t:PolyParse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eadjustErr\u003c/a\u003e\u003c/code\u003e f\u003c/code\u003e applies the transformation \u003ccode\u003ef\u003c/code\u003e to any error message\n   generated in \u003ccode\u003ep\u003c/code\u003e, having no effect if \u003ccode\u003ep\u003c/code\u003e succeeds.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "adjustErr",
          "package": "polyparse",
          "signature": "p a -\u003e (String -\u003e String) -\u003e p a",
          "source": "src/Text-ParserCombinators-Poly-Base.html#adjustErr",
          "type": "method"
        },
        "index": {
          "description": "adjustErr applies the transformation to any error message generated in having no effect if succeeds",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "adjustErr",
          "normalized": "a b-\u003e(String-\u003eString)-\u003ea b",
          "package": "polyparse",
          "partial": "Err",
          "signature": "p a-\u003e(String-\u003eString)-\u003ep a",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:adjustErr"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003eadjustErrBad\u003c/code\u003e is just like \u003ccode\u003eadjustErr\u003c/code\u003e except it also raises the\n   severity of the error.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "adjustErrBad",
          "package": "polyparse",
          "signature": "p a -\u003e (String -\u003e String) -\u003e p a",
          "source": "src/Text-ParserCombinators-Poly-Base.html#adjustErrBad",
          "type": "function"
        },
        "index": {
          "description": "adjustErrBad is just like adjustErr except it also raises the severity of the error",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "adjustErrBad",
          "normalized": "a b-\u003e(String-\u003eString)-\u003ea b",
          "package": "polyparse",
          "partial": "Err Bad",
          "signature": "p a-\u003e(String-\u003eString)-\u003ep a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:adjustErrBad"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parsed function to a parsed value.\n   Rather like ordinary function application lifted into parsers.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "apply",
          "package": "polyparse",
          "signature": "p (a -\u003e b) -\u003e p a -\u003e p b",
          "source": "src/Text-ParserCombinators-Poly-Base.html#apply",
          "type": "function"
        },
        "index": {
          "description": "Apply parsed function to parsed value Rather like ordinary function application lifted into parsers",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "apply",
          "normalized": "a(b-\u003ec)-\u003ea b-\u003ea c",
          "package": "polyparse",
          "signature": "p(a-\u003eb)-\u003ep a-\u003ep b",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:apply"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a bracketed item, discarding the brackets.\n   If everything matches \u003cem\u003eexcept\u003c/em\u003e the closing bracket, the whole\n   parse fails soft, which can give less-than-satisfying error messages.\n   If you want better error messages, try calling with e.g.\n     \u003ccode\u003ebracket open (commit close) item\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "bracket",
          "package": "polyparse",
          "signature": "p bra -\u003e p ket -\u003e p a -\u003e p a",
          "source": "src/Text-ParserCombinators-Poly-Base.html#bracket",
          "type": "function"
        },
        "index": {
          "description": "Parse bracketed item discarding the brackets If everything matches except the closing bracket the whole parse fails soft which can give less-than-satisfying error messages If you want better error messages try calling with e.g bracket open commit close item",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "bracket",
          "normalized": "a b-\u003ea c-\u003ea d-\u003ea d",
          "package": "polyparse",
          "signature": "p bra-\u003ep ket-\u003ep a-\u003ep a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:bracket"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a list of items, discarding the start, end, and separator\n   items.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "bracketSep",
          "package": "polyparse",
          "signature": "p bra -\u003e p sep -\u003e p ket -\u003e p a -\u003e p [a]",
          "source": "src/Text-ParserCombinators-Poly-Base.html#bracketSep",
          "type": "function"
        },
        "index": {
          "description": "Parse list of items discarding the start end and separator items",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "bracketSep",
          "normalized": "a b-\u003ea c-\u003ea d-\u003ea e-\u003ea[e]",
          "package": "polyparse",
          "partial": "Sep",
          "signature": "p bra-\u003ep sep-\u003ep ket-\u003ep a-\u003ep[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:bracketSep"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eCommit is a way of raising the severity of any errors found within\n   its argument.  Used in the middle of a parser definition, it means that\n   any operations prior to commitment fail softly, but after commitment,\n   they fail hard.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "commit",
          "package": "polyparse",
          "signature": "p a -\u003e p a",
          "source": "src/Text-ParserCombinators-Poly-Base.html#commit",
          "type": "method"
        },
        "index": {
          "description": "Commit is way of raising the severity of any errors found within its argument Used in the middle of parser definition it means that any operations prior to commitment fail softly but after commitment they fail hard",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "commit",
          "normalized": "a b-\u003ea b",
          "package": "polyparse",
          "signature": "p a-\u003ep a",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:commit"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ex \u003ccode\u003e\u003ca\u003ediscard\u003c/a\u003e\u003c/code\u003e y\u003c/code\u003e parses both x and y, but discards the result of y.\n   Rather like \u003ccode\u003econst\u003c/code\u003e lifted into parsers.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "discard",
          "package": "polyparse",
          "signature": "p a -\u003e p b -\u003e p a",
          "source": "src/Text-ParserCombinators-Poly-Base.html#discard",
          "type": "function"
        },
        "index": {
          "description": "discard parses both and but discards the result of Rather like const lifted into parsers",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "discard",
          "normalized": "a b-\u003ea c-\u003ea b",
          "package": "polyparse",
          "signature": "p a-\u003ep b-\u003ep a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:discard"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e'exactly n p' parses precisely n items, using the parser p, in sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "exactly",
          "package": "polyparse",
          "signature": "Int -\u003e p a -\u003e p [a]",
          "source": "src/Text-ParserCombinators-Poly-Base.html#exactly",
          "type": "function"
        },
        "index": {
          "description": "exactly parses precisely items using the parser in sequence",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "exactly",
          "normalized": "Int-\u003ea b-\u003ea[b]",
          "package": "polyparse",
          "signature": "Int-\u003ep a-\u003ep[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:exactly"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eWhen a simple fail is not strong enough, use failBad for emphasis.\n   An emphasised (severe) error cannot be overridden by choice\n   operators.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "failBad",
          "package": "polyparse",
          "signature": "String -\u003e p a",
          "source": "src/Text-ParserCombinators-Poly-Base.html#failBad",
          "type": "function"
        },
        "index": {
          "description": "When simple fail is not strong enough use failBad for emphasis An emphasised severe error cannot be overridden by choice operators",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "failBad",
          "normalized": "String-\u003ea b",
          "package": "polyparse",
          "partial": "Bad",
          "signature": "String-\u003ep a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:failBad"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eHelper for formatting error messages: indents all lines by a fixed amount.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "indent",
          "package": "polyparse",
          "signature": "Int -\u003e String -\u003e String",
          "source": "src/Text-ParserCombinators-Poly-Base.html#indent",
          "type": "function"
        },
        "index": {
          "description": "Helper for formatting error messages indents all lines by fixed amount",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "indent",
          "normalized": "Int-\u003eString-\u003eString",
          "package": "polyparse",
          "signature": "Int-\u003eString-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:indent"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a non-empty list of items.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "many1",
          "package": "polyparse",
          "signature": "p a -\u003e p [a]",
          "source": "src/Text-ParserCombinators-Poly-Base.html#many1",
          "type": "function"
        },
        "index": {
          "description": "Parse non-empty list of items",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "many1",
          "normalized": "a b-\u003ea[b]",
          "package": "polyparse",
          "signature": "p a-\u003ep[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:many1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emanyFinally e t\u003c/code\u003e parses a possibly-empty sequence of \u003ccode\u003ee\u003c/code\u003e's,\n   terminated by a \u003ccode\u003et\u003c/code\u003e.  The final \u003ccode\u003et\u003c/code\u003e is discarded.  Any parse failures\n   could be due either to a badly-formed terminator or a badly-formed\n   element, so it raises both possible errors.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "manyFinally",
          "package": "polyparse",
          "signature": "p a -\u003e p z -\u003e p [a]",
          "source": "src/Text-ParserCombinators-Poly-Base.html#manyFinally",
          "type": "function"
        },
        "index": {
          "description": "manyFinally parses possibly-empty sequence of terminated by The final is discarded Any parse failures could be due either to badly-formed terminator or badly-formed element so it raises both possible errors",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "manyFinally",
          "normalized": "a b-\u003ea c-\u003ea[b]",
          "package": "polyparse",
          "partial": "Finally",
          "signature": "p a-\u003ep z-\u003ep[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:manyFinally"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emanyFinally'\u003c/code\u003e is like \u003ccode\u003emanyFinally\u003c/code\u003e, except when the terminator\n   parser overlaps with the element parser.  In \u003ccode\u003emanyFinally e t\u003c/code\u003e,\n   the parser \u003ccode\u003et\u003c/code\u003e is tried only when parser \u003ccode\u003ee\u003c/code\u003e fails, whereas in\n   \u003ccode\u003emanyFinally' e t\u003c/code\u003e, the parser \u003ccode\u003et\u003c/code\u003e is always tried first, then\n   parser \u003ccode\u003ee\u003c/code\u003e only if the terminator is not found.  For instance,\n   \u003ccode\u003emanyFinally (accept \u003ca\u003e01\u003c/a\u003e) (accept \u003ca\u003e0\u003c/a\u003e)\u003c/code\u003e on input \u003ccode\u003e\u003ca\u003e0101010\u003c/a\u003e\u003c/code\u003e returns\n   \u003ccode\u003e[\u003ca\u003e01\u003c/a\u003e,\u003ca\u003e01\u003c/a\u003e,\u003ca\u003e01\u003c/a\u003e]\u003c/code\u003e, whereas \u003ccode\u003emanyFinally'\u003c/code\u003e with the same arguments\n   and input returns \u003ccode\u003e[]\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "manyFinally'",
          "package": "polyparse",
          "signature": "p a -\u003e p z -\u003e p [a]",
          "source": "src/Text-ParserCombinators-Poly-Base.html#manyFinally%27",
          "type": "function"
        },
        "index": {
          "description": "manyFinally is like manyFinally except when the terminator parser overlaps with the element parser In manyFinally the parser is tried only when parser fails whereas in manyFinally the parser is always tried first then parser only if the terminator is not found For instance manyFinally accept accept on input returns whereas manyFinally with the same arguments and input returns",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "manyFinally'",
          "normalized": "a b-\u003ea c-\u003ea[b]",
          "package": "polyparse",
          "partial": "Finally'",
          "signature": "p a-\u003ep z-\u003ep[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:manyFinally-39-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse the first alternative in the list that succeeds.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "oneOf",
          "package": "polyparse",
          "signature": "[p a] -\u003e p a",
          "source": "src/Text-ParserCombinators-Poly-Base.html#oneOf",
          "type": "function"
        },
        "index": {
          "description": "Parse the first alternative in the list that succeeds",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "oneOf",
          "normalized": "[a b]-\u003ea b",
          "package": "polyparse",
          "partial": "Of",
          "signature": "[p a]-\u003ep a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:oneOf"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse the first alternative that succeeds, but if none succeed,\n   report only the severe errors, and if none of those, then report\n   all the soft errors.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "oneOf'",
          "package": "polyparse",
          "signature": "[(String, p a)] -\u003e p a",
          "source": "src/Text-ParserCombinators-Poly-Base.html#oneOf%27",
          "type": "method"
        },
        "index": {
          "description": "Parse the first alternative that succeeds but if none succeed report only the severe errors and if none of those then report all the soft errors",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "oneOf'",
          "normalized": "[(String,a b)]-\u003ea b",
          "package": "polyparse",
          "partial": "Of'",
          "signature": "[(String,p a)]-\u003ep a",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:oneOf-39-"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a list of items separated by discarded junk.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "sepBy",
          "package": "polyparse",
          "signature": "p a -\u003e p sep -\u003e p [a]",
          "source": "src/Text-ParserCombinators-Poly-Base.html#sepBy",
          "type": "function"
        },
        "index": {
          "description": "Parse list of items separated by discarded junk",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "sepBy",
          "normalized": "a b-\u003ea c-\u003ea[b]",
          "package": "polyparse",
          "partial": "By",
          "signature": "p a-\u003ep sep-\u003ep[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:sepBy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParse a non-empty list of items separated by discarded junk.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "sepBy1",
          "package": "polyparse",
          "signature": "p a -\u003e p sep -\u003e p [a]",
          "source": "src/Text-ParserCombinators-Poly-Base.html#sepBy1",
          "type": "function"
        },
        "index": {
          "description": "Parse non-empty list of items separated by discarded junk",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "sepBy1",
          "normalized": "a b-\u003ea c-\u003ea[b]",
          "package": "polyparse",
          "partial": "By",
          "signature": "p a-\u003ep sep-\u003ep[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:sepBy1"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e'upto n p' parses n or fewer items, using the parser p, in sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "upto",
          "package": "polyparse",
          "signature": "Int -\u003e p a -\u003e p [a]",
          "source": "src/Text-ParserCombinators-Poly-Base.html#upto",
          "type": "function"
        },
        "index": {
          "description": "upto parses or fewer items using the parser in sequence",
          "hierarchy": "Text ParserCombinators Poly Base",
          "module": "Text.ParserCombinators.Poly.Base",
          "name": "upto",
          "normalized": "Int-\u003ea b-\u003ea[b]",
          "package": "polyparse",
          "signature": "Int-\u003ep a-\u003ep[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Base.html#v:upto"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "ByteString",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "ByteString",
          "package": "polyparse",
          "partial": "Byte String",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a specialised parsing monad with error\n   reporting.  Whereas the standard version can be used for arbitrary\n   token types, this version is specialised to ByteString input only.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is specialised parsing monad with error reporting Whereas the standard version can be used for arbitrary token types this version is specialised to ByteString input only",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Text.ParserCombinators.Poly.ByteString\",\"Text.ParserCombinators.Poly.ByteStringChar\",\"Text.ParserCombinators.Poly.Lazy\",\"Text.ParserCombinators.Poly.Lex\",\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\",\"Text.ParserCombinators.Poly.Result\",\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateLazy\",\"Text.ParserCombinators.Poly.StateParser\",\"Text.ParserCombinators.Poly.StateText\",\"Text.ParserCombinators.Poly.Text\"]",
          "name": "Committed",
          "package": "polyparse",
          "signature": "Committed (Result z a)",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Result.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:Committed\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:Committed\"]"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "Committed",
          "package": "polyparse",
          "partial": "Committed",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:Committed"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Text.ParserCombinators.Poly.ByteString\",\"Text.ParserCombinators.Poly.ByteStringChar\",\"Text.ParserCombinators.Poly.Lazy\",\"Text.ParserCombinators.Poly.Lex\",\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\",\"Text.ParserCombinators.Poly.Result\",\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateLazy\",\"Text.ParserCombinators.Poly.StateParser\",\"Text.ParserCombinators.Poly.StateText\",\"Text.ParserCombinators.Poly.Text\"]",
          "name": "Failure",
          "package": "polyparse",
          "signature": "Failure z String",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Result.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:Failure\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:Failure\"]"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "Failure",
          "package": "polyparse",
          "partial": "Failure",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:Failure"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "P",
          "package": "polyparse",
          "signature": "P (ByteString -\u003e Result ByteString a)",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#Parser",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "P",
          "normalized": "P(ByteString-\u003eResult ByteString a)",
          "package": "polyparse",
          "signature": "P(ByteString-\u003eResult ByteString a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Text.ParserCombinators.Poly.ByteString\",\"Text.ParserCombinators.Poly.ByteStringChar\",\"Text.ParserCombinators.Poly.Lazy\",\"Text.ParserCombinators.Poly.Lex\",\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\",\"Text.ParserCombinators.Poly.Result\",\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateLazy\",\"Text.ParserCombinators.Poly.StateParser\",\"Text.ParserCombinators.Poly.StateText\",\"Text.ParserCombinators.Poly.Text\"]",
          "name": "Success",
          "package": "polyparse",
          "signature": "Success z a",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Result.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:Success\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:Success\"]"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "Success",
          "package": "polyparse",
          "partial": "Success",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:Success"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser ()",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#eof",
          "type": "function"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "eof",
          "normalized": "Parser()",
          "package": "polyparse",
          "signature": "Parser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emany1Satisfy p\u003c/code\u003e is a more efficient fused version of \u003ccode\u003emany1 (satisfy p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "many1Satisfy",
          "package": "polyparse",
          "signature": "(Word8 -\u003e Bool) -\u003e Parser ByteString",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#many1Satisfy",
          "type": "function"
        },
        "index": {
          "description": "many1Satisfy is more efficient fused version of many1 satisfy",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "many1Satisfy",
          "normalized": "(Word-\u003eBool)-\u003eParser ByteString",
          "package": "polyparse",
          "partial": "Satisfy",
          "signature": "(Word-\u003eBool)-\u003eParser ByteString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:many1Satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emanySatisfy p\u003c/code\u003e is a more efficient fused version of \u003ccode\u003emany (satisfy p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "manySatisfy",
          "package": "polyparse",
          "signature": "(Word8 -\u003e Bool) -\u003e Parser ByteString",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#manySatisfy",
          "type": "function"
        },
        "index": {
          "description": "manySatisfy is more efficient fused version of many satisfy",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "manySatisfy",
          "normalized": "(Word-\u003eBool)-\u003eParser ByteString",
          "package": "polyparse",
          "partial": "Satisfy",
          "signature": "(Word-\u003eBool)-\u003eParser ByteString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:manySatisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser Word8",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#next",
          "type": "function"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#onFail",
          "type": "function"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "onFail",
          "normalized": "Parser a-\u003eParser a-\u003eParser a",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser a-\u003eParser a-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "reparse",
          "package": "polyparse",
          "signature": "ByteString -\u003e Parser ()",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#reparse",
          "type": "function"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "reparse",
          "normalized": "ByteString-\u003eParser()",
          "package": "polyparse",
          "signature": "ByteString-\u003eParser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser a -\u003e ByteString -\u003e (Either String a, ByteString)",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "runParser",
          "normalized": "Parser a-\u003eByteString-\u003e(Either String a,ByteString)",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser a-\u003eByteString-\u003e(Either String a,ByteString)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(Word8 -\u003e Bool) -\u003e Parser Word8",
          "source": "src/Text-ParserCombinators-Poly-ByteString.html#satisfy",
          "type": "function"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly ByteString",
          "module": "Text.ParserCombinators.Poly.ByteString",
          "name": "satisfy",
          "normalized": "(Word-\u003eBool)-\u003eParser Word",
          "package": "polyparse",
          "signature": "(Word-\u003eBool)-\u003eParser Word",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteString.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "ByteStringChar",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "ByteStringChar",
          "package": "polyparse",
          "partial": "Byte String Char",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a specialised parsing monad with error\n   reporting.  Whereas the standard version can be used for arbitrary\n   token types, this version is specialised to ByteString input only.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is specialised parsing monad with error reporting Whereas the standard version can be used for arbitrary token types this version is specialised to ByteString input only",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "P",
          "package": "polyparse",
          "signature": "P (ByteString -\u003e Result ByteString a)",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#Parser",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "P",
          "normalized": "P(ByteString-\u003eResult ByteString a)",
          "package": "polyparse",
          "signature": "P(ByteString-\u003eResult ByteString a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser ()",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#eof",
          "type": "function"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "eof",
          "normalized": "Parser()",
          "package": "polyparse",
          "signature": "Parser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emany1Satisfy p\u003c/code\u003e is a more efficient fused version of \u003ccode\u003emany1 (satisfy p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "many1Satisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser ByteString",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#many1Satisfy",
          "type": "function"
        },
        "index": {
          "description": "many1Satisfy is more efficient fused version of many1 satisfy",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "many1Satisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser ByteString",
          "package": "polyparse",
          "partial": "Satisfy",
          "signature": "(Char-\u003eBool)-\u003eParser ByteString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:many1Satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emanySatisfy p\u003c/code\u003e is a more efficient fused version of \u003ccode\u003emany (satisfy p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "manySatisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser ByteString",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#manySatisfy",
          "type": "function"
        },
        "index": {
          "description": "manySatisfy is more efficient fused version of many satisfy",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "manySatisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser ByteString",
          "package": "polyparse",
          "partial": "Satisfy",
          "signature": "(Char-\u003eBool)-\u003eParser ByteString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:manySatisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser Char",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#next",
          "type": "function"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#onFail",
          "type": "function"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "onFail",
          "normalized": "Parser a-\u003eParser a-\u003eParser a",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser a-\u003eParser a-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "reparse",
          "package": "polyparse",
          "signature": "ByteString -\u003e Parser ()",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#reparse",
          "type": "function"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "reparse",
          "normalized": "ByteString-\u003eParser()",
          "package": "polyparse",
          "signature": "ByteString-\u003eParser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser a -\u003e ByteString -\u003e (Either String a, ByteString)",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "runParser",
          "normalized": "Parser a-\u003eByteString-\u003e(Either String a,ByteString)",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser a-\u003eByteString-\u003e(Either String a,ByteString)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser Char",
          "source": "src/Text-ParserCombinators-Poly-ByteStringChar.html#satisfy",
          "type": "function"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly ByteStringChar",
          "module": "Text.ParserCombinators.Poly.ByteStringChar",
          "name": "satisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser Char",
          "package": "polyparse",
          "signature": "(Char-\u003eBool)-\u003eParser Char",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-ByteStringChar.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "Lazy",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "Lazy",
          "package": "polyparse",
          "partial": "Lazy",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe only differences between a Plain and a Lazy parser are the instance\n   of Applicative, and the type (and implementation) of runParser.\n   We therefore need to \u003cem\u003enewtype\u003c/em\u003e the original Parser type, to allow it\n   to have a different instance.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "The only differences between Plain and Lazy parser are the instance of Applicative and the type and implementation of runParser We therefore need to newtype the original Parser type to allow it to have different instance",
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "P",
          "package": "polyparse",
          "signature": "P (Parser t a)",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html#Parser",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "P",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser t ()",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html#eof",
          "type": "function"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "eof",
          "normalized": "Parser a()",
          "package": "polyparse",
          "signature": "Parser t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser t t",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html#next",
          "type": "function"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser t a -\u003e Parser t a -\u003e Parser t a",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html#onFail",
          "type": "function"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "onFail",
          "normalized": "Parser a b-\u003eParser a b-\u003eParser a b",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser t a-\u003eParser t a-\u003eParser t a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "reparse",
          "package": "polyparse",
          "signature": "[t] -\u003e Parser t ()",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html#reparse",
          "type": "function"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "reparse",
          "normalized": "[a]-\u003eParser a()",
          "package": "polyparse",
          "signature": "[t]-\u003eParser t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser t a -\u003e [t] -\u003e (a, [t])",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "runParser",
          "normalized": "Parser a b-\u003e[a]-\u003e(b,[a])",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser t a-\u003e[t]-\u003e(a,[t])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(t -\u003e Bool) -\u003e Parser t t",
          "source": "src/Text-ParserCombinators-Poly-Lazy.html#satisfy",
          "type": "function"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly Lazy",
          "module": "Text.ParserCombinators.Poly.Lazy",
          "name": "satisfy",
          "normalized": "(a-\u003eBool)-\u003eParser a a",
          "package": "polyparse",
          "signature": "(t-\u003eBool)-\u003eParser t t",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lazy.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eIn a strict language, where creating the entire input list of tokens\n   in one shot may be infeasible, we can use a lazy \u003ca\u003ecallback\u003c/a\u003e kind of\n   architecture instead.  The lexer returns a single token at a time,\n   together with a continuation.\n\u003c/p\u003e\u003cp\u003eThis module defines a Parser type (capable of use with the Poly\n   combinators), specialised to the callback-lexer style of input stream.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "Lex",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Lex.html",
          "type": "module"
        },
        "index": {
          "description": "In strict language where creating the entire input list of tokens in one shot may be infeasible we can use lazy callback kind of architecture instead The lexer returns single token at time together with continuation This module defines Parser type capable of use with the Poly combinators specialised to the callback-lexer style of input stream",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "Lex",
          "package": "polyparse",
          "partial": "Lex",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIn a strict language, where creating the entire input list of tokens\n   in one shot may be infeasible, we can use a lazy \u003ca\u003ecallback\u003c/a\u003e kind of\n   architecture instead.  The lexer returns a single token at a time,\n   together with a continuation.  The \u003ccode\u003enext\u003c/code\u003e parser is responsible for \n   pulling on the token stream, applying the continuation where necessary.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "LexReturn",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#LexReturn",
          "type": "data"
        },
        "index": {
          "description": "In strict language where creating the entire input list of tokens in one shot may be infeasible we can use lazy callback kind of architecture instead The lexer returns single token at time together with continuation The next parser is responsible for pulling on the token stream applying the continuation where necessary",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "LexReturn",
          "package": "polyparse",
          "partial": "Lex Return",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#t:LexReturn"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a specialised parsing monad with error\n   reporting.  This version is specialised to pre-lexed String input,\n   where the lexer has been written to yield a \u003ccode\u003eLexReturn\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is specialised parsing monad with error reporting This version is specialised to pre-lexed String input where the lexer has been written to yield LexReturn",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "LexFinish",
          "package": "polyparse",
          "signature": "LexFinish",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#LexReturn",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "LexFinish",
          "package": "polyparse",
          "partial": "Lex Finish",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:LexFinish"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "LexReturn",
          "package": "polyparse",
          "signature": "LexReturn t String (String -\u003e LexReturn t)",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#LexReturn",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "LexReturn",
          "normalized": "LexReturn a String(String-\u003eLexReturn a)",
          "package": "polyparse",
          "partial": "Lex Return",
          "signature": "LexReturn t String(String-\u003eLexReturn t)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:LexReturn"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "P",
          "package": "polyparse",
          "signature": "P (LexReturn t -\u003e Result (LexReturn t) a)",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#Parser",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "P",
          "normalized": "P(LexReturn a-\u003eResult(LexReturn a)b)",
          "package": "polyparse",
          "signature": "P(LexReturn t-\u003eResult(LexReturn t)a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser t ()",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#eof",
          "type": "function"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "eof",
          "normalized": "Parser a()",
          "package": "polyparse",
          "signature": "Parser t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser t t",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#next",
          "type": "function"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser t a -\u003e Parser t a -\u003e Parser t a",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#onFail",
          "type": "function"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "onFail",
          "normalized": "Parser a b-\u003eParser a b-\u003eParser a b",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser t a-\u003eParser t a-\u003eParser t a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "reparse",
          "package": "polyparse",
          "signature": "[t] -\u003e Parser t ()",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#reparse",
          "type": "function"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "reparse",
          "normalized": "[a]-\u003eParser a()",
          "package": "polyparse",
          "signature": "[t]-\u003eParser t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser t a -\u003e LexReturn t -\u003e (Either String a, String)",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "runParser",
          "normalized": "Parser a b-\u003eLexReturn a-\u003e(Either String b,String)",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser t a-\u003eLexReturn t-\u003e(Either String a,String)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(t -\u003e Bool) -\u003e Parser t t",
          "source": "src/Text-ParserCombinators-Poly-Lex.html#satisfy",
          "type": "function"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly Lex",
          "module": "Text.ParserCombinators.Poly.Lex",
          "name": "satisfy",
          "normalized": "(a-\u003eBool)-\u003eParser a a",
          "package": "polyparse",
          "signature": "(t-\u003eBool)-\u003eParser t t",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Lex.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThis module contains the definitions for a generic parser, without\n   running state.  These are the parts that are shared between the Plain\n   and Lazy variations.  Do not import this module directly, but only\n   via T.P.Poly.Plain or T.P.Poly.Lazy.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Parser.html",
          "type": "module"
        },
        "index": {
          "description": "This module contains the definitions for generic parser without running state These are the parts that are shared between the Plain and Lazy variations Do not import this module directly but only via T.P.Poly.Plain or T.P.Poly.Lazy",
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a fairly generic parsing monad with error\n   reporting.  It can be used for arbitrary token types, not just\n   String input.  (If you require a running state, use module Poly.State\n   instead)\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Parser.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is fairly generic parsing monad with error reporting It can be used for arbitrary token types not just String input If you require running state use module Poly.State instead",
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\"]",
          "name": "P",
          "package": "polyparse",
          "signature": "P ([t] -\u003e Result [t] a)",
          "source": "src/Text-ParserCombinators-Poly-Parser.html#Parser",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:P\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:P\"]"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "P",
          "normalized": "P([a]-\u003eResult[a]b)",
          "package": "polyparse",
          "signature": "P([t]-\u003eResult[t]a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\"]",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser t ()",
          "source": "src/Text-ParserCombinators-Poly-Parser.html#eof",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:eof\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:eof\"]"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "eof",
          "normalized": "Parser a()",
          "package": "polyparse",
          "signature": "Parser t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\"]",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser t t",
          "source": "src/Text-ParserCombinators-Poly-Parser.html#next",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:next\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:next\"]"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\"]",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser t a -\u003e Parser t a -\u003e Parser t a",
          "source": "src/Text-ParserCombinators-Poly-Parser.html#onFail",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:onFail\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:onFail\"]"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "onFail",
          "normalized": "Parser a b-\u003eParser a b-\u003eParser a b",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser t a-\u003eParser t a-\u003eParser t a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\"]",
          "name": "reparse",
          "package": "polyparse",
          "signature": "[t] -\u003e Parser t ()",
          "source": "src/Text-ParserCombinators-Poly-Parser.html#reparse",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:reparse\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:reparse\"]"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "reparse",
          "normalized": "[a]-\u003eParser a()",
          "package": "polyparse",
          "signature": "[t]-\u003eParser t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.Parser\",\"Text.ParserCombinators.Poly.Plain\"]",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(t -\u003e Bool) -\u003e Parser t t",
          "source": "src/Text-ParserCombinators-Poly-Parser.html#satisfy",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:satisfy\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:satisfy\"]"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly Parser",
          "module": "Text.ParserCombinators.Poly.Parser",
          "name": "satisfy",
          "normalized": "(a-\u003eBool)-\u003eParser a a",
          "package": "polyparse",
          "signature": "(t-\u003eBool)-\u003eParser t t",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Parser.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Plain",
          "name": "Plain",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Plain.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Plain",
          "module": "Text.ParserCombinators.Poly.Plain",
          "name": "Plain",
          "package": "polyparse",
          "partial": "Plain",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a fairly generic parsing monad with error\n   reporting.  It can be used for arbitrary token types, not just\n   String input.  (If you require a running state, use module Poly.State\n   instead)\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Plain",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Parser.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is fairly generic parsing monad with error reporting It can be used for arbitrary token types not just String input If you require running state use module Poly.State instead",
          "hierarchy": "Text ParserCombinators Poly Plain",
          "module": "Text.ParserCombinators.Poly.Plain",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Plain",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly Plain",
          "module": "Text.ParserCombinators.Poly.Plain",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Plain",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser t a -\u003e [t] -\u003e (Either String a, [t])",
          "source": "src/Text-ParserCombinators-Poly-Plain.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly Plain",
          "module": "Text.ParserCombinators.Poly.Plain",
          "name": "runParser",
          "normalized": "Parser a b-\u003e[a]-\u003e(Either String b,[a])",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser t a-\u003e[t]-\u003e(Either String a,[t])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Plain.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Result",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Result",
          "module": "Text.ParserCombinators.Poly.Result",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Result.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Result",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly Result",
          "module": "Text.ParserCombinators.Poly.Result",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Result.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eConvert a Result to an Either, paired with the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Result",
          "name": "resultToEither",
          "package": "polyparse",
          "signature": "Result z a -\u003e (Either String a, z)",
          "source": "src/Text-ParserCombinators-Poly-Result.html#resultToEither",
          "type": "function"
        },
        "index": {
          "description": "Convert Result to an Either paired with the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly Result",
          "module": "Text.ParserCombinators.Poly.Result",
          "name": "resultToEither",
          "normalized": "Result a b-\u003e(Either String b,a)",
          "package": "polyparse",
          "partial": "To Either",
          "signature": "Result z a-\u003e(Either String a,z)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Result.html#v:resultToEither"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.State",
          "name": "State",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-State.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "State",
          "package": "polyparse",
          "partial": "State",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a fairly generic parsing monad with error\n   reporting, and running state.\n   It can be used for arbitrary token types, not just String input.\n   (If you do not require a running state, use module Poly.Plain instead)\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is fairly generic parsing monad with error reporting and running state It can be used for arbitrary token types not just String input If you do not require running state use module Poly.Plain instead",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "P",
          "package": "polyparse",
          "signature": "P (s -\u003e [t] -\u003e Result ([t], s) a)",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#Parser",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:P\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:P\"]"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "P",
          "normalized": "P(a-\u003e[b]-\u003eResult([b],a)c)",
          "package": "polyparse",
          "signature": "P(s-\u003e[t]-\u003eResult([t],s)a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser s t ()",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#eof",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:eof\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:eof\"]"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "eof",
          "normalized": "Parser a b()",
          "package": "polyparse",
          "signature": "Parser s t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser s t t",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#next",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:next\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:next\"]"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser s t a -\u003e Parser s t a -\u003e Parser s t a",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#onFail",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:onFail\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:onFail\"]"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "onFail",
          "normalized": "Parser a b c-\u003eParser a b c-\u003eParser a b c",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser s t a-\u003eParser s t a-\u003eParser s t a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "reparse",
          "package": "polyparse",
          "signature": "[t] -\u003e Parser s t ()",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#reparse",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:reparse\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:reparse\"]"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "reparse",
          "normalized": "[a]-\u003eParser b a()",
          "package": "polyparse",
          "signature": "[t]-\u003eParser s t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser s t a -\u003e s -\u003e [t] -\u003e (Either String a, s, [t])",
          "source": "src/Text-ParserCombinators-Poly-State.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "runParser",
          "normalized": "Parser a b c-\u003ea-\u003e[b]-\u003e(Either String c,a,[b])",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser s t a-\u003es-\u003e[t]-\u003e(Either String a,s,[t])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(t -\u003e Bool) -\u003e Parser s t t",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#satisfy",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:satisfy\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:satisfy\"]"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "satisfy",
          "normalized": "(a-\u003eBool)-\u003eParser b a a",
          "package": "polyparse",
          "signature": "(t-\u003eBool)-\u003eParser s t t",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver the entire internal state.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "stGet",
          "package": "polyparse",
          "signature": "Parser s t s",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#stGet",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:stGet\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:stGet\"]"
        },
        "index": {
          "description": "Deliver the entire internal state",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "stGet",
          "package": "polyparse",
          "partial": "Get",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:stGet"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eQuery the internal state.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "stQuery",
          "package": "polyparse",
          "signature": "(s -\u003e a) -\u003e Parser s t a",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#stQuery",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:stQuery\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:stQuery\"]"
        },
        "index": {
          "description": "Query the internal state",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "stQuery",
          "normalized": "(a-\u003eb)-\u003eParser a c b",
          "package": "polyparse",
          "partial": "Query",
          "signature": "(s-\u003ea)-\u003eParser s t a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:stQuery"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUpdate the internal state.\n\u003c/p\u003e",
          "module": "[\"Text.ParserCombinators.Poly.State\",\"Text.ParserCombinators.Poly.StateParser\"]",
          "name": "stUpdate",
          "package": "polyparse",
          "signature": "(s -\u003e s) -\u003e Parser s t ()",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#stUpdate",
          "type": "function",
          "uris": "[\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:stUpdate\",\"http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#v:stUpdate\"]"
        },
        "index": {
          "description": "Update the internal state",
          "hierarchy": "Text ParserCombinators Poly State",
          "module": "Text.ParserCombinators.Poly.State",
          "name": "stUpdate",
          "normalized": "(a-\u003ea)-\u003eParser a b()",
          "package": "polyparse",
          "partial": "Update",
          "signature": "(s-\u003es)-\u003eParser s t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-State.html#v:stUpdate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "StateLazy",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "StateLazy",
          "package": "polyparse",
          "partial": "State Lazy",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe only differences between a State and a StateLazy parser are the\n   instance of Applicative, and the type (and implementation) of runParser.\n   We therefore need to \u003cem\u003enewtype\u003c/em\u003e the original Parser type, to allow it\n   to have a different instance.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "The only differences between State and StateLazy parser are the instance of Applicative and the type and implementation of runParser We therefore need to newtype the original Parser type to allow it to have different instance",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "P",
          "package": "polyparse",
          "signature": "P (Parser s t a)",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#Parser",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "P",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser s t ()",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#eof",
          "type": "function"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "eof",
          "normalized": "Parser a b()",
          "package": "polyparse",
          "signature": "Parser s t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "manyFinally",
          "package": "polyparse",
          "signature": "Parser s t a -\u003e Parser s t z -\u003e Parser s t [a]",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#manyFinally",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "manyFinally",
          "normalized": "Parser a b c-\u003eParser a b d-\u003eParser a b[c]",
          "package": "polyparse",
          "partial": "Finally",
          "signature": "Parser s t a-\u003eParser s t z-\u003eParser s t[a]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:manyFinally"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser s t t",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#next",
          "type": "function"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser s t a -\u003e Parser s t a -\u003e Parser s t a",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#onFail",
          "type": "function"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "onFail",
          "normalized": "Parser a b c-\u003eParser a b c-\u003eParser a b c",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser s t a-\u003eParser s t a-\u003eParser s t a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "reparse",
          "package": "polyparse",
          "signature": "[t] -\u003e Parser s t ()",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#reparse",
          "type": "function"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "reparse",
          "normalized": "[a]-\u003eParser b a()",
          "package": "polyparse",
          "signature": "[t]-\u003eParser s t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser s t a -\u003e s -\u003e [t] -\u003e (a, s, [t])",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "runParser",
          "normalized": "Parser a b c-\u003ea-\u003e[b]-\u003e(c,a,[b])",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser s t a-\u003es-\u003e[t]-\u003e(a,s,[t])",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(t -\u003e Bool) -\u003e Parser s t t",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#satisfy",
          "type": "function"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "satisfy",
          "normalized": "(a-\u003eBool)-\u003eParser b a a",
          "package": "polyparse",
          "signature": "(t-\u003eBool)-\u003eParser s t t",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver the entire internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "stGet",
          "package": "polyparse",
          "signature": "Parser s t s",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#stGet",
          "type": "function"
        },
        "index": {
          "description": "Deliver the entire internal state",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "stGet",
          "package": "polyparse",
          "partial": "Get",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:stGet"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eQuery the internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "stQuery",
          "package": "polyparse",
          "signature": "(s -\u003e a) -\u003e Parser s t a",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#stQuery",
          "type": "function"
        },
        "index": {
          "description": "Query the internal state",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "stQuery",
          "normalized": "(a-\u003eb)-\u003eParser a c b",
          "package": "polyparse",
          "partial": "Query",
          "signature": "(s-\u003ea)-\u003eParser s t a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:stQuery"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUpdate the internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "stUpdate",
          "package": "polyparse",
          "signature": "(s -\u003e s) -\u003e Parser s t ()",
          "source": "src/Text-ParserCombinators-Poly-StateLazy.html#stUpdate",
          "type": "function"
        },
        "index": {
          "description": "Update the internal state",
          "hierarchy": "Text ParserCombinators Poly StateLazy",
          "module": "Text.ParserCombinators.Poly.StateLazy",
          "name": "stUpdate",
          "normalized": "(a-\u003ea)-\u003eParser a b()",
          "package": "polyparse",
          "partial": "Update",
          "signature": "(s-\u003es)-\u003eParser s t()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateLazy.html#v:stUpdate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThis module contains the definitions for a generic parser, with\n   running state.  These are the parts that are shared between the State\n   and StateLazy variations.  Do not import this module directly, but only\n   via T.P.Poly.State or T.P.Poly.StateLazy.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Text.ParserCombinators.Poly.StateParser",
          "name": "StateParser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html",
          "type": "module"
        },
        "index": {
          "description": "This module contains the definitions for generic parser with running state These are the parts that are shared between the State and StateLazy variations Do not import this module directly but only via T.P.Poly.State or T.P.Poly.StateLazy",
          "hierarchy": "Text ParserCombinators Poly StateParser",
          "module": "Text.ParserCombinators.Poly.StateParser",
          "name": "StateParser",
          "package": "polyparse",
          "partial": "State Parser",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a fairly generic parsing monad with error\n   reporting, and running state.\n   It can be used for arbitrary token types, not just String input.\n   (If you do not require a running state, use module Poly.Plain instead)\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateParser",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-StateParser.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is fairly generic parsing monad with error reporting and running state It can be used for arbitrary token types not just String input If you do not require running state use module Poly.Plain instead",
          "hierarchy": "Text ParserCombinators Poly StateParser",
          "module": "Text.ParserCombinators.Poly.StateParser",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateParser",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly StateParser",
          "module": "Text.ParserCombinators.Poly.StateParser",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateParser.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "StateText",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-StateText.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "StateText",
          "package": "polyparse",
          "partial": "State Text",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a specialised parsing monad with error\n   reporting.  Whereas the standard version can be used for arbitrary\n   token types, this version is specialised to Text input only.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is specialised parsing monad with error reporting Whereas the standard version can be used for arbitrary token types this version is specialised to Text input only",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "P",
          "package": "polyparse",
          "signature": "P (s -\u003e Text -\u003e Result (Text, s) a)",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#Parser",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "P",
          "normalized": "P(a-\u003eText-\u003eResult(Text,a)b)",
          "package": "polyparse",
          "signature": "P(s-\u003eText-\u003eResult(Text,s)a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser s ()",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#eof",
          "type": "function"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "eof",
          "normalized": "Parser a()",
          "package": "polyparse",
          "signature": "Parser s()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emany1Satisfy p\u003c/code\u003e is a more efficient fused version of \u003ccode\u003emany1 (satisfy p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "many1Satisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser s Text",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#many1Satisfy",
          "type": "function"
        },
        "index": {
          "description": "many1Satisfy is more efficient fused version of many1 satisfy",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "many1Satisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser a Text",
          "package": "polyparse",
          "partial": "Satisfy",
          "signature": "(Char-\u003eBool)-\u003eParser s Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:many1Satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emanySatisfy p\u003c/code\u003e is a more efficient fused version of \u003ccode\u003emany (satisfy p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "manySatisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser s Text",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#manySatisfy",
          "type": "function"
        },
        "index": {
          "description": "manySatisfy is more efficient fused version of many satisfy",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "manySatisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser a Text",
          "package": "polyparse",
          "partial": "Satisfy",
          "signature": "(Char-\u003eBool)-\u003eParser s Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:manySatisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser s Char",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#next",
          "type": "function"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser s a -\u003e Parser s a -\u003e Parser s a",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#onFail",
          "type": "function"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "onFail",
          "normalized": "Parser a b-\u003eParser a b-\u003eParser a b",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser s a-\u003eParser s a-\u003eParser s a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "reparse",
          "package": "polyparse",
          "signature": "Text -\u003e Parser s ()",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#reparse",
          "type": "function"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "reparse",
          "normalized": "Text-\u003eParser a()",
          "package": "polyparse",
          "signature": "Text-\u003eParser s()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser s a -\u003e s -\u003e Text -\u003e (Either String a, s, Text)",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "runParser",
          "normalized": "Parser a b-\u003ea-\u003eText-\u003e(Either String b,a,Text)",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser s a-\u003es-\u003eText-\u003e(Either String a,s,Text)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser s Char",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#satisfy",
          "type": "function"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "satisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser a Char",
          "package": "polyparse",
          "signature": "(Char-\u003eBool)-\u003eParser s Char",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDeliver the entire internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "stGet",
          "package": "polyparse",
          "signature": "Parser s s",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#stGet",
          "type": "function"
        },
        "index": {
          "description": "Deliver the entire internal state",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "stGet",
          "package": "polyparse",
          "partial": "Get",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:stGet"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eQuery the internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "stQuery",
          "package": "polyparse",
          "signature": "(s -\u003e a) -\u003e Parser s a",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#stQuery",
          "type": "function"
        },
        "index": {
          "description": "Query the internal state",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "stQuery",
          "normalized": "(a-\u003eb)-\u003eParser a b",
          "package": "polyparse",
          "partial": "Query",
          "signature": "(s-\u003ea)-\u003eParser s a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:stQuery"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eUpdate the internal state.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "stUpdate",
          "package": "polyparse",
          "signature": "(s -\u003e s) -\u003e Parser s ()",
          "source": "src/Text-ParserCombinators-Poly-StateText.html#stUpdate",
          "type": "function"
        },
        "index": {
          "description": "Update the internal state",
          "hierarchy": "Text ParserCombinators Poly StateText",
          "module": "Text.ParserCombinators.Poly.StateText",
          "name": "stUpdate",
          "normalized": "(a-\u003ea)-\u003eParser a()",
          "package": "polyparse",
          "partial": "Update",
          "signature": "(s-\u003es)-\u003eParser s()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-StateText.html#v:stUpdate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "Text",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Text.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "Text",
          "package": "polyparse",
          "partial": "Text",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis \u003ccode\u003eParser\u003c/code\u003e datatype is a specialised parsing monad with error\n   reporting.  Whereas the standard version can be used for arbitrary\n   token types, this version is specialised to Text input only.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "Parser",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Text.html#Parser",
          "type": "newtype"
        },
        "index": {
          "description": "This Parser datatype is specialised parsing monad with error reporting Whereas the standard version can be used for arbitrary token types this version is specialised to Text input only",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "Parser",
          "package": "polyparse",
          "partial": "Parser",
          "type": "newtype"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#t:Parser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eA return type like Either, that distinguishes not only between\n   right and wrong answers, but also has commitment, so that a failure\n   cannot be undone.  This should only be used for writing very primitive\n   parsers - really it is an internal detail of the library.\n   The z type is the remaining unconsumed input.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "Result",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly-Result.html#Result",
          "type": "data"
        },
        "index": {
          "description": "return type like Either that distinguishes not only between right and wrong answers but also has commitment so that failure cannot be undone This should only be used for writing very primitive parsers really it is an internal detail of the library The type is the remaining unconsumed input",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "Result",
          "package": "polyparse",
          "partial": "Result",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#t:Result"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "P",
          "package": "polyparse",
          "signature": "P (Text -\u003e Result Text a)",
          "source": "src/Text-ParserCombinators-Poly-Text.html#Parser",
          "type": "function"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "P",
          "normalized": "P(Text-\u003eResult Text a)",
          "package": "polyparse",
          "signature": "P(Text-\u003eResult Text a)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:P"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSucceed if the end of file/input has been reached, fail otherwise.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "eof",
          "package": "polyparse",
          "signature": "Parser ()",
          "source": "src/Text-ParserCombinators-Poly-Text.html#eof",
          "type": "function"
        },
        "index": {
          "description": "Succeed if the end of file input has been reached fail otherwise",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "eof",
          "normalized": "Parser()",
          "package": "polyparse",
          "signature": "Parser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:eof"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emany1Satisfy p\u003c/code\u003e is a more efficient fused version of \u003ccode\u003emany1 (satisfy p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "many1Satisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser Text",
          "source": "src/Text-ParserCombinators-Poly-Text.html#many1Satisfy",
          "type": "function"
        },
        "index": {
          "description": "many1Satisfy is more efficient fused version of many1 satisfy",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "many1Satisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser Text",
          "package": "polyparse",
          "partial": "Satisfy",
          "signature": "(Char-\u003eBool)-\u003eParser Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:many1Satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003emanySatisfy p\u003c/code\u003e is a more efficient fused version of \u003ccode\u003emany (satisfy p)\u003c/code\u003e\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "manySatisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser Text",
          "source": "src/Text-ParserCombinators-Poly-Text.html#manySatisfy",
          "type": "function"
        },
        "index": {
          "description": "manySatisfy is more efficient fused version of many satisfy",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "manySatisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser Text",
          "package": "polyparse",
          "partial": "Satisfy",
          "signature": "(Char-\u003eBool)-\u003eParser Text",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:manySatisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eSimply return the next token in the input tokenstream.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "next",
          "package": "polyparse",
          "signature": "Parser Char",
          "source": "src/Text-ParserCombinators-Poly-Text.html#next",
          "type": "function"
        },
        "index": {
          "description": "Simply return the next token in the input tokenstream",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "next",
          "package": "polyparse",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:next"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003e\u003ccode\u003ep \u003ccode\u003e\u003ca\u003eonFail\u003c/a\u003e\u003c/code\u003e q\u003c/code\u003e means parse p, unless p fails, in which case\n   parse q instead.\n   Can be chained together to give multiple attempts to parse something.\n   (Note that q could itself be a failing parser, e.g. to change the error\n   message from that defined in p to something different.)\n   However, a severe failure in p cannot be ignored.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "onFail",
          "package": "polyparse",
          "signature": "Parser a -\u003e Parser a -\u003e Parser a",
          "source": "src/Text-ParserCombinators-Poly-Text.html#onFail",
          "type": "function"
        },
        "index": {
          "description": "onFail means parse unless fails in which case parse instead Can be chained together to give multiple attempts to parse something Note that could itself be failing parser e.g to change the error message from that defined in to something different However severe failure in cannot be ignored",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "onFail",
          "normalized": "Parser a-\u003eParser a-\u003eParser a",
          "package": "polyparse",
          "partial": "Fail",
          "signature": "Parser a-\u003eParser a-\u003eParser a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:onFail"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003ePush some tokens back onto the front of the input stream and reparse.\n   This is useful e.g. for recursively expanding macros.  When the\n   user-parser recognises a macro use, it can lookup the macro\n   expansion from the parse state, lex it, and then stuff the\n   lexed expansion back down into the parser.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "reparse",
          "package": "polyparse",
          "signature": "Text -\u003e Parser ()",
          "source": "src/Text-ParserCombinators-Poly-Text.html#reparse",
          "type": "function"
        },
        "index": {
          "description": "Push some tokens back onto the front of the input stream and reparse This is useful e.g for recursively expanding macros When the user-parser recognises macro use it can lookup the macro expansion from the parse state lex it and then stuff the lexed expansion back down into the parser",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "reparse",
          "normalized": "Text-\u003eParser()",
          "package": "polyparse",
          "signature": "Text-\u003eParser()",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:reparse"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eApply a parser to an input token sequence.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "runParser",
          "package": "polyparse",
          "signature": "Parser a -\u003e Text -\u003e (Either String a, Text)",
          "source": "src/Text-ParserCombinators-Poly-Text.html#runParser",
          "type": "function"
        },
        "index": {
          "description": "Apply parser to an input token sequence",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "runParser",
          "normalized": "Parser a-\u003eText-\u003e(Either String a,Text)",
          "package": "polyparse",
          "partial": "Parser",
          "signature": "Parser a-\u003eText-\u003e(Either String a,Text)",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:runParser"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn the next token if it satisfies the given predicate.\n\u003c/p\u003e",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "satisfy",
          "package": "polyparse",
          "signature": "(Char -\u003e Bool) -\u003e Parser Char",
          "source": "src/Text-ParserCombinators-Poly-Text.html#satisfy",
          "type": "function"
        },
        "index": {
          "description": "Return the next token if it satisfies the given predicate",
          "hierarchy": "Text ParserCombinators Poly Text",
          "module": "Text.ParserCombinators.Poly.Text",
          "name": "satisfy",
          "normalized": "(Char-\u003eBool)-\u003eParser Char",
          "package": "polyparse",
          "signature": "(Char-\u003eBool)-\u003eParser Char",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly-Text.html#v:satisfy"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Text.ParserCombinators.Poly",
          "name": "Poly",
          "package": "polyparse",
          "source": "src/Text-ParserCombinators-Poly.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Text ParserCombinators Poly",
          "module": "Text.ParserCombinators.Poly",
          "name": "Poly",
          "package": "polyparse",
          "partial": "Poly",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/polyparse/docs/Text-ParserCombinators-Poly.html#"
      }
    }
  ]
]