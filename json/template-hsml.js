[
  {
    "cmd": "delete-by-query",
    "query": {
      "contexts": [
        "package"
      ],
      "query": {
        "op": "case",
        "type": "word",
        "word": "template-hsml"
      },
      "type": "context"
    }
  },
  [
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003e\u003ccode\u003eHSML\u003c/code\u003e is simple templating system with syntax similar to XML that\n lets you embed Haskell expressions and declarations inside your\n templates. Apart from that, it also lets you specify argumets for your\n templates, thanks to that, templates can be mostly self-contained.\n\u003c/p\u003e\u003cp\u003eThis is the syntax, with some of the details left out:\n\u003c/p\u003e\u003cpre\u003e syntax = { argument }, { chunk } ;\n chunk = text | text_raw | element_node | element_leaf | haskell ;\n argument = \"{a|\" ? argument name ?, [ \"::\" ? type ? ] \"|}\" ;\n\n text = ? all characters except \\'\u003c\\' and \\'{\\' which have to be escaped ? ;\n text_raw = \"{r|\" ? all characters, the sequence can not contain \\\"|}\\\" substring ? \"|}\" ;\n element_node = \"\u003c\" element_name { attribute } \"\u003e\" { chunk } \"\u003c/\" element_name \"\u003e\" ;\n element_leaf = \"\u003c\" element_name { attribute } \"/\u003e\" ;\n haskell = \"{h|\" expression | declaration \"|}\" ;\n\n attribute = attribute_exp | attribute_normal\n attribute_exp = \"{h|\" expression \"|}\"\n attribute_normal = attribute_name \"=\" attribute_value ;\n attribute_name = ? classic attribute name ? | \"{h|\" expression \"|}\" ;\n attribute_value = ? classic attribute value ? | \"{h| expression \"|}\" ;\n\n expression = ? Haskell expression not containing \\\"|}\\\" as a substring ? ;\n declaration = ? Haskell declaration not containing \\\"|}\\\" as a substring ? ;\n\u003c/pre\u003e\u003cp\u003eExample (Main.hs):\n\u003c/p\u003e\u003cpre\u003e {-# LANGUAGE TemplateHaskell #-}\n {-# LANGUAGE QuasiQuotes     #-}\n {-# LANGUAGE RecordWildCards #-}\n \n ------------------------------------------------------------------------------\n import           Data.Monoid ((\u003c\u003e))\n ------------------------------------------------------------------------------\n import           Control.Monad\n ------------------------------------------------------------------------------\n import qualified Text.Blaze.Html5 as B\n ------------------------------------------------------------------------------\n import           Template.HSML\n ------------------------------------------------------------------------------\n \n data User = User\n     { userID :: Int\n     , userName :: String\n     , userAge :: Int\n     }\n \n $(hsmlFileWith (defaultOptions \"Default\") \"default_layout.hsml\")\n \n homeTemplate :: [User] -\u003e B.Markup\n homeTemplate users = renderTemplate Default\n     { defaultTitle = \"Home page\"\n     , defaultSectionMiddle = middle\n     , defaultSectionFooter = [m| \u003cp\u003eGenerated by HSML\u003c/p\u003e |]\n     }\n     where\n       middle = [m|\n         \u003cul class=\"users\"\u003e\n           {h| forM_ users wrap |}\n         \u003c/ul\u003e |]\n       wrap u = [m|\u003cli\u003e {h| userTemplate u |} \u003c/li\u003e|]\n \n userTemplate :: User -\u003e B.Markup\n userTemplate User{..} = [m|\n   \u003cul class={h| \"user-\" \u003c\u003e show userID |}\u003e\n     \u003cli\u003eName: {h|userName|}\u003c/li\u003e\n     \u003cli\u003eAge: {h|userAge|}\u003c/li\u003e\n   \u003c/ul\u003e |]\n\u003c/pre\u003e\u003cp\u003eExample (default_layout.hsml):\n\u003c/p\u003e\u003cpre\u003e {a| title :: String |}\n {a| sectionMiddle :: B.Markup |}\n {a| sectionFooter :: B.Markup |}\n \n {h| B.docType |}\n \n \u003chtml lang=\"en\"\u003e\n   \u003chead\u003e\n     \u003cmeta charset=\"utf-8\"/\u003e\n     \u003ctitle\u003e{h|title|}\u003c/title\u003e\n   \u003c/head\u003e\n \n   \u003cbody\u003e\n     \u003cdiv class=\"section middle\"\u003e\n       {h|sectionMiddle|}\n     \u003c/div\u003e\n \n     \u003cfooter\u003e\n       {h|sectionFooter|}\n     \u003c/footer\u003e\n   \u003c/body\u003e\n \u003c/html\u003e\n\u003c/pre\u003e\u003cp\u003eResult of \u003ccode\u003erenderMarkup $ homeTemplate [User 1 \u003ca\u003eJon Doe\u003c/a\u003e 16, User\n 2 \u003ca\u003eJane Roe\u003c/a\u003e 17]\u003c/code\u003e:\n\u003c/p\u003e\u003cpre\u003e \u003c!DOCTYPE HTML\u003e\n \u003chtml lang=\"en\"\u003e\n   \u003chead\u003e\n     \u003cmeta charset=\"utf-8\"\u003e\n     \u003ctitle\u003eHome page\u003c/title\u003e\n   \u003c/head\u003e\n \n   \u003cbody\u003e\n     \u003cdiv class=\"section middle\"\u003e\n       \u003cul class=\"users\"\u003e\n         \u003cli\u003e\n           \u003cul class=\"user-1\"\u003e\n             \u003cli\u003eName: Jon Doe\u003c/li\u003e\n             \u003cli\u003eAge: 16\u003c/li\u003e\n           \u003c/ul\u003e\n         \u003c/li\u003e\n         \u003cli\u003e\n           \u003cul class=\"user-2\"\u003e\n             \u003cli\u003eName: Jane Roe\u003c/li\u003e\n             \u003cli\u003eAge: 17\u003c/li\u003e\n           \u003c/ul\u003e\n         \u003c/li\u003e\n       \u003c/ul\u003e\n     \u003c/div\u003e\n \n     \u003cfooter\u003e\n       \u003cp\u003eGenerated by HSML\u003c/p\u003e\n     \u003c/footer\u003e\n   \u003c/body\u003e\n \u003c/html\u003e\n\u003c/pre\u003e\u003c/div\u003e",
          "module": "Template.HSML",
          "name": "HSML",
          "package": "template-hsml",
          "source": "src/Template-HSML.html",
          "type": "module"
        },
        "index": {
          "description": "HSML is simple templating system with syntax similar to XML that lets you embed Haskell expressions and declarations inside your templates Apart from that it also lets you specify argumets for your templates thanks to that templates can be mostly self-contained This is the syntax with some of the details left out syntax argument chunk chunk text text raw element node element leaf haskell argument argument name type text all characters except and which have to be escaped text raw all characters the sequence can not contain substring element node element name attribute chunk element name element leaf element name attribute haskell expression declaration attribute attribute exp attribute normal attribute exp expression attribute normal attribute name attribute value attribute name classic attribute name expression attribute value classic attribute value expression expression Haskell expression not containing as substring declaration Haskell declaration not containing as substring Example Main.hs LANGUAGE TemplateHaskell LANGUAGE QuasiQuotes LANGUAGE RecordWildCards import Data.Monoid import Control.Monad import qualified Text.Blaze.Html5 as import Template.HSML data User User userID Int userName String userAge Int hsmlFileWith defaultOptions Default default layout.hsml homeTemplate User B.Markup homeTemplate users renderTemplate Default defaultTitle Home page defaultSectionMiddle middle defaultSectionFooter Generated by HSML where middle ul class users forM users wrap ul wrap li userTemplate li userTemplate User B.Markup userTemplate User ul class user show userID li Name userName li li Age userAge li ul Example default layout.hsml title String sectionMiddle B.Markup sectionFooter B.Markup B.docType html lang en head meta charset utf-8 title title title head body div class section middle sectionMiddle div footer sectionFooter footer body html Result of renderMarkup homeTemplate User Jon Doe User Jane Roe DOCTYPE HTML html lang en head meta charset utf-8 title Home page title head body div class section middle ul class users li ul class user-1 li Name Jon Doe li li Age li ul li li ul class user-2 li Name Jane Roe li li Age li ul li ul div footer Generated by HSML footer body html",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "HSML",
          "package": "template-hsml",
          "partial": "HSML",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTemplate type-class.\n\u003c/p\u003e",
          "module": "Template.HSML",
          "name": "IsTemplate",
          "package": "template-hsml",
          "source": "src/Template-HSML-Internal-Types.html#IsTemplate",
          "type": "class"
        },
        "index": {
          "description": "Template type-class",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "IsTemplate",
          "package": "template-hsml",
          "partial": "Is Template",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#t:IsTemplate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThis type lets you customize some behaviour of HSML templates.\n\u003c/p\u003e",
          "module": "Template.HSML",
          "name": "Options",
          "package": "template-hsml",
          "source": "src/Template-HSML-Internal-Types.html#Options",
          "type": "data"
        },
        "index": {
          "description": "This type lets you customize some behaviour of HSML templates",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "Options",
          "package": "template-hsml",
          "partial": "Options",
          "type": "data"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#t:Options"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Template.HSML",
          "name": "Options",
          "package": "template-hsml",
          "signature": "Options",
          "source": "src/Template-HSML-Internal-Types.html#Options",
          "type": "function"
        },
        "index": {
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "Options",
          "package": "template-hsml",
          "partial": "Options",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:Options"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault settings for HSML generators.\n\u003c/p\u003e\u003cpre\u003e defaultOptions name = Options\n     { optExpToMarkup = True\n     , optExpToValue = True\n     , optTemplateName = firstUpper name\n     , optTemplateFieldName = \\a -\u003e firstLower name \u003c\u003e firstUpper a\n     }\n     where\n       firstUpper \"\" = \"\"\n       firstUpper (c:cs) = toUpper c : cs\n \n       firstLower \"\" = \"\"\n       firstLower (c:cs) = toLower c : cs\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "defaultOptions",
          "package": "template-hsml",
          "signature": "String -\u003e Options",
          "source": "src/Template-HSML-Internal-Types.html#defaultOptions",
          "type": "function"
        },
        "index": {
          "description": "Default settings for HSML generators defaultOptions name Options optExpToMarkup True optExpToValue True optTemplateName firstUpper name optTemplateFieldName firstLower name firstUpper where firstUpper firstUpper cs toUpper cs firstLower firstLower cs toLower cs",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "defaultOptions",
          "normalized": "String-\u003eOptions",
          "package": "template-hsml",
          "partial": "Options",
          "signature": "String-\u003eOptions",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:defaultOptions"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eDefault settings for Simplified HSML generators.\n\u003c/p\u003e\u003cpre\u003e defaultOptionsS = Options\n     { optExpToMarkup = True \n     , optExpToValue = True\n     , optTemplateName = undefined\n     , optTemplateFieldName = undefined \n     }\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "defaultOptionsS",
          "package": "template-hsml",
          "signature": "Options",
          "source": "src/Template-HSML-Internal-Types.html#defaultOptionsS",
          "type": "function"
        },
        "index": {
          "description": "Default settings for Simplified HSML generators defaultOptionsS Options optExpToMarkup True optExpToValue True optTemplateName undefined optTemplateFieldName undefined",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "defaultOptionsS",
          "package": "template-hsml",
          "partial": "Options",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:defaultOptionsS"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eQuasiQuoter for Simplified HSML expressions with default options. See\n \u003ccode\u003e\u003ca\u003edefaulOptionsS\u003c/a\u003e\u003c/code\u003e for details. \n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e example :: Blaze.Text.Markup\n example = [hsml|\n   \u003ch1\u003ePage Title\u003c/h1\u003e\n   \u003cp\u003e\n     Some interesting paragraph.\n   \u003c/p\u003e\n   |]\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "hsml",
          "package": "template-hsml",
          "signature": "QuasiQuoter",
          "source": "src/Template-HSML-Internal-TH.html#hsml",
          "type": "function"
        },
        "index": {
          "description": "QuasiQuoter for Simplified HSML expressions with default options See defaulOptionsS for details Example example Blaze.Text.Markup example hsml h1 Page Title h1 Some interesting paragraph",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "hsml",
          "package": "template-hsml",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:hsml"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses HSML document from file with default options. Results in\n record type and its \u003ccode\u003e\u003ca\u003eIsTemplate\u003c/a\u003e\u003c/code\u003e instance.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e $(hsmlFile \"MyTemplate\" \"my_template.hsml\")\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "hsmlFile",
          "package": "template-hsml",
          "signature": "String-\u003e FilePath-\u003e Q [Dec]",
          "type": "function"
        },
        "index": {
          "description": "Parses HSML document from file with default options Results in record type and its IsTemplate instance Example hsmlFile MyTemplate my template.hsml",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "hsmlFile",
          "normalized": "String-\u003eFilePath-\u003eQ[Dec]",
          "package": "template-hsml",
          "partial": "File",
          "signature": "String-\u003eFilePath-\u003eQ[Dec]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:hsmlFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses HSML document from file with the given options. Results in\n record type and its \u003ccode\u003e\u003ca\u003eIsTemplate\u003c/a\u003e\u003c/code\u003e instance.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e $(hsmlFileWith (defaultOptions \"MyTemplate\") \"my_template.hsml\")\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "hsmlFileWith",
          "package": "template-hsml",
          "signature": "Options-\u003e FilePath-\u003e Q [Dec]",
          "type": "function"
        },
        "index": {
          "description": "Parses HSML document from file with the given options Results in record type and its IsTemplate instance Example hsmlFileWith defaultOptions MyTemplate my template.hsml",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "hsmlFileWith",
          "normalized": "Options-\u003eFilePath-\u003eQ[Dec]",
          "package": "template-hsml",
          "partial": "File With",
          "signature": "Options-\u003eFilePath-\u003eQ[Dec]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:hsmlFileWith"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses HSML document from string with default options. Results in\n record type and its \u003ccode\u003e\u003ca\u003eIsTemplate\u003c/a\u003e\u003c/code\u003e instance.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e $(hsmlString \"MyTemplate\" \"\u003cp\u003eParagraph\u003c/p\u003e\")\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "hsmlString",
          "package": "template-hsml",
          "signature": "String-\u003e String-\u003e Q [Dec]",
          "type": "function"
        },
        "index": {
          "description": "Parses HSML document from string with default options Results in record type and its IsTemplate instance Example hsmlString MyTemplate Paragraph",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "hsmlString",
          "normalized": "String-\u003eString-\u003eQ[Dec]",
          "package": "template-hsml",
          "partial": "String",
          "signature": "String-\u003eString-\u003eQ[Dec]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:hsmlString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses HSML document string with the given options. Results in\n record type and its \u003ccode\u003e\u003ca\u003eIsTemplate\u003c/a\u003e\u003c/code\u003e instance.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e $(hsmlStringWith (defaultOptions \"MyTemplate\") \"\u003cp\u003eParagraph\u003c/p\u003e\")\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "hsmlStringWith",
          "package": "template-hsml",
          "signature": "Options-\u003e String-\u003e Q [Dec]",
          "type": "function"
        },
        "index": {
          "description": "Parses HSML document string with the given options Results in record type and its IsTemplate instance Example hsmlStringWith defaultOptions MyTemplate Paragraph",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "hsmlStringWith",
          "normalized": "Options-\u003eString-\u003eQ[Dec]",
          "package": "template-hsml",
          "partial": "String With",
          "signature": "Options-\u003eString-\u003eQ[Dec]",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:hsmlStringWith"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe same as \u003ccode\u003e\u003ca\u003ehsml\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e example :: Blaze.Text.Markup\n example = [m|\n   \u003ch1\u003ePage Title\u003c/h1\u003e\n   \u003cp\u003e\n     Some interesting paragraph.\n   \u003c/p\u003e\n   |]\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "m",
          "package": "template-hsml",
          "signature": "QuasiQuoter",
          "source": "src/Template-HSML-Internal-TH.html#m",
          "type": "function"
        },
        "index": {
          "description": "The same as hsml Example example Blaze.Text.Markup example h1 Page Title h1 Some interesting paragraph",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "m",
          "package": "template-hsml",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:m"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf and only if set to True, applies \u003ccode\u003e\u003ca\u003etoMarkup\u003c/a\u003e\u003c/code\u003e on\n section expressions in your HSML templates.\n\u003c/p\u003e",
          "module": "Template.HSML",
          "name": "optExpToMarkup",
          "package": "template-hsml",
          "signature": "Bool",
          "source": "src/Template-HSML-Internal-Types.html#Options",
          "type": "function"
        },
        "index": {
          "description": "If and only if set to True applies toMarkup on section expressions in your HSML templates",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "optExpToMarkup",
          "package": "template-hsml",
          "partial": "Exp To Markup",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:optExpToMarkup"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eIf and only if set to True, applies \u003ccode\u003e\u003ca\u003etoValue\u003c/a\u003e\u003c/code\u003e on\n attribute value expressions in your HSML templates.\n\u003c/p\u003e",
          "module": "Template.HSML",
          "name": "optExpToValue",
          "package": "template-hsml",
          "signature": "Bool",
          "source": "src/Template-HSML-Internal-Types.html#Options",
          "type": "function"
        },
        "index": {
          "description": "If and only if set to True applies toValue on attribute value expressions in your HSML templates",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "optExpToValue",
          "package": "template-hsml",
          "partial": "Exp To Value",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:optExpToValue"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe name of the fields of the genrated record.\n\u003c/p\u003e\u003cp\u003eNOTE: Has no effect on Simplified HTML templates.\n\u003c/p\u003e",
          "module": "Template.HSML",
          "name": "optTemplateFieldName",
          "package": "template-hsml",
          "signature": "String -\u003e String",
          "source": "src/Template-HSML-Internal-Types.html#Options",
          "type": "function"
        },
        "index": {
          "description": "The name of the fields of the genrated record NOTE Has no effect on Simplified HTML templates",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "optTemplateFieldName",
          "normalized": "String-\u003eString",
          "package": "template-hsml",
          "partial": "Template Field Name",
          "signature": "String-\u003eString",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:optTemplateFieldName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eThe name of the generated record.\n\u003c/p\u003e\u003cp\u003eNOTE: Has no effect on Simplified HSML templates.\n\u003c/p\u003e",
          "module": "Template.HSML",
          "name": "optTemplateName",
          "package": "template-hsml",
          "signature": "String",
          "source": "src/Template-HSML-Internal-Types.html#Options",
          "type": "function"
        },
        "index": {
          "description": "The name of the generated record NOTE Has no effect on Simplified HSML templates",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "optTemplateName",
          "package": "template-hsml",
          "partial": "Template Name",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:optTemplateName"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Template.HSML",
          "name": "renderTemplate",
          "package": "template-hsml",
          "signature": "renderTemplate",
          "source": "src/Template-HSML-Internal-Types.html#renderTemplate",
          "type": "method"
        },
        "index": {
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "renderTemplate",
          "package": "template-hsml",
          "partial": "Template",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:renderTemplate"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses Simplified HSML document from file with default options. Results in\n expression of type \u003ccode\u003e\u003ca\u003eMarkup\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e example :: Text.Blaze.Markup\n example = $(shsmlFile \"my_template.hsml\")\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "shsmlFile",
          "package": "template-hsml",
          "signature": "FilePath-\u003e ExpQ",
          "type": "function"
        },
        "index": {
          "description": "Parses Simplified HSML document from file with default options Results in expression of type Markup Example example Text.Blaze.Markup example shsmlFile my template.hsml",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "shsmlFile",
          "normalized": "FilePath-\u003eExpQ",
          "package": "template-hsml",
          "partial": "File",
          "signature": "FilePath-\u003eExpQ",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:shsmlFile"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses Simplified HSML document from file with the given options. Results in\n expression of type \u003ccode\u003e\u003ca\u003eMarkup\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e example :: Text.Blaze.Markup\n example = $(shsmlFileWith defaultOptionsS \"my_template.hsml\")\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "shsmlFileWith",
          "package": "template-hsml",
          "signature": "Options-\u003e FilePath-\u003e ExpQ",
          "type": "function"
        },
        "index": {
          "description": "Parses Simplified HSML document from file with the given options Results in expression of type Markup Example example Text.Blaze.Markup example shsmlFileWith defaultOptionsS my template.hsml",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "shsmlFileWith",
          "normalized": "Options-\u003eFilePath-\u003eExpQ",
          "package": "template-hsml",
          "partial": "File With",
          "signature": "Options-\u003eFilePath-\u003eExpQ",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:shsmlFileWith"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses Simplified HSML document from string with default options. Results in\n expression of type \u003ccode\u003e\u003ca\u003eMarkup\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e example :: Text.Blaze.Markup\n example = $(shsmlString \"\u003cp\u003eParagraph\u003c/p\u003e\")\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "shsmlString",
          "package": "template-hsml",
          "signature": "String-\u003e ExpQ",
          "type": "function"
        },
        "index": {
          "description": "Parses Simplified HSML document from string with default options Results in expression of type Markup Example example Text.Blaze.Markup example shsmlString Paragraph",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "shsmlString",
          "normalized": "String-\u003eExpQ",
          "package": "template-hsml",
          "partial": "String",
          "signature": "String-\u003eExpQ",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:shsmlString"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eParses Simplified HSML document from string with the given options. Results in\n expression of type \u003ccode\u003e\u003ca\u003eMarkup\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e example :: Text.Blaze.Markup\n example = $(shsmlStringWith defaultOptionsS \"\u003cp\u003eParagraph\u003c/p\u003e\")\n\u003c/pre\u003e",
          "module": "Template.HSML",
          "name": "shsmlStringWith",
          "package": "template-hsml",
          "signature": "Options-\u003e String-\u003e ExpQ",
          "type": "function"
        },
        "index": {
          "description": "Parses Simplified HSML document from string with the given options Results in expression of type Markup Example example Text.Blaze.Markup example shsmlStringWith defaultOptionsS Paragraph",
          "hierarchy": "Template HSML",
          "module": "Template.HSML",
          "name": "shsmlStringWith",
          "normalized": "Options-\u003eString-\u003eExpQ",
          "package": "template-hsml",
          "partial": "String With",
          "signature": "Options-\u003eString-\u003eExpQ",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/template-hsml/docs/Template-HSML.html#v:shsmlStringWith"
      }
    }
  ]
]