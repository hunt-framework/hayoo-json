[
  {
    "cmd": "delete-by-query",
    "query": {
      "contexts": [
        "package"
      ],
      "query": {
        "op": "case",
        "type": "word",
        "word": "vector-random"
      },
      "type": "context"
    }
  },
  [
    {
      "cmd": "insert",
      "document": {
        "description": {
          "module": "Data.Vector.Random.Mersenne",
          "name": "Mersenne",
          "package": "vector-random",
          "source": "src/Data-Vector-Random-Mersenne.html",
          "type": "module"
        },
        "index": {
          "hierarchy": "Data Vector Random Mersenne",
          "module": "Data.Vector.Random.Mersenne",
          "name": "Mersenne",
          "package": "vector-random",
          "partial": "Mersenne",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/vector-random/docs/Data-Vector-Random-Mersenne.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eClass of types that we have efficient generators for.\n\u003c/p\u003e",
          "module": "Data.Vector.Random.Mersenne",
          "name": "PureMTRandom",
          "package": "vector-random",
          "source": "src/Data-Vector-Random-Mersenne.html#PureMTRandom",
          "type": "class"
        },
        "index": {
          "description": "Class of types that we have efficient generators for",
          "hierarchy": "Data Vector Random Mersenne",
          "module": "Data.Vector.Random.Mersenne",
          "name": "PureMTRandom",
          "package": "vector-random",
          "partial": "Pure MTRandom",
          "type": "class"
        },
        "uri": "http://hackage.haskell.org/package/vector-random/docs/Data-Vector-Random-Mersenne.html#t:PureMTRandom"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eGiven a pure mersenne twister state, yield a new random value,\n and the next state.\n\u003c/p\u003e",
          "module": "Data.Vector.Random.Mersenne",
          "name": "random",
          "package": "vector-random",
          "signature": "PureMT -\u003e (a, PureMT)",
          "source": "src/Data-Vector-Random-Mersenne.html#random",
          "type": "method"
        },
        "index": {
          "description": "Given pure mersenne twister state yield new random value and the next state",
          "hierarchy": "Data Vector Random Mersenne",
          "module": "Data.Vector.Random.Mersenne",
          "name": "random",
          "normalized": "PureMT-\u003e(a,PureMT)",
          "package": "vector-random",
          "signature": "PureMT-\u003e(a,PureMT)",
          "type": "method"
        },
        "uri": "http://hackage.haskell.org/package/vector-random/docs/Data-Vector-Random-Mersenne.html#v:random"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eReturn a random vector of length \u003ccode\u003en\u003c/code\u003e, filled with random elements\n of type \u003ccode\u003ea\u003c/code\u003e generated by the mersenne-twister.\n\u003c/p\u003e\u003cp\u003eE.g. to compute the sum of 100 million random Double values in a vector:\n\u003c/p\u003e\u003cpre\u003e import qualified Data.VectorUnboxed as U\n import System.Random.Mersenne.Pure64\n import qualified Data.Vector.Random.Mersenne as G\n \n main = do\n     g \u003c- newPureMT\n     let a = G.random g 10000000 :: U.Vector Double\n     print (U.sum a)\n\u003c/pre\u003e\u003cp\u003eThe generator will fuse under stream fusion, so e.g. sum . random g\n will allocate no intermediate array.\n\u003c/p\u003e",
          "module": "Data.Vector.Random.Mersenne",
          "name": "randoms",
          "package": "vector-random",
          "signature": "PureMT -\u003e Int -\u003e v a",
          "source": "src/Data-Vector-Random-Mersenne.html#randoms",
          "type": "function"
        },
        "index": {
          "description": "Return random vector of length filled with random elements of type generated by the mersenne-twister E.g to compute the sum of million random Double values in vector import qualified Data.VectorUnboxed as import System.Random.Mersenne.Pure64 import qualified Data.Vector.Random.Mersenne as main do newPureMT let G.random U.Vector Double print U.sum The generator will fuse under stream fusion so e.g sum random will allocate no intermediate array",
          "hierarchy": "Data Vector Random Mersenne",
          "module": "Data.Vector.Random.Mersenne",
          "name": "randoms",
          "normalized": "PureMT-\u003eInt-\u003ea b",
          "package": "vector-random",
          "signature": "PureMT-\u003eInt-\u003ev a",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/vector-random/docs/Data-Vector-Random-Mersenne.html#v:randoms"
      }
    }
  ]
]