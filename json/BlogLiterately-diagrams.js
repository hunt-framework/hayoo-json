[
  {
    "cmd": "delete-by-query",
    "query": {
      "contexts": [
        "package"
      ],
      "query": {
        "op": "case",
        "type": "word",
        "word": "BlogLiterately-diagrams"
      },
      "type": "context"
    }
  },
  [
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCustom transformation passes for the \u003ccode\u003eBlogLiterately\u003c/code\u003e blog-writing\n tool (\u003ca\u003ehttp://hackage.haskell.org/package/BlogLiterately\u003c/a\u003e),\n allowing inclusion of inline code using the \u003ccode\u003ediagrams\u003c/code\u003e framework\n (\u003ca\u003ehttp://projects.haskell.org/diagrams\u003c/a\u003e) which are compiled into\n images.  See \u003ca\u003eText.BlogLiterately.Run\u003c/a\u003e for more information.\n\u003c/p\u003e\u003cp\u003eNote that this package provides an executable, \u003ccode\u003eBlogLiteratelyD\u003c/code\u003e,\n which compiles embedded diagrams code as well as all the standard\n transforms provided by BlogLiterately.\n\u003c/p\u003e\u003c/div\u003e",
          "module": "Text.BlogLiterately.Diagrams",
          "name": "Diagrams",
          "package": "BlogLiterately-diagrams",
          "source": "src/Text-BlogLiterately-Diagrams.html",
          "type": "module"
        },
        "index": {
          "description": "Custom transformation passes for the BlogLiterately blog-writing tool http hackage.haskell.org package BlogLiterately allowing inclusion of inline code using the diagrams framework http projects.haskell.org diagrams which are compiled into images See Text.BlogLiterately.Run for more information Note that this package provides an executable BlogLiteratelyD which compiles embedded diagrams code as well as all the standard transforms provided by BlogLiterately",
          "hierarchy": "Text BlogLiterately Diagrams",
          "module": "Text.BlogLiterately.Diagrams",
          "name": "Diagrams",
          "package": "BlogLiterately-diagrams",
          "partial": "Diagrams",
          "type": "module"
        },
        "uri": "http://hackage.haskell.org/package/BlogLiterately-diagrams/docs/Text-BlogLiterately-Diagrams.html#"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTransform a blog post by looking for \u003cem\u003einline\u003c/em\u003e code snippets with\n   class \u003ccode\u003edia\u003c/code\u003e, and replacing them with images generated by\n   evaluating the contents of each code snippet as a Haskell\n   expression representing a diagram.  Any code blocks with class\n   \u003ccode\u003edia-def\u003c/code\u003e will be in scope for the evaluation of these\n   expressions (such code blocks are unaffected).\n\u003c/p\u003e\u003cp\u003eBecause \u003ccode\u003ediagramsXF\u003c/code\u003e and \u003ccode\u003ediagramsInlineXF\u003c/code\u003e both use blocks with\n   class \u003ccode\u003edia-def\u003c/code\u003e, but \u003ccode\u003ediagramsInlineXF\u003c/code\u003e leaves them alone whereas\n   \u003ccode\u003ediagramsXF\u003c/code\u003e deletes them, \u003ccode\u003ediagramsInlineXF\u003c/code\u003e must be placed\n   before \u003ccode\u003ediagramsXF\u003c/code\u003e in the pipeline.\n\u003c/p\u003e",
          "module": "Text.BlogLiterately.Diagrams",
          "name": "diagramsInlineXF",
          "package": "BlogLiterately-diagrams",
          "signature": "Transform",
          "source": "src/Text-BlogLiterately-Diagrams.html#diagramsInlineXF",
          "type": "function"
        },
        "index": {
          "description": "Transform blog post by looking for inline code snippets with class dia and replacing them with images generated by evaluating the contents of each code snippet as Haskell expression representing diagram Any code blocks with class dia-def will be in scope for the evaluation of these expressions such code blocks are unaffected Because diagramsXF and diagramsInlineXF both use blocks with class dia-def but diagramsInlineXF leaves them alone whereas diagramsXF deletes them diagramsInlineXF must be placed before diagramsXF in the pipeline",
          "hierarchy": "Text BlogLiterately Diagrams",
          "module": "Text.BlogLiterately.Diagrams",
          "name": "diagramsInlineXF",
          "package": "BlogLiterately-diagrams",
          "partial": "Inline XF",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/BlogLiterately-diagrams/docs/Text-BlogLiterately-Diagrams.html#v:diagramsInlineXF"
      }
    },
    {
      "cmd": "insert",
      "document": {
        "description": {
          "description": "\u003cp\u003eTransform a blog post by looking for code blocks with class\n   \u003ccode\u003edia\u003c/code\u003e, and replacing them with images generated by evaluating the\n   identifier \u003ccode\u003edia\u003c/code\u003e and rendering the resulting diagram.  In\n   addition, blocks with class \u003ccode\u003edia-def\u003c/code\u003e are collected (and deleted\n   from the output) and provided as additional definitions that will\n   be in scope during evaluation of all \u003ccode\u003edia\u003c/code\u003e blocks.\n\u003c/p\u003e\u003cp\u003eBe sure to use this transform \u003cem\u003ebefore\u003c/em\u003e the standard\n   \u003ccode\u003e\u003ca\u003ehighlightXF\u003c/a\u003e\u003c/code\u003e transform, \u003cem\u003ei.e.\u003c/em\u003e\n   with the \u003ccode\u003e\u003ca\u003eblogLiteratelyCustom\u003c/a\u003e\u003c/code\u003e function.\n   For example,\n\u003c/p\u003e\u003cpre\u003e main = blogLiteratelyCustom (diagramsXF : standardTransforms)\n\u003c/pre\u003e\u003cp\u003eIt also works well in conjunction with\n   \u003ccode\u003e\u003ca\u003ecenterImagesXF\u003c/a\u003e\u003c/code\u003e (which, of course,\n   should be placed after \u003ccode\u003ediagramsXF\u003c/code\u003e in the pipeline).  This\n   package provides an executable \u003ccode\u003eBlogLiteratelyD\u003c/code\u003e which\n   includes \u003ccode\u003ediagramsInlineXF\u003c/code\u003e, \u003ccode\u003ediagramsXF\u003c/code\u003e, and \u003ccode\u003ecenterImagesXF\u003c/code\u003e.\n\u003c/p\u003e",
          "module": "Text.BlogLiterately.Diagrams",
          "name": "diagramsXF",
          "package": "BlogLiterately-diagrams",
          "signature": "Transform",
          "source": "src/Text-BlogLiterately-Diagrams.html#diagramsXF",
          "type": "function"
        },
        "index": {
          "description": "Transform blog post by looking for code blocks with class dia and replacing them with images generated by evaluating the identifier dia and rendering the resulting diagram In addition blocks with class dia-def are collected and deleted from the output and provided as additional definitions that will be in scope during evaluation of all dia blocks Be sure to use this transform before the standard highlightXF transform i.e with the blogLiteratelyCustom function For example main blogLiteratelyCustom diagramsXF standardTransforms It also works well in conjunction with centerImagesXF which of course should be placed after diagramsXF in the pipeline This package provides an executable BlogLiteratelyD which includes diagramsInlineXF diagramsXF and centerImagesXF",
          "hierarchy": "Text BlogLiterately Diagrams",
          "module": "Text.BlogLiterately.Diagrams",
          "name": "diagramsXF",
          "package": "BlogLiterately-diagrams",
          "partial": "XF",
          "type": "function"
        },
        "uri": "http://hackage.haskell.org/package/BlogLiterately-diagrams/docs/Text-BlogLiterately-Diagrams.html#v:diagramsXF"
      }
    }
  ]
]